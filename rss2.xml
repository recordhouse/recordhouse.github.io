<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>기록맨</title>
    <link>https://recordboy.github.io/</link>
    
    <atom:link href="https://recordboy.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>프론트엔드 기술에 대한 기록 전용 블로그</description>
    <pubDate>Tue, 27 Sep 2022 15:08:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Algorithm] 코딩테스트 풀이 - 해시</title>
      <link>https://recordboy.github.io/2021/07/13/coding-test-hash/</link>
      <guid>https://recordboy.github.io/2021/07/13/coding-test-hash/</guid>
      <pubDate>Tue, 13 Jul 2021 01:30:22 GMT</pubDate>
      
      <description>&lt;p&gt;코딩테스트 플랫폼인 프로그래머스에서 해시 문제 및 풀이를 포스팅해보았다. 언어는 자바스크립트를 기준으로 작성하였다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>코딩테스트 플랫폼인 프로그래머스에서 해시 문제 및 풀이를 포스팅해보았다. 언어는 자바스크립트를 기준으로 작성하였다.</p><a id="more"></a><p><strong>해시</strong><br>해시란 데이터를 다루는 기술중 하나로서 해시함수를 이용하여 임의의 길이를 갖는 데이터를 고정된 길이의 데이터로 매핑하는 것을 말한다.</p><h2 id="완주하지-못한-선수"><a href="#완주하지-못한-선수" class="headerlink" title="완주하지 못한 선수"></a>완주하지 못한 선수</h2><h3 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h3><p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.<br>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h3><ul><li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li><li>completion의 길이는 participant의 길이보다 1 작습니다.</li><li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li><li>참가자 중에는 동명이인이 있을 수 있습니다.</li></ul><h3 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h3><table><thead><tr><th>participant</th><th>completion</th><th>return</th></tr></thead><tbody><tr><td>[“leo”, “kiki”, “eden”]</td><td>[“eden”, “kiki”]</td><td>“leo”</td></tr><tr><td>[“marina”, “josipa”, “nikola”, “vinko”, “filipa”]</td><td>[“josipa”, “filipa”, “marina”, “nikola”]</td><td>“vinko”</td></tr><tr><td>[“mislav”, “stanko”, “mislav”, “ana”]</td><td>[“stanko”, “ana”, “mislav”]</td><td>“mislav”</td></tr></tbody></table><h3 id="입출력-예-설명"><a href="#입출력-예-설명" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><p><strong>예제 #1</strong><br>“leo”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p><p><strong>예제 #2</strong><br>“vinko”는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p><p><strong>예제 #3</strong><br>“mislav”는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</p><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><h4 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> participant = [<span class="string">&quot;mislav&quot;</span>, <span class="string">&quot;stanko&quot;</span>, <span class="string">&quot;mislav&quot;</span>, <span class="string">&quot;ana&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> completion = [<span class="string">&quot;stanko&quot;</span>, <span class="string">&quot;ana&quot;</span>, <span class="string">&quot;mislav&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">participant, completion</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 각 배열을 이름순으로 정렬</span></span><br><span class="line">  participant.sort();</span><br><span class="line">  completion.sort();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 루프를 돌며 이름이 일치하지 않을 경우 결과를 담고 리턴</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; participant.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (participant[i] !== completion[i]) &#123;</span><br><span class="line">      answer = participant[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(solution(participant, completion));</span><br></pre></td></tr></table></figure><h4 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h4><p>반복문을 돌며 이름을 비교할 것이며 그 전에 동명이인이 있을 수 있기 때문에, 각 배열에 <code>sort</code> 함수를 사용하여 이름순으로 정렬한다. 반복문이 돌면서 이름을 매칭해보고 이름이 다를경우 해당 참여자를 응답값에 담고, 완주하지 못한 선수는 단 한명이기 때문에 값을 리턴하고 로직을 빠져나온다.</p><h2 id="위장"><a href="#위장" class="headerlink" title="위장"></a>위장</h2><h3 id="문제-설명-1"><a href="#문제-설명-1" class="headerlink" title="문제 설명"></a>문제 설명</h3><p>스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.<br>예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.</p><table><thead><tr><th>종류</th><th>이름</th></tr></thead><tbody><tr><td>얼굴</td><td>동그란 안경, 검정 선글라스</td></tr><tr><td>상의</td><td>파란색 티셔츠</td></tr><tr><td>하의</td><td>청바지</td></tr><tr><td>겉옷</td><td>긴 코트</td></tr></tbody></table><p>스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</p><h3 id="제한-사항-1"><a href="#제한-사항-1" class="headerlink" title="제한 사항"></a>제한 사항</h3><ul><li>clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.</li><li>스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.</li><li>같은 이름을 가진 의상은 존재하지 않습니다.</li><li>clothes의 모든 원소는 문자열로 이루어져 있습니다.</li><li>모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 ‘_‘ 로만 이루어져 있습니다.</li><li>스파이는 하루에 최소 한 개의 의상은 입습니다.</li></ul><h3 id="입출력-예-1"><a href="#입출력-예-1" class="headerlink" title="입출력 예"></a>입출력 예</h3><table><thead><tr><th>clothes</th><th>return</th></tr></thead><tbody><tr><td>[[“yellowhat”, “headgear”], [“bluesunglasses”, “eyewear”], [“green_turban”, “headgear”]]</td><td>5</td></tr><tr><td>[[“crowmask”, “face”], [“bluesunglasses”, “face”], [“smoky_makeup”, “face”]]</td><td>3</td></tr></tbody></table><h3 id="입출력-예-설명-1"><a href="#입출력-예-설명-1" class="headerlink" title="입출력 예 설명"></a>입출력 예 설명</h3><p><strong>예제 #1</strong><br>headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.</p><p><strong>예제 #2</strong><br>face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.</p><ol><li>crow_mask</li><li>blue_sunglasses</li><li>smoky_makeup</li></ol><h3 id="풀이-1"><a href="#풀이-1" class="headerlink" title="풀이"></a>풀이</h3><h4 id="코드-1"><a href="#코드-1" class="headerlink" title="코드"></a>코드</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clothes = [</span><br><span class="line">  [<span class="string">&quot;yellowhat&quot;</span>, <span class="string">&quot;headgear&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;bluesunglasses&quot;</span>, <span class="string">&quot;eyewear&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;green_turban&quot;</span>, <span class="string">&quot;headgear&quot;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">clothes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">1</span>; <span class="comment">// 리턴값, 마지막에 곱셉을 하기 때문에 0으로 하면 안됨</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;; <span class="comment">// 의상 종류마다 갯수를 담을 객체</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clothes.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 중복되는 키값이 존재한다면 1 더함</span></span><br><span class="line">    <span class="keyword">if</span> (obj[clothes[i][<span class="number">1</span>]] &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      obj[clothes[i][<span class="number">1</span>]] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 처음 등장하는 의상이면 1로 초기화</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[clothes[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 경우의 수 곱셈, (2 + 1) X (1 + 1)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    answer *= obj[key] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 아무것도 입지 않는 경우는 빼줌</span></span><br><span class="line">  <span class="keyword">return</span> answer - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(solution(clothes));</span><br></pre></td></tr></table></figure><h4 id="설명-1"><a href="#설명-1" class="headerlink" title="설명"></a>설명</h4><p>리턴값은 다른 옷의 조합수로서 이럴땐 경우의 수 공식을 사용하면 된다. 예제 #1로 예를 들면 모자의 경우의수는 2개며 안경의 경우의수는 1개다.</p><ul><li>headgear: yellowhat, green_turban</li><li>eyewear: bluesunglasses</li></ul><p>경우의 수 공식에 따라, <code>2 X 1 = 2</code>가 되야하지만, 모자나 안경을 안쓰는 경우도 있으니 각 경우의 수에 1씩 더해주서 <code>(2 + 1) X (1 + 1) = 6</code>이 된다. 여기서 아무것도 입지 않는 경우는 빼야 되므로 최종 경우의 수에 1을 빼준다. 최종적으로 <code>(2 + 1) X (1 + 1) - 1 = 5 </code> 수식이 된다. 이 방법으로 코드를 위처럼 작성하면 된다.</p><!-- ## 베스트앨범### 문제 설명스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.1. 속한 노래가 많이 재생된 장르를 먼저 수록합니다.2. 장르 내에서 많이 재생된 노래를 먼저 수록합니다.3. 장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.### 제한사항- genres[i]는 고유번호가 i인 노래의 장르입니다.- plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.- genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.- 장르 종류는 100개 미만입니다.- 장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.- 모든 장르는 재생된 횟수가 다릅니다.### 입출력 예| genres                                          | plays                      | return       || ----------------------------------------------- | -------------------------- | ------------ || ["classic", "pop", "classic", "classic", "pop"] | [500, 600, 150, 800, 2500] | [4, 1, 3, 0] |### 입출력 예 설명classic 장르는 1,450회 재생되었으며, classic 노래는 다음과 같습니다.- 고유 번호 3: 800회 재생- 고유 번호 0: 500회 재생- 고유 번호 2: 150회 재생pop 장르는 3,100회 재생되었으며, pop 노래는 다음과 같습니다.- 고유 번호 4: 2,500회 재생- 고유 번호 1: 600회 재생  따라서 pop 장르의 [4, 1]번 노래를 먼저, classic 장르의 [3, 0]번 노래를 그다음에 수록합니다.### 풀이#### 코드추가 내용 업로드 예정 -->]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/hash/">hash</category>
      
      
      <comments>https://recordboy.github.io/2021/07/13/coding-test-hash/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Express] Puppeteer, React, Express를 활용한 크롤러 만들기 및 Heroku에 배포하기</title>
      <link>https://recordboy.github.io/2021/04/30/puppeteer-search/</link>
      <guid>https://recordboy.github.io/2021/04/30/puppeteer-search/</guid>
      <pubDate>Fri, 30 Apr 2021 08:14:49 GMT</pubDate>
      
      <description>&lt;p&gt;이번에는 Puppeteer를 활용하여 웹 크롤러를 만들어 보겠다. 클라이언트는 React, 서버는 Express를 사용하고 로컬에서 작업이 끝나면 Heroku에 배포까지 해보자. 결과물과 소스는 아래에서 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과물: &lt;a href=&quot;https://recordboy-scrap-sample.herokuapp.com/&quot;&gt;https://recordboy-scrap-sample.herokuapp.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;소스: &lt;a href=&quot;https://github.com/recordboy/scrap-sample&quot;&gt;https://github.com/recordboy/scrap-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;결과물은 헤로쿠에 배포되었기 때문에 처음 페이지가 열릴때 로딩시간이 10초에서 30초정도 걸릴수 있다.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이번에는 Puppeteer를 활용하여 웹 크롤러를 만들어 보겠다. 클라이언트는 React, 서버는 Express를 사용하고 로컬에서 작업이 끝나면 Heroku에 배포까지 해보자. 결과물과 소스는 아래에서 확인할 수 있다.</p><ul><li>결과물: <a href="https://recordboy-scrap-sample.herokuapp.com/">https://recordboy-scrap-sample.herokuapp.com</a></li><li>소스: <a href="https://github.com/recordboy/scrap-sample">https://github.com/recordboy/scrap-sample</a></li></ul><blockquote><p>결과물은 헤로쿠에 배포되었기 때문에 처음 페이지가 열릴때 로딩시간이 10초에서 30초정도 걸릴수 있다.</p></blockquote><a id="more"></a><h1 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h1><p>Puppeteer는 Google Chrome 개발팀에서 직접 개발한 Chrome(혹은 Chromium) 렌더링 엔진을 이용하는 node.js 라이브러리이다. Puppeteer는 headless 모드를 지원하며, 이는 브라우저를 띄우지 않고 렌더링 작업을 가상으로 진행하고 실제 브라우저와 동일하게 동작한다. Puppeteer는 다양한 기능을 가지고 있으며 아래와 같은 기능들이 있다.</p><ul><li>웹페이지의 스크린샷과 PDF를 생성한다.</li><li>SPA(단일 페이지)를 크롤링하고 미리 렌더링된 콘텐츠(예: SSR)를 생성한다.</li><li>폼 입력, UI 테스트, 키보드 입력 등을 자동화 할 수 있다.</li><li>최신 자바스크립트 및 브라우저 기능을 이용해 최신버전의 크롬에서 직접 테스트할 수 있다.</li><li>사이트의 Timeline Trace를 기록하여 성능이나 문제를 진단할 수 있다.</li><li>크롬 확장 프로그램을 테스트 할 수 있다.</li></ul><h1 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h1><p>이 부분은 <a href="https://recordboy.github.io/2020/11/05/express-react-heroku-init/">[Express] Express + React 연동 및 Heroku에 배포하기</a> 포스팅과 비슷한 부분이 많기 때문에 각 단계의 추가 설명 없이 진행하도록 하겠다.</p><h2 id="디렉토리-생성-및-필요-모듈-설치"><a href="#디렉토리-생성-및-필요-모듈-설치" class="headerlink" title="디렉토리 생성 및 필요 모듈 설치"></a>디렉토리 생성 및 필요 모듈 설치</h2><p>디렉토리를 생성하고 이그노 파일을 생성한 뒤 npm 초기화 및 필요한 모듈을 설치한다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my-app</span><br><span class="line">$ cd my-app </span><br><span class="line">$ echo node_modules &gt; .gitignore</span><br><span class="line">$ npm init -y</span><br><span class="line">$ npm install express nodemon concurrently</span><br></pre></td></tr></table></figure><p>이제 서버로 사용할 <code>index.js</code> 파일을 생성하고 아래 내용을 입력한다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&quot;/api/data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.json(&#123; <span class="attr">greeting</span>: <span class="string">&quot;Hello World&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><code>package.json</code> 파일을 열고 <code>scripts</code> 항목에 <code>&quot;start&quot;: &quot;nodemon index.js&quot;</code>를 추가한다.</p><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon index.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="리액트-초기화"><a href="#리액트-초기화" class="headerlink" title="리액트 초기화"></a>리액트 초기화</h2><p>이제 클라이언트로 사용할 리액트를 생성하며, 이름은 <code>client</code>로 한다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app client --use-npm --template typescript</span><br></pre></td></tr></table></figure><h2 id="프록시-설정"><a href="#프록시-설정" class="headerlink" title="프록시 설정"></a>프록시 설정</h2><p>설치가 완료되면 <code>client</code> 디렉토리로 이동해서에 아래 모듈을 설치한다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd client</span><br><span class="line">$ npm install http-proxy-middleware</span><br></pre></td></tr></table></figure><p>설치한 뒤 <code>/client/src/</code> 디렉토리로 가서 <code>setupProxy.js</code> 파일을 생성하고 아래 코드를 입력해준다.</p><figure class="highlight javascript"><figcaption><span>setupProxy.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    createProxyMiddleware(<span class="string">&quot;/api/data&quot;</span>, &#123;</span><br><span class="line">      target: <span class="string">&quot;http://localhost:5000&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="서버-express-클라이언트-react-동시-시작-설정"><a href="#서버-express-클라이언트-react-동시-시작-설정" class="headerlink" title="서버(express), 클라이언트(react) 동시 시작 설정"></a>서버(express), 클라이언트(react) 동시 시작 설정</h2><p>루트로 가서 <code>package.json</code>의 <code>scripts</code>항목을 아래처럼 수정해준다.</p><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;concurrently \&quot;npm run dev:server\&quot; \&quot;npm run dev:client\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev:server&quot;</span>: <span class="string">&quot;npm start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev:client&quot;</span>: <span class="string">&quot;cd client &amp;&amp; npm start&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 아래 명령어로 서버와 클라이언트를 동시에 시작할 수 있다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>이제 작업하기 위한 전반적인 준비가 끝났다. 우선 클라이언트 영역부터 작업해보자.</p><h1 id="클라이언트에서-요청-작업"><a href="#클라이언트에서-요청-작업" class="headerlink" title="클라이언트에서 요청 작업"></a>클라이언트에서 요청 작업</h1><h2 id="검색-폼-및-리스트-추가"><a href="#검색-폼-및-리스트-추가" class="headerlink" title="검색 폼 및 리스트 추가"></a>검색 폼 및 리스트 추가</h2><p><code>/client/src/</code> 디렉토리에 <code>components</code> 폴더를 생성하고 <code>SearchForm.tsx</code>, <code>SearchList.tsx</code> 파일을 생성하고 각각 아래처럼 입력해 준다.</p><p><strong>SearchForm.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchForm.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchForm = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> className=<span class="string">&quot;form-text&quot;</span> /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        className=<span class="string">&quot;form-btn&quot;</span></span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          fetch(<span class="string">&quot;api/data&quot;</span>)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> res.json();</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        search</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchForm;</span><br></pre></td></tr></table></figure><p><strong>SearchList.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchList.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;card-list&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchList;</span><br></pre></td></tr></table></figure><p><code>App.tsx</code>은 아래처럼 변경해준다.</p><figure class="highlight javascript"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchForm <span class="keyword">from</span> <span class="string">&quot;./components/SearchForm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchList <span class="keyword">from</span> <span class="string">&quot;./components/SearchList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;SearchForm /&gt;</span><br><span class="line">      &lt;SearchList /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>search</code> 버튼을 클릭하면 <code>fetch</code> 함수로 서버(<code>http://localhost:5000/api/data</code>)에 요청을 하게 되고 응답값으로 콘솔창에 <code>&#123; greeting: &quot;Hello World&quot; &#125;</code>가 출력되는 것을 확인할 수 있다.</p><h2 id="fetch-함수를-App-컴포넌트로-이동"><a href="#fetch-함수를-App-컴포넌트로-이동" class="headerlink" title="fetch 함수를 App 컴포넌트로 이동"></a>fetch 함수를 App 컴포넌트로 이동</h2><p>이제 검색키워드를 서버에 보내기 위헤 <code>SearchForm</code>, <code>App</code> 컴포넌트를 아래처럼 수정해 준다.</p><p><strong>SearchForm.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchForm.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchForm = <span class="function">(<span class="params">props: &#123; getData: any &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getData &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [keyword, setKeyword] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        className=<span class="string">&quot;form-text&quot;</span></span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">          setKeyword(e.target.value);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onKeyPress=&#123;<span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (e.charCode === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">              getData(keyword);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        className=<span class="string">&quot;form-btn&quot;</span></span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">            getData(keyword);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        search</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchForm;</span><br></pre></td></tr></table></figure><p><strong>App.tsx</strong></p><figure class="highlight javascript"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchForm <span class="keyword">from</span> <span class="string">&quot;./components/SearchForm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchList <span class="keyword">from</span> <span class="string">&quot;./components/SearchList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> getData = <span class="function">(<span class="params">keyword: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + keyword);</span><br><span class="line">    fetch(<span class="string">`api/data?keyword=<span class="subst">$&#123;keyword&#125;</span>`</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.json();</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;SearchForm getData=&#123;getData&#125; /&gt;</span><br><span class="line">      &lt;SearchList /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>SearchForm</code>에 있던 <code>fetch</code>함수를 상위 <code>App</code>컴포넌트의 <code>getData</code> 함수에 넣어놨다. 이 함수를 <code>SearchForm</code>에 전달하였고, 검색버튼을 클릭하면 <code>getData</code>가 실행되며, <code>input</code> 태그의 검색 키워드가 쿼리스트링에 할당되어 서버에 전달되게 된다. 검색폼에서 엔터를 눌러도 요청할 수 있도록 <code>onKeyPress</code> 이벤트도 추가해 주자. 이제 응답값을 받기 위해 서버 작업을 해보자. </p><h1 id="서버에서-요청-받기"><a href="#서버에서-요청-받기" class="headerlink" title="서버에서 요청 받기"></a>서버에서 요청 받기</h1><p>이제 루트로 가서 <code>index.js</code>를 아래처럼 수정해 준다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&quot;/api/data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + req.query.keyword);</span><br><span class="line">  res.json(&#123; <span class="attr">greeting</span>: <span class="string">&quot;Hello World&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>요청을 하면 서버 터미널에 검색 키워드가 출력될 것이다. 위 코드를 보면 미들웨어 함수에서 요청값(<code>req.query.keyword</code>)을 받기 때문이다.</p><h1 id="Puppeteer-설치"><a href="#Puppeteer-설치" class="headerlink" title="Puppeteer 설치"></a>Puppeteer 설치</h1><p>이제 브라우저로 검색하기 위해 루트 디렉토리에 Puppeteer를 설치해주자.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install puppeteer</span><br></pre></td></tr></table></figure><blockquote><ul><li>Puppeteer는 기본적으로 Chrome 혹은 Chromium 런더링 엔진을 사용하기 때문에 기본적으로  Chromium 브라우저를 내장하고 있다.</li><li>따로 Chromium 브라우저를 다운받지 않으려면 <code>$ npm install puppeteer-core</code> 명령어를 사용하면 되며, Puppeteer는 로컬에 있는 Chrome 혹은 Chromium을 사용하게 될 것이다.</li></ul></blockquote><h1 id="검색해보기"><a href="#검색해보기" class="headerlink" title="검색해보기"></a>검색해보기</h1><p>Puppeteer를 설치했으면 이제 브라우저를 실행해 검색을 해보자. <code>index.js</code>를 아래처럼 수정해준다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&quot;/api/data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + req.query.keyword);</span><br><span class="line">  openBrowser(req.query.keyword);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// puppeteer 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&quot;puppeteer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 브라우저 오픈 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>keyword 검색 키워드</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">openBrowser</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 실행 및 옵션, 현재 옵션은 headless 모드 사용 여부</span></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 열기</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 포탈로 이동</span></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">&quot;https://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 키워드 입력</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, keyword);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 키워드 검색</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, <span class="built_in">String</span>.fromCharCode(<span class="number">13</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>puppeteer</code> 모듈을 불러온 뒤 <code>openBrowser</code> 함수를 추가하였으며, 포탈 이동 및 응답값을 받기 위해 <code>async</code> 함수로 감싸주었다. 브라우저 실행 옵션에서 <code>headless</code> 모드를 <code>true</code>로 설정하면 브라우저가 화면에 노출이 되지 않고 백그라운드에서 작동된다. 지금은 브라우저 작동 순서를 보기 위해 임시로 <code>false</code>로 설정해 준다. 위처럼 수정해 준 뒤 클라이언트 화면으로 가서 검색해 보면 아래 순서대로 작동된다.</p><ol><li>Chromium 브라우저가 실행되고</li><li>Google 사이트로 이동한 뒤</li><li>Google 검색창에 검색 키워드를 넣고</li><li>엔터를 눌러 검색을 시작한다.</li></ol><h1 id="검색-내용-크롤링하기"><a href="#검색-내용-크롤링하기" class="headerlink" title="검색 내용 크롤링하기"></a>검색 내용 크롤링하기</h1><p>이제 검색결과를 크롤링을 해보자.</p><h2 id="크롤링할-내용-형태"><a href="#크롤링할-내용-형태" class="headerlink" title="크롤링할 내용 형태"></a>크롤링할 내용 형태</h2><figure class="highlight javascript"><figcaption><span>JSON</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">&quot;제목&quot;</span>,</span><br><span class="line">  link: <span class="string">&quot;링크&quot;</span>,</span><br><span class="line">  text: <span class="string">&quot;내용&quot;</span>,</span><br><span class="line">  kategorie: <span class="string">&quot;카테고리&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>크롤링으로 가져올 정보는 위 형태로 가져올 것이며, <code>index.js</code>를 아래처럼 코드를 수정한다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&quot;/api/data&quot;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + req.query.keyword);</span><br><span class="line">  <span class="keyword">const</span> resultList = <span class="keyword">await</span> openBrowser(req.query.keyword);</span><br><span class="line">  <span class="built_in">console</span>.log(resultList);</span><br><span class="line">  res.json(resultList);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// puppeteer 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&quot;puppeteer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 브라우저 오픈 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>keyword 검색 키워드</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>검색 결과</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">openBrowser</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 브라우저 실행 및 옵션, 현재 옵션은 headless 모드 사용 여부</span></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 열기</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 포탈로 이동</span></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">&quot;https://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 키워드 입력</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, keyword);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 키워드 검색</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, <span class="built_in">String</span>.fromCharCode(<span class="number">13</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 예외 처리</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 해당 콘텐츠가 로드될 때까지 대기</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#rso div.g&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 해당 태그가 없을 시 검색결과 없음 반환</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;에러 발생: &quot;</span> + error);</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">&quot;검색결과 없음&quot;</span>,</span><br><span class="line">        link: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        kategorie: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 호출된 브라우저 영역</span></span><br><span class="line">  <span class="keyword">const</span> searchData = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 검색된 돔 요소를 배열에 담음</span></span><br><span class="line">    <span class="keyword">const</span> contentsList = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;#rso div.g&quot;</span>));</span><br><span class="line">    <span class="keyword">let</span> contentsObjList = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 검색결과 크롤링</span></span><br><span class="line">    contentsList.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.className === <span class="string">&quot;g&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> title = item.querySelector(<span class="string">&quot;h3&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> link = item.querySelector(<span class="string">&quot;.yuRUbf&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> text = item.querySelector(<span class="string">&quot;.VwiC3b&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> kategorie = item.querySelector(<span class="string">&quot;.iUh30 &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (title &amp;&amp; link &amp;&amp; text &amp;&amp; kategorie) &#123;</span><br><span class="line">          contentsObjList.push(&#123;</span><br><span class="line">            title: title.textContent, <span class="comment">// 타이틀</span></span><br><span class="line">            link: link.children[<span class="number">0</span>].href, <span class="comment">// 링크</span></span><br><span class="line">            text: text.textContent, <span class="comment">// 내용</span></span><br><span class="line">            kategorie: kategorie.textContent, <span class="comment">// 카테고리</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 호출된 브라우저 영역 콘솔창에서 확인할 수 있음</span></span><br><span class="line">    <span class="built_in">console</span>.log(contentsList); <span class="comment">// 검색한 엘리먼트 리스트</span></span><br><span class="line">    <span class="built_in">console</span>.log(contentsObjList); <span class="comment">// 검색한 콘텐츠 오브젝트 리스트</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> contentsObjList;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 닫기</span></span><br><span class="line">  browser.close();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 검색결과 반환</span></span><br><span class="line">  <span class="keyword">return</span> searchData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="요소-대기"><a href="#요소-대기" class="headerlink" title="요소 대기"></a>요소 대기</h2><p><code>headless</code> 모드는 이제 <code>true</code>로 설정해준다. 브라우저가 크롤링하는 모습을 직접 확인하고 싶으면 <code>false</code>로 그냥 두면 된다. 이제 순서대로 코드를 살펴보자. <code>page.waitForSelector</code> 메서드를 추가했으며, 인자로 쿼리 셀렉터와 옵션이 들어간다. 이 메서드는 셀렉터 요소가 로드될 때 까지 대기하며, <code>timeout</code>로 대기 시간을 설정할 수 있다. 대기시간이 끝나도 해당 요소를 로드하지 못하면 에러를 뱉어내며, 이 경우 <code>title</code>에 검색결과가 없다는 값을 리턴해 준다.</p><h2 id="브라우저-영역"><a href="#브라우저-영역" class="headerlink" title="브라우저 영역"></a>브라우저 영역</h2><p><code>page.evaluate</code> 메서드는 Puppeteer로 호출한 브라우저에서 실행되는 함수로써 여기다가 크롤링 코드를 작성하면 된다. 구글 검색결과의 각 엘리먼트 셀렉터는 <code>#rso div.g</code>이며, 해당 요소들을 <code>Array.from</code> 메서드를 통해 배열로 담았다. 필요한 정보만 가져오기 위해 <code>forEach</code>을 돌려 오브젝트에 내용을 담고 리턴해 준 다음 브라우저는 종료가 된다.</p><h2 id="검색결과를-응답해주기"><a href="#검색결과를-응답해주기" class="headerlink" title="검색결과를 응답해주기"></a>검색결과를 응답해주기</h2><p>이제 이 응답값을 미들웨어 함수에서 받아서 클라이언트의 응답값으로 보내줘야한다. 위 코드의 미들웨어 함수를 보면 콜백함수를 <code>async</code>로 감싸고 결과값을 <code>await</code> 키워드로 받아 응답값으로 보내주고 있다. 클라이언트의 콘솔창을 보면 크롤링한 리스트를 출력하는걸 확인할 수 있다.</p><h1 id="연속-검색"><a href="#연속-검색" class="headerlink" title="연속 검색"></a>연속 검색</h1><p>지금까지 구현된건 첫 페이지만 크롤링한 것이며, 다음 페이지를 추가로 크롤링을 하려면 아래 순서가 필요하다.</p><ol><li>검색결과 맨아래 다음버튼이 있는지 찾기</li><li>다음 버튼 있는 경우 다음 페이지로 이동</li><li>다음 페이지 내용이 불러올때까지 대기</li><li>다음 페이지 크롤링</li></ol><p>아래처럼 코드를 수정한다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&quot;/api/data&quot;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + req.query.keyword);</span><br><span class="line">  <span class="keyword">const</span> resultList = <span class="keyword">await</span> openBrowser(req.query.keyword);</span><br><span class="line">  <span class="built_in">console</span>.log(resultList);</span><br><span class="line">  res.json(resultList);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// puppeteer 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&quot;puppeteer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 브라우저 오픈 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>keyword 검색 키워드</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>검색 결과</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">openBrowser</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 모든 검색결과</span></span><br><span class="line">  <span class="keyword">let</span> searchAllData = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 실행 및 옵션, 현재 옵션은 headless 모드 사용 여부</span></span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 열기</span></span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 포탈로 이동</span></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">&quot;https://www.google.com/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 키워드 입력</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, keyword);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 키워드 검색</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&quot;input[class=&#x27;gLFyf gsfi&#x27;]&quot;</span>, <span class="built_in">String</span>.fromCharCode(<span class="number">13</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 검색하고 싶은 페이지 수 만큼 반복</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 처음 검색</span></span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 예외 처리</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 해당 콘텐츠가 로드될 때까지 대기</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#rso div.g&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 크롤링해서 검색 결과들을 담음</span></span><br><span class="line">        searchAllData.push(...(<span class="keyword">await</span> crawlingData()));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 해당 태그가 없을 시 검색결과 없음 반환</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;에러 발생: &quot;</span> + error);</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">          &#123;</span><br><span class="line">            title: <span class="string">&quot;검색결과 없음&quot;</span>,</span><br><span class="line">            link: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            kategorie: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 처음 이후 검색</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 예외 처리</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 다음 버튼이 로드될때까지 대기</span></span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#pnnext&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 브라우저를 호출해 다음 버튼을 클릭</span></span><br><span class="line">        <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> nextBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#pnnext&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (nextBtn) &#123;</span><br><span class="line">            nextBtn.click();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 크롤링해서 검색 결과들을 담음</span></span><br><span class="line">        searchAllData.push(...(<span class="keyword">await</span> crawlingData()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 다음 버튼이 더이상 없는 경우 지금까지 크롤링한 모든 검색결과 반환</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> searchAllData;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 크롤링 함수</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>검색 결과</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">crawlingData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 해당 콘텐츠가 로드될 때까지 대기</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#rso div.g&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 호출된 브라우저 영역</span></span><br><span class="line">    <span class="keyword">const</span> searchData = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 검색된 돔 요소를 배열에 담음</span></span><br><span class="line">      <span class="keyword">const</span> contentsList = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;#rso div.g&quot;</span>));</span><br><span class="line">      <span class="keyword">let</span> contentsObjList = [];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 검색결과 크롤링</span></span><br><span class="line">      contentsList.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.className === <span class="string">&quot;g&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> title = item.querySelector(<span class="string">&quot;h3&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> link = item.querySelector(<span class="string">&quot;.yuRUbf&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> text = item.querySelector(<span class="string">&quot;.VwiC3b&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> kategorie = item.querySelector(<span class="string">&quot;.iUh30 &quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (title &amp;&amp; link &amp;&amp; text &amp;&amp; kategorie) &#123;</span><br><span class="line">            contentsObjList.push(&#123;</span><br><span class="line">              title: title.textContent, <span class="comment">// 타이틀</span></span><br><span class="line">              link: link.children[<span class="number">0</span>].href, <span class="comment">// 링크</span></span><br><span class="line">              text: text.textContent, <span class="comment">// 내용</span></span><br><span class="line">              kategorie: kategorie.textContent, <span class="comment">// 카테고리</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 호출된 브라우저 영역 콘솔창에서 확인할 수 있음</span></span><br><span class="line">      <span class="built_in">console</span>.log(contentsList); <span class="comment">// 검색한 엘리먼트 리스트</span></span><br><span class="line">      <span class="built_in">console</span>.log(contentsObjList); <span class="comment">// 검색한 콘텐츠 오브젝트 리스트</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> contentsObjList;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 검색결과 반환</span></span><br><span class="line">    <span class="keyword">return</span> searchData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 브라우저 닫기</span></span><br><span class="line">  browser.close();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 모든 검색결과 반환</span></span><br><span class="line">  <span class="keyword">return</span> searchAllData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 추가된 코드들을 살펴보자.</p><h2 id="모든-검색결과를-담을-배열-설정"><a href="#모든-검색결과를-담을-배열-설정" class="headerlink" title="모든 검색결과를 담을 배열 설정"></a>모든 검색결과를 담을 배열 설정</h2><p>31라인을 보면 <code>searchAllData</code> 배열을 추가하였으며, 이 배열안에 각 페이지마다 크롤링한 데이터가 들어간다.</p><h2 id="브라우저-호출하는-영역을-함수로-묶음"><a href="#브라우저-호출하는-영역을-함수로-묶음" class="headerlink" title="브라우저 호출하는 영역을 함수로 묶음"></a>브라우저 호출하는 영역을 함수로 묶음</h2><p>각 페이지마다 크롤링을 반복해줘야되기 때문에 101번째 라인을 보면 <code>crawlingData</code> 함수로 따로 묶어줬다. 그리고 리턴값은 <code>searchData</code>로 해주며, 기존 코드의 예외 처리(<code>try</code>)안에 있던 <code>page.waitForSelector</code> 메서드만 함수 상단에 추가해 준다. 대략적인 형태는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 크롤링 함수</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;array&#125;</span> </span>검색 결과</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">crawlingData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 해당 콘텐츠가 로드될 때까지 대기</span></span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#rso div.g&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 호출된 브라우저 영역</span></span><br><span class="line">  <span class="keyword">const</span> searchData = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 기존 크롤링 코드</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> contentsObjList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 검색결과 반환</span></span><br><span class="line">  <span class="keyword">return</span> searchData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="처음-검색-후-다음-페이지로-이동하여-검색"><a href="#처음-검색-후-다음-페이지로-이동하여-검색" class="headerlink" title="처음 검색 후 다음 페이지로 이동하여 검색"></a>처음 검색 후 다음 페이지로 이동하여 검색</h2><p>코드 49번 라인을 보면 반복문이 실행되며, 검색하고 싶은 페이지만큼 반복되도록 되어있다. 위 코드는 10번만 반복하게 했으며, 반복 횟수를 늘리면 더 많은 페이지를 크롤링할 수 있다. 각 예외 처리는 2개 분기로 되어있으며, 이유는 계속 페이지마다 검색을 하는 경우 결과가 여러가지 있기 때문이다.</p><h3 id="검색-결과의-경우들"><a href="#검색-결과의-경우들" class="headerlink" title="검색 결과의 경우들"></a>검색 결과의 경우들</h3><ol><li>처음 검색에 아무 검색결과가 없는 경우</li><li>처음 검색과는 있는데 다음 버튼이 없어서 검색결과가 첫 페이지만 있는 경우</li><li>다음 페이지가 존재해 계속 검색을 진행하다 마지막 페이지에 도달해서 다음 버튼이 없는 경우</li></ol><p>처음 검색은 51라인부터 시작되며 검색결과가 없다면 59라인에서 에러를 캐치하며 클라이언트에 <code>검색결과 없음</code>을 리턴해 준다. 검색 결과가 있으면 두번째 반복이 73라인에서 실행되며, 다음 버튼이 있는 경우 83라인 함수에서 다음버튼을 클릭하고 <code>crawlingData</code> 함수가 실행되어 크롤링을 계속 반복하게 된다. 크롤링 결과값은 <code>searchAllData</code> 배열에 전개연산자를 활용하여 차곡차곡 쌓이도록 해준다. 이렇게 계속 다음 페이지로 이동하고 더이상 다음버튼이 없으면 91라인에서 에러를 캐치하여 지금까지 모은 <code>searchAllData</code>를 리턴하게 된다. <code>headless</code> 모드를 <code>false</code>로 설정하면 브라우저가 각 페이지를 돌면서 크롤링을 하는 모습을 직접 볼 수 있다.</p><h2 id="결과-확인"><a href="#결과-확인" class="headerlink" title="결과 확인"></a>결과 확인</h2><p>서버 터미널이나 클라이언트 콘솔창을 확인하면 각 페이지마다 크롤링한 데이터를 정상적으로 응답해주는것을 확인할 수 있다. 지금까지 클라이언트, 서버 셋팅 및 연속 크롤링하는 것까지 알아봤으며 이제 이 응답값을 클라이언트에 뿌려주는 작업을 해보자.</p><h1 id="클라이언트에서-받은-데이터-출력하기"><a href="#클라이언트에서-받은-데이터-출력하기" class="headerlink" title="클라이언트에서 받은 데이터 출력하기"></a>클라이언트에서 받은 데이터 출력하기</h1><h2 id="출력될-컴포넌트-추가"><a href="#출력될-컴포넌트-추가" class="headerlink" title="출력될 컴포넌트 추가"></a>출력될 컴포넌트 추가</h2><p>데이터가 들어갈 영역을 만들어주자. 우선 <code>/client/src/components</code> 디렉토리에 <code>SearchItem.tsx</code> 파일을 생성하고 아래 코드를 입력해준다.</p><figure class="highlight javascript"><figcaption><span>SearchItem.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchItem = <span class="function">(<span class="params">props: &#123; item: any &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; item &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;card&quot;</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;top&quot;</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;kategorie&quot;</span>&gt;&#123;item.kategorie&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;title&quot;</span>&gt;&#123;item.title&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;bottom&quot;</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;text&quot;</span>&gt;&#123;item.text&#125;&lt;/div&gt;</span><br><span class="line">        &lt;a href=&#123;item.link&#125; className=<span class="string">&quot;link&quot;</span> target=<span class="string">&quot;_blank&quot;</span> rel=<span class="string">&quot;noreferrer&quot;</span>&gt;</span><br><span class="line">          더보기</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchItem;</span><br></pre></td></tr></table></figure><h2 id="컴포넌트에-데이터-전달하기"><a href="#컴포넌트에-데이터-전달하기" class="headerlink" title="컴포넌트에 데이터 전달하기"></a>컴포넌트에 데이터 전달하기</h2><p><code>SearchList.tsx</code> 파일과 <code>App.tsx</code> 파일도 각각 아래처럼 수정해준다.</p><p><strong>SearchList.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchList.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchItem <span class="keyword">from</span> <span class="string">&quot;./SearchItem&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchList = <span class="function">(<span class="params">props: &#123; searchData: [] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchData &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;card-list&quot;</span>&gt;</span><br><span class="line">      &#123;searchData.map((item: any, <span class="attr">idx</span>: number): JSX.Element =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SearchItem</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span>;</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchList;</span><br></pre></td></tr></table></figure><p><strong>App.tsx</strong></p><figure class="highlight javascript"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchForm <span class="keyword">from</span> <span class="string">&quot;./components/SearchForm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchList <span class="keyword">from</span> <span class="string">&quot;./components/SearchList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [searchData, setSearchData] = useState&lt;any&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> getData = <span class="function">(<span class="params">keyword: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + keyword);</span><br><span class="line">    fetch(<span class="string">`api/data?keyword=<span class="subst">$&#123;keyword&#125;</span>`</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.json();</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        setSearchData(data);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;SearchForm getData=&#123;getData&#125; /&gt;</span><br><span class="line">      &lt;SearchList searchData=&#123;searchData&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>과정을 살펴보자, 서버에서 응답값이 오면 <code>App.tsx</code>의 15번째 라인에서 받고 이것을 <code>SearchList</code> 컴포넌트에 전달해 준다. <code>SearchList.tsx</code>를 보면 이 응답값을 <code>props</code>로 전달받았으며, 이 값은 배열이기 때문에 <code>Array.map</code> 메서드를 사용하여 <code>SearchItem</code> 컴포넌트를 리턴하고 있다. 이렇게 리턴받은 <code>SearchItem</code> 컴포넌트는 <code>SearchItem.tsx</code> 파일의 코드처럼, 카테고리, 제목, 본문내용, 링크를 출력하고 있는걸 확인할 수 있다.</p><h2 id="스타일-꾸며주기"><a href="#스타일-꾸며주기" class="headerlink" title="스타일 꾸며주기"></a>스타일 꾸며주기</h2><p>CSS 적용이 안되었기 때문에 실제 화면은 이상하게 보일것이다. <code>App.css</code> 파일에 간단히 스타일을 추가해 주자.</p><figure class="highlight css"><figcaption><span>App.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form-text</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">65px</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form-btn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#13424b</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card-list</span> &#123;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#13424b</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> <span class="selector-class">.kategorie</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.bottom</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="추가-화면-및-비활성-처리"><a href="#추가-화면-및-비활성-처리" class="headerlink" title="추가 화면 및 비활성 처리"></a>추가 화면 및 비활성 처리</h1><p>마무리 단계이며, 아래 단계가 남았다.</p><ol><li>검색하는 동안 출력될 화면 추가</li><li>검색하는 동안 폼 비활성(disable) 처리</li><li>검색결과 없는 경우 추가</li></ol><p><code>SearchLoading.tsx</code> 파일을 생성하고 아래처럼 입력해 준다. 이 컴포넌트가 검색하는 동안 보여지는 부분이다.</p><figure class="highlight javascript"><figcaption><span>SearchLoading.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchLoading = <span class="function">(<span class="params">props: &#123; isOnLoading: boolean &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isOnLoading &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;isOnLoading ? <span class="string">&quot;loading on&quot;</span> : <span class="string">&quot;loading&quot;</span>&#125;&gt;loading..&lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchLoading;</span><br></pre></td></tr></table></figure><p>그리고 <code>SearchForm.tsx</code>, <code>SearchList.tsx</code>, <code>App.tsx</code>, <code>App.css</code> 파일들을 아래처럼 코드를 수정한다.</p><p><strong>SearchForm.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchForm.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchForm = <span class="function">(<span class="params">props: &#123; getData: any; isOnLoading: boolean &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getData, isOnLoading &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [keyword, setKeyword] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;isOnLoading ? <span class="string">&quot;form disable&quot;</span> : <span class="string">&quot;form&quot;</span>&#125;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        className=<span class="string">&quot;form-text&quot;</span></span><br><span class="line">        disabled=&#123;isOnLoading ? <span class="literal">true</span> : <span class="literal">false</span>&#125;</span><br><span class="line">        onChange=&#123;<span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">          setKeyword(e.target.value);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        onKeyPress=&#123;<span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (e.charCode === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">              getData(keyword);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        className=<span class="string">&quot;form-btn&quot;</span></span><br><span class="line">        disabled=&#123;isOnLoading ? <span class="literal">true</span> : <span class="literal">false</span>&#125;</span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">            getData(keyword);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        search</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchForm;</span><br></pre></td></tr></table></figure><p><strong>SearchList.tsx</strong></p><figure class="highlight javascript"><figcaption><span>SearchList.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchItem <span class="keyword">from</span> <span class="string">&quot;./SearchItem&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SearchList = <span class="function">(<span class="params">props: &#123; searchData: []; isOnLoading: boolean &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; searchData, isOnLoading &#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;isOnLoading ? <span class="string">&quot;card-list disable&quot;</span> : <span class="string">&quot;card-list&quot;</span>&#125;&gt;</span><br><span class="line">      &#123;searchData.map(</span><br><span class="line">        (item: any, <span class="attr">idx</span>: number): JSX.Element =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (item.kategorie &amp;&amp; item.kategorie &amp;&amp; item.text) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SearchItem</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;div key=&#123;idx&#125; className=<span class="string">&quot;none&quot;</span>&gt;</span><br><span class="line">                검색결과 없음</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SearchList;</span><br></pre></td></tr></table></figure><p><strong>App.tsx</strong></p><figure class="highlight javascript"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchForm <span class="keyword">from</span> <span class="string">&quot;./components/SearchForm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchLoading <span class="keyword">from</span> <span class="string">&quot;./components/SearchLoading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SearchList <span class="keyword">from</span> <span class="string">&quot;./components/SearchList&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [searchData, setSearchData] = useState&lt;any&gt;([]);</span><br><span class="line">  <span class="keyword">const</span> [isOnLoading, setIsOnLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> getData = <span class="function">(<span class="params">keyword: string</span>) =&gt;</span> &#123;</span><br><span class="line">    setIsOnLoading(<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;검색 키워드: &quot;</span> + keyword);</span><br><span class="line">    fetch(<span class="string">`api/data?keyword=<span class="subst">$&#123;keyword&#125;</span>`</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.json();</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        setSearchData(data);</span><br><span class="line">        setIsOnLoading(<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;SearchForm getData=&#123;getData&#125; isOnLoading=&#123;isOnLoading&#125; /&gt;</span><br><span class="line">      &lt;SearchLoading isOnLoading=&#123;isOnLoading&#125; /&gt;</span><br><span class="line">      &lt;SearchList searchData=&#123;searchData&#125; isOnLoading=&#123;isOnLoading&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><strong>App.css</strong></p><figure class="highlight css"><figcaption><span>App.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form-text</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">65px</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form-btn</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#13424b</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.form</span><span class="selector-class">.disable</span> <span class="selector-class">.form-btn</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b3b3b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card-list</span> &#123;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#13424b</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card-list</span><span class="selector-class">.disable</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b3b3b3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> <span class="selector-class">.kategorie</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.top</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card</span> <span class="selector-class">.bottom</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card-list</span><span class="selector-class">.disable</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.card-list</span> <span class="selector-class">.none</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.loading</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.App</span> <span class="selector-class">.loading</span><span class="selector-class">.on</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="검색-시작-및-끝을-나타내는-값"><a href="#검색-시작-및-끝을-나타내는-값" class="headerlink" title="검색 시작 및 끝을 나타내는 값"></a>검색 시작 및 끝을 나타내는 값</h2><h3 id="컴포넌트에-검색중-여부-전달"><a href="#컴포넌트에-검색중-여부-전달" class="headerlink" title="컴포넌트에 검색중 여부 전달"></a>컴포넌트에 검색중 여부 전달</h3><p>코드를 하나씩 살펴보자. <code>App.tsx</code> 파일의 9번째 라인을 보면 <code>isOnLoading</code>값이 있는데 요청을 보내면 12번째 라인에서 <code>true</code>로 변경, 검색중을 나타내고, 응답을 받으면 20번째 라인에서 <code>false</code>로 변경되며 검색이 끝났다는 것을 의미한다. 이 값을 <code>SearchForm</code>, <code>SearchLoading</code>, <code>SearchList</code> 컴포넌트에 전달해 주었다.</p><h3 id="컴포넌트에서-검색중-여부-처리"><a href="#컴포넌트에서-검색중-여부-처리" class="headerlink" title="컴포넌트에서 검색중 여부 처리"></a>컴포넌트에서 검색중 여부 처리</h3><p><code>SearchLoading.tsx</code> 파일 6번째 라인을 보면 <code>isOnLoading</code>가 <code>true</code>일 경우 <code>on</code> 클래스를 추가해 준다. 평상시에 이 엘리먼트는 보이지 않다가 <code>on</code> 클래스가 추가되면 보여지도록 <code>App.css</code>에 설정되어있다.</p><p>다른 컴포넌트도 마찬가지로 <code>SearchForm.tsx</code>에서 11번째 라인을 보면 <code>isOnLoading</code>이 <code>true</code>면 폼들은 <code>disabled</code> 처리가 되며, 7번째 라인에서 <code>disable</code> 클래스를 주고있다. <code>SearchList.tsx</code> 컴포넌트도 검색중이면 <code>disable</code> 클래스를 주고있으며, 이 클래스로 검색중에 스타일을 변경하도록 <code>App.css</code>에 설정되어있다.</p><h2 id="검색결과-없는-경우"><a href="#검색결과-없는-경우" class="headerlink" title="검색결과 없는 경우"></a>검색결과 없는 경우</h2><p><code>SearchList.tsx</code>파일의 10번째 라인을 보면 전달받은 데이터 값이 모두 있을경우 데이터를 노출하고 없는 경우는 검색결과가 없다는 내용을 출력하고 있다.</p><h1 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h1><p>이제 로컬에서 작업한 결과물을 헤로쿠에 배포를 해보자.</p><h2 id="깃-초기화"><a href="#깃-초기화" class="headerlink" title="깃 초기화"></a>깃 초기화</h2><p>헤로쿠는 깃을 통해 업로드하기 때문에 루트 경로에서 아래 명령어로 깃을 초기화 해준다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="빌드-설정"><a href="#빌드-설정" class="headerlink" title="빌드 설정"></a>빌드 설정</h2><h3 id="정적-파일-생성"><a href="#정적-파일-생성" class="headerlink" title="정적 파일 생성"></a>정적 파일 생성</h3><p><code>client</code> 디렉토리에서 아래 명령어를 입력해 배포용 정적 파일을 생성한다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><h3 id="정적-파일-경로-설정"><a href="#정적-파일-경로-설정" class="headerlink" title="정적 파일 경로 설정"></a>정적 파일 경로 설정</h3><p>다음에 <code>index.js</code> 파일 최하단에 아래 코드를 추가해준다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 기존 코드</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// path 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리액트 정적 파일 제공</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;client/build&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 라우트 설정</span></span><br><span class="line">app.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(path.join(__dirname+<span class="string">&#x27;/client/build/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="헤로쿠-빌드-명령어-설정"><a href="#헤로쿠-빌드-명령어-설정" class="headerlink" title="헤로쿠 빌드 명령어 설정"></a>헤로쿠 빌드 명령어 설정</h3><p>루트경로의 <code>package.json</code> 파일로 가서 <code>heroku-postbuild</code>를 아래처럼 추가해준다.</p><figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;concurrently \&quot;npm run dev:server\&quot; \&quot;npm run dev:client\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev:server&quot;</span>: <span class="string">&quot;npm start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev:client&quot;</span>: <span class="string">&quot;cd client &amp;&amp; npm start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;heroku-postbuild&quot;</span>: <span class="string">&quot;cd client &amp;&amp; npm install &amp;&amp; npm run build&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="헤로쿠-연동하기"><a href="#헤로쿠-연동하기" class="headerlink" title="헤로쿠 연동하기"></a>헤로쿠 연동하기</h2><p>헤로쿠에 대한 간략한 설명은 [이 포스팅]<a href="https://recordboy.github.io/2020/11/05/express-react-heroku-init/)%EC%9D%84">https://recordboy.github.io/2020/11/05/express-react-heroku-init/)을</a> 참고하면 된다. 기존에 회원이 아니면 <a href="https://heroku.com/">헤로쿠 홈페이지</a>에서 회원가입을 하고 <a href="https://devcenter.heroku.com/articles/heroku-cli">이곳에서</a> 헤로쿠 CLI를 설치하면 된다.</p><h3 id="로그인-및-프로젝트-생성"><a href="#로그인-및-프로젝트-생성" class="headerlink" title="로그인 및 프로젝트 생성"></a>로그인 및 프로젝트 생성</h3><p>아래 명령어를 입력하고 아무키나 입력하면 로그인 하라는 브라우저가 뜨고 로그인을 해주자.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login</span><br></pre></td></tr></table></figure><p>아래 명령어로 헤로쿠에 프로젝트를 생성하며 프로젝트 이름은 다른 프로젝트와 중복되지 않게 정한다. <code>git remote -v</code> 명령어로 저장소가 제대로 연결되었는지 확인한다.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku create 프로젝트이름</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><blockquote><p>헤로쿠 프로젝트 주소와 로컬에서 바라보는 주소가 다를경우 <code>$ git remote set-url heroku 프로젝트주소</code> 명령어를 사용하여 동일하게 맞춰주면 된다.</p></blockquote><h3 id="빌드팩-추가"><a href="#빌드팩-추가" class="headerlink" title="빌드팩 추가"></a>빌드팩 추가</h3><p>한가지 또 추가해줘야 하는 것이 있는데 Puppeteer를 헤로쿠에서 사용하려면 프로젝트에 빌드팩을 추가해줘야 한다. 아래 명령어를 입력해주자.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ heroku buildpacks:clear</span><br><span class="line">$ heroku buildpacks:add --index 1 https:&#x2F;&#x2F;github.com&#x2F;jontewks&#x2F;puppeteer-heroku-buildpack</span><br><span class="line">$ heroku buildpacks:add --index 1 heroku&#x2F;nodejs</span><br></pre></td></tr></table></figure><p>그리고 <code>index.js</code> 파일로 가서 34번째 라인의 브라우저 실행 옵션에 <code>args</code>값을 아래처럼 추가해 준다.</p><figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 브라우저 실행 및 옵션, 현재 옵션은 headless 모드 사용 여부</span></span><br><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; </span><br><span class="line">  headless: <span class="literal">true</span>,</span><br><span class="line">  args: [</span><br><span class="line">    <span class="string">&quot;--no-sandbox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--disable-setuid-sandbox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--window-size=1600,2000&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="업로드"><a href="#업로드" class="headerlink" title="업로드"></a>업로드</h2><p>이제 배포를 위한 모든 준비가 끝났다. 깃 명령어를 입력하여 푸쉬해주자.</p><figure class="highlight plain"><figcaption><span>TERMINAL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;커밋 메세지&#39;</span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure><p>이제 배포된 페이지를 확인해 보자. url은 <code>https://프로젝트이름.herokuapp.com/</code>로 가면 확인할 수 있다. 정상적으로 배포된 페이지를 화인할 수 있다.</p><p>지금까지 만들어본건 검색하는 기능만 있는 아주 기본적인 형태이지만 잘만 활용하면 요청, 응답값으로 여러가지 형태로 발전시킬 수 있다. 예를들어 검색 포탈명을 요청해 여러 포탈의 검색결과를 한번에 찾아보거나 각 다음 페이지를 넘기는 <code>index</code>값을 응답을 받아 검색 로딩시간을 알아보는 등 여러가지 활용이 가능하다.</p><p>마지막으로 주의할 점이 있는데, 헤로쿠 서버의 무료 용량은 500MB로 제한된다. Puppeteer는 자체적으로 Chromium을 내장하고 있는데 이것이 꽤 용량이 나간다.(대략 300MB 조금 넘게) 그래서 프로젝트를 크게 불려 배포를 하면 가끔 용량이 부족하다고 에러가 나오는 경우가 있다. 또 한가지는 Puppeteer를 많이 사용하다보면 구글에서 봇으로 판단하여 ‘로봇이 아닙니다’ 체크를 해야하는 경우도 있었다. 아무튼 Puppeteer는 크롤링 말고 여러가지 강력한 기능이 있기 때문에 잘 활용하면 좋은 도구가 될 수 있을 것이다.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><blockquote><p><a href="https://pptr.dev/">Puppeteer</a><br><a href="https://stackoverflow.com/questions/52225461/puppeteer-unable-to-run-on-heroku">Puppeteer unable to run on heroku</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/server/">server</category>
      
      <category domain="https://recordboy.github.io/categories/server/express/">express</category>
      
      
      <category domain="https://recordboy.github.io/tags/express/">express</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      <category domain="https://recordboy.github.io/tags/heroku/">heroku</category>
      
      <category domain="https://recordboy.github.io/tags/web-crawling/">web crawling</category>
      
      <category domain="https://recordboy.github.io/tags/typescript/">typescript</category>
      
      
      <comments>https://recordboy.github.io/2021/04/30/puppeteer-search/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 얕은 복사, 깊은 복사</title>
      <link>https://recordboy.github.io/2020/12/15/javascript-shallow-copy-deep-copy/</link>
      <guid>https://recordboy.github.io/2020/12/15/javascript-shallow-copy-deep-copy/</guid>
      <pubDate>Tue, 15 Dec 2020 06:01:25 GMT</pubDate>
      
      <description>&lt;p&gt;깂은 복사와 얕은 복사에 대해 알아보겠다. 이 글의 초반 내용은 이전 포스팅의 (&lt;a href=&quot;https://recordboy.github.io/2017/05/05/javascript-reference-data-type/#%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85%EA%B3%BC-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot;&gt;원시 타입과 참조 타입의 차이&lt;/a&gt;)과 맥락이 비슷하며, 위 포스팅은 원시 타입과 참조 타입의 차이점이라면 아래는 참조 타입의 깊은 복사하는 방법에 대해 알아보도록 하겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>깂은 복사와 얕은 복사에 대해 알아보겠다. 이 글의 초반 내용은 이전 포스팅의 (<a href="https://recordboy.github.io/2017/05/05/javascript-reference-data-type/#%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85%EA%B3%BC-%EC%B0%B8%EC%A1%B0-%ED%83%80%EC%9E%85%EC%9D%98-%EC%B0%A8%EC%9D%B4">원시 타입과 참조 타입의 차이</a>)과 맥락이 비슷하며, 위 포스팅은 원시 타입과 참조 타입의 차이점이라면 아래는 참조 타입의 깊은 복사하는 방법에 대해 알아보도록 하겠다.</p><a id="more"></a><h2 id="얕은-복사-shallow-copy"><a href="#얕은-복사-shallow-copy" class="headerlink" title="얕은 복사(shallow copy)"></a>얕은 복사(shallow copy)</h2><p>얖은 복사는 참조(주소)값의 복사를 나타낸다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">vaule</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> newObj = obj;</span><br><span class="line"></span><br><span class="line">newObj.vaule = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.vaule); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === newObj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>obj</code> 객체를 새로운 <code>newObj</code> 객체에 할당하였으며 이를 <code>참조 할당</code>이라 부른다. 복사 후 <code>newObj</code> 객체의 <code>value</code>값을 변경하였더니 기존의 <code>obj.value</code>값도 같이 변경된 것을 알 수 있다. 두 객체를 비교해도 <code>true</code>로 나온다. 이렇게 자바스크립트의 참조 타입은 <strong>얕은 복사</strong>가 된다고 볼 수 있으며, 이는 <strong>데이터가 그대로 생성되는 것이 아닌 해당 데이터의 참조 값(메모리 주소)를 전달하여 결국 한 데이터를 공유하는 것</strong>이다.</p><h2 id="깊은-복사-deep-copy"><a href="#깊은-복사-deep-copy" class="headerlink" title="깊은 복사(deep copy)"></a>깊은 복사(deep copy)</h2><p>깊은 복사는 값 자체의 복사를 나타낸다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>변수 <code>a</code>를  새로운 <code>b</code>에 할당하였고 <code>b</code> 값을 변경하여도 기존의 <code>a</code>의 값은 변경되지 않는다. 두 값을 비교하면 <code>false</code>가 출력되며 서로의 값은 단독으로 존재하다는 것을 알 수 있다. 이렇게 자바스크립트의 원시 타입은 <strong>깊은 복사</strong>가 되며, 이는 <strong>독립적인 메모리에 값 자체를 할당하여 생성하는 것</strong>이라 볼 수 있다.</p><h2 id="객체의-깊은-복사"><a href="#객체의-깊은-복사" class="headerlink" title="객체의 깊은 복사"></a>객체의 깊은 복사</h2><p>객체를 그대로 복사하여 사용할 경우 기존 객체의 원본 데이터가 더럽혀 질 수 있기 때문에 객체의 깊은 복사는 매우 중요하다. 객체를 깊이 복사하는 방법에 대해 몇가지 알아보자.</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p><code>Object.assign()</code> 메서드를 활용하는 방법이다.</p><blockquote><p><strong>문법</strong><br><code>Object.assign(생성할 객체, 복사할 객체)</code> 메서드의 첫번째 인수로 빈 객체를 넣어주며, 두번째 인수로 할당할 객체를 넣으면 된다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === newObj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>새로운 <code>newObj</code> 객체를 <code>Object.assign()</code> 메서드를 사용하여 생성하였으며, <code>newObj.a</code> 값을 변경하여도 기존의 <code>obj</code>는 변하지 않았다. 서로의 객체를 비교해도 <code>false</code>로 뜨며 서로 참조값이 다르다는 것을 알 수 있다.</p><h4 id="Object-assign-는-2차원-객체는-깊은-복사가이루어지지-않는다"><a href="#Object-assign-는-2차원-객체는-깊은-복사가이루어지지-않는다" class="headerlink" title="Object.assign()는 2차원 객체는 깊은 복사가이루어지지 않는다"></a>Object.assign()는 2차원 객체는 깊은 복사가이루어지지 않는다</h4><p>하지만 <code>Object.assign()</code>를 활용한 복사는 완벽한 깊은 복사가 아니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위처럼 <code>obj</code> 객체의 <code>b</code> 프로퍼티의 값으로 <code>&#123; c: 2 &#125;</code> 객체를 가진 2차원 객체일 경우는 경우는 어떨까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.b.c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 3 &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c === newObj.b.c); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>2차원 객체를 <code>newObj</code>에 복사하고, <code>newObj.b.c</code>의 값을 변경하였다. 기존 <code>obj</code> 객체를 출력해보면 <code>newObj.b.c</code>의 값도 <code>3</code>으로 변경되었다. 복사된 하위 객체 <code>&#123; c: 2 &#125;</code>도 결국 객체이기 때문에 얕은 복사가 이루어진 것이다. 이는 <code>Object.assign()</code> 메서드의 한계이며, <strong>전개연산자(Spread Operator)</strong> 를 이용한 객체의 복사에도 같은 문제가 있다.</p><h3 id="전개연산자-Spread-Operator"><a href="#전개연산자-Spread-Operator" class="headerlink" title="전개연산자(Spread Operator)"></a>전개연산자(Spread Operator)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"></span><br><span class="line">newObj.a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj === newObj); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>전개연산자를 활용해도 객체의 깊은 복사가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj &#125;;</span><br><span class="line"></span><br><span class="line">newObj.b.c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 3 &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c === newObj.b.c); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>하지만 <code>Object.assign()</code>와 마찬가지로 2차원 객체는 얕은 복사가 되는 것을 확인할 수 있다.</p><h3 id="JSON-객체-메서드를-이용"><a href="#JSON-객체-메서드를-이용" class="headerlink" title="JSON 객체 메서드를 이용"></a>JSON 객체 메서드를 이용</h3><p>객체의 깊은 복사를 위해 JSON 객체의 <code>stringify()</code>, <code>parse()</code> 메서드를 사용할 수 있다.</p><blockquote><p><strong>문법</strong><br><code>JSON.stringify()</code> 메서드는 인수로 객체를 받으며 받은 객체는 문자열로 치환되며, <code>JSON.parse()</code> 메서드는 문자열을 인수로 받으며, 받은 문자열을 객체로 치환한다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"></span><br><span class="line">newObj.b.c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c === newObj.b.c); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>obj</code> 객체를 <code>JSON.stringify()</code> 메서드를 이용하여 문자열로 변환한 뒤 다시 <code>JSON.parse()</code> 메서드로 객체로 변환하였다. 문자열로 변환한 뒤 다시 객체로 변환하였기에 2차원 객체에 대한 참조가 사라졌다. 하지만 이 방법도 2가지 문제가 있는데, 다른 방법에 비해 성능이 느린 점과 <code>JSON.stringify()</code> 메서드는 함수를 만났을 때 <code>undefined</code>로 처리한다는 점이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj.func); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>복사된 <code>newObj</code>는 <code>func</code>가 없고 <code>undefined</code>로 출력되고 있다.</p><h3 id="커스텀-재귀-함수"><a href="#커스텀-재귀-함수" class="headerlink" title="커스텀 재귀 함수"></a>커스텀 재귀 함수</h3><p>이 문제를 원칙적으로 해결하려면 직접 깊은 복사를 구현하는 커스텀 재귀 함수를 사용하는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> copy = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    copy[key] = deepCopy(obj[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = deepCopy(obj);</span><br><span class="line"></span><br><span class="line">newObj.b.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125;, func: [Function: func] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c === newObj.b.c); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>deepCopy</code> 함수의 인수로 <code>obj</code> 객체를 넣었다. 인수값이 객체가 아닌 경우는 그냥 반환하며, 객체인 경우 객체의 값 만큼 루프를 돌며 재귀를 호출하여 복사된 값을 반환한다. 복사된 <code>newObj</code> 객체를 보면 2차원 객체의 값도 깊은 복사가 이루어 졌으며, 객체의 함수도 제대로 표현되는 것을 확인할 수 있다.</p><p>하지만 이미 객체의 깊은 복사를 위한 오픈 소스가 존재하며 <code>lodash</code> 모듈의 <code>cloneDeep()</code>을 이용하면 된다.</p><h3 id="lodash-모듈의-cloneDeep"><a href="#lodash-모듈의-cloneDeep" class="headerlink" title="lodash 모듈의 cloneDeep()"></a>lodash 모듈의 cloneDeep()</h3><p><code>lodash</code> 모듈의 <code>cloneDeep()</code> 메서드를 이용하여 객체의 깊은 복사가 가능하다. 해당 모듈을 설치해 준 뒤 아래 코드를 실행시켜 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; npm i lodash</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = lodash.cloneDeep(obj);</span><br><span class="line"></span><br><span class="line">newObj.b.c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125;, func: [Function: func] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b.c === newObj.b.c); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>간단히 객체의 깊은 복사를 구현할 수 있다. 실제로 웹 개발을 하다보면 <code>lodash</code> 모듈은 흔히 사용되며, 가장 손쉽게 객체의 깊은 복사를 해결하는 방법이라 할 수 있다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://junwoo45.github.io/2019-09-23-deep_clone/">자바스크립트 객체 복사하기</a><br><a href="https://velog.io/@ashnamuh/Javascript-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EC%9D%98-%ED%95%A8%EC%A0%95">Javascript 깊은 복사의 함정</a><br><a href="https://velog.io/@nomadhash/Java-Script-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC%EC%99%80-%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC-1dus9z79">[Java Script] 얕은 복사와 깊은 복사</a><br><a href="https://chaewonkong.github.io/posts/js-deep-copy.html">JavaScript로 Deep Copy 하는 여러 방법</a><br><a href="https://mygumi.tistory.com/322">Javascript:Shallow and Deep Copy :: 마이구미</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/12/15/javascript-shallow-copy-deep-copy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Network] REST(Representational State Transfer)</title>
      <link>https://recordboy.github.io/2020/12/10/network-rest/</link>
      <guid>https://recordboy.github.io/2020/12/10/network-rest/</guid>
      <pubDate>Thu, 10 Dec 2020 07:53:10 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;REST&quot;&gt;&lt;a href=&quot;#REST&quot; class=&quot;headerlink&quot; title=&quot;REST&quot;&gt;&lt;/a&gt;REST&lt;/h2&gt;&lt;p&gt;REST는 웹에서 데이터를 전송하고 처리하는 방법을 정의한 인터페이스를 말하며, 모든 데이터 구조와 처리 방식은 REST에서 URL을 통해 정의된다. 때문에 매우 직관적이고 이해하기 쉬우며 사용자에게 더 쉽게 서비스를 제공할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST는 웹에서 데이터를 전송하고 처리하는 방법을 정의한 인터페이스를 말하며, 모든 데이터 구조와 처리 방식은 REST에서 URL을 통해 정의된다. 때문에 매우 직관적이고 이해하기 쉬우며 사용자에게 더 쉽게 서비스를 제공할 수 있다.</p><a id="more"></a><h2 id="RESTfull"><a href="#RESTfull" class="headerlink" title="RESTfull"></a>RESTfull</h2><p>RESTfull API라고도 하며, HTTP 프로트콜과 REST의 원칙을 사용하여 구현된 웹 서비스이다. 리소스(Resource)는 모든 인터넷 환경에서 사용이 가능한 표준화 된 형식(일반적으로 XML 또는 JSON)으로 표현된다.</p><h2 id="REST-중심-규칙"><a href="#REST-중심-규칙" class="headerlink" title="REST 중심 규칙"></a>REST 중심 규칙</h2><h3 id="URL는-정보의-자원을-표현해야-한다"><a href="#URL는-정보의-자원을-표현해야-한다" class="headerlink" title="URL는 정보의 자원을 표현해야 한다"></a>URL는 정보의 자원을 표현해야 한다</h3><p>URL은 의미를 명확히 전달하기 위해 명사로 구성한다. 예를 들어 요청 URL이 <code>/user</code>면 사용자 정보에 관한 요청이며, <code>/post</code>라면 게시글에 관한 요청하는 것으로 추측이 가능하다. </p><h3 id="자원에-대한-행위는-HTTP-Method로-표현한다"><a href="#자원에-대한-행위는-HTTP-Method로-표현한다" class="headerlink" title="자원에 대한 행위는 HTTP Method로 표현한다"></a>자원에 대한 행위는 HTTP Method로 표현한다</h3><p>REST에선 HTTP Method를 사용하며 주요 메서드는 아래와 같다.</p><h4 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h4><ul><li><p>GET(자원 정보 조회): 서버의 자원을 가져올 때 사용한다. 요청의 본문에 데이터를 넣지 않으며 <strong>쿼리스트링</strong>을 사용하여 서버에 데이터를 보낸다. 또한 GET 메서드는 브라우저에서 캐싱(기억)할 수도 있다.</p><blockquote><p><strong>쿼리스트링</strong><br>URL에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다.</p><ul><li>정해진 주소 이후에 <code>?</code>를 쓰는것으로 쿼리스트링 시작을 의미한다.</li><li>형태는 <code>parameter=value</code>이며 <code>=</code>로 파라미터와 값이 구분되며 파라미터가 여러개의 경우 <code>&amp;</code>를 붙여 각 값을 구분한다.</li><li>예시: <a href="https://recordboy.github.io/?%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0=%EA%B0%92&amp;%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0=%EA%B0%92">https://recordboy.github.io/?파라미터=값&amp;파라미터=값</a></li></ul></blockquote></li><li><p>POST(자원 생성): 서버에 자원을 새로 등록할 때 사용된다. 요청의 본문에 새로 등록할 데이터를 넣어 보낸다.</p></li><li><p>PUT(자원 업데이트): 서버의 자원을 요청에 있는 자원으로 치환할 때 보낸다. 요청의 본문에 치환할 데이터를 넣어 보낸다.</p></li><li><p>PATCH(자원 일부 업데이트): PUT이 자원 전체를 업데이트한다면 PATCH는 자원 일부를 수정할 때 사용한다. 요청의 본문에 수정할 데이터를 넣어 보낸다.</p></li><li><p>DELETE(자원 삭제): 자원을 삭제할 때 사용되며, 요청의 본문에 데이터를 넣지 않는다.</p></li><li><p>OPTIONS(옵션 설명): 요청을 하기 전에 통신 옵션을 설명하기 위해 사용된다.</p></li></ul><h2 id="REST-구성-요소"><a href="#REST-구성-요소" class="headerlink" title="REST 구성 요소"></a>REST 구성 요소</h2><table><thead><tr><th>구성 요소</th><th>내용</th><th>표현 방법</th></tr></thead><tbody><tr><td>Resource</td><td>자원</td><td>HTTP URI</td></tr><tr><td>Verb</td><td>자원에 대한 행위</td><td>HTTP Method</td></tr><tr><td>Representations</td><td>자원에 대한 행위의 내용</td><td>HTTP Message Pay Load</td></tr></tbody></table><h2 id="REST-특징"><a href="#REST-특징" class="headerlink" title="REST 특징"></a>REST 특징</h2><h3 id="클라이언트-서버-구조-Client-Server"><a href="#클라이언트-서버-구조-Client-Server" class="headerlink" title="클라이언트/서버 구조(Client - Server)"></a>클라이언트/서버 구조(Client - Server)</h3><p>자원이 있는 서버와 자원을 요청하는 클라이언트의 구조를 가진다. REST 서버는 클라이언트에게 API만 제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실하게 구분되어 일관적인 인터페이스로 분리되고 작동할 수 있게 한다.</p><h3 id="무상태성-Stateless"><a href="#무상태성-Stateless" class="headerlink" title="무상태성(Stateless)"></a>무상태성(Stateless)</h3><p>HTTP는 무상태 프로토콜 이므로 REST 역시 무상태성을 가진다. 다시 말해 작업을 위한 상태 정보를 따로 저장하고 관리하지 않는다. 세션이나 쿠키를 별도로 저장, 관리하지 않기 때문에 API 서버는 들어오는 요청만 단순히 처리하면 된다. 그래서 서비스의 자유도가 높아지며, 불편한 정보를 관리하지 않음으로써 구현이 단순해진다.</p><h3 id="캐시-처리-가능-Cachealble"><a href="#캐시-처리-가능-Cachealble" class="headerlink" title="캐시 처리 가능(Cachealble)"></a>캐시 처리 가능(Cachealble)</h3><p>REST에서는 웹 표준 HTTP 프로토콜을 그대로 사용하므로, 웹의 기존의 인프라를 그대로 활용 가능하다. 때문에 REST에서도 캐싱 기능을 사용할 수 있다.</p><h3 id="계층화-Layered-System"><a href="#계층화-Layered-System" class="headerlink" title="계층화(Layered System)"></a>계층화(Layered System)</h3><p>REST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조를 변경할 수 있다. 또한 Proxy, Gateway와 같은 네트워크 기반의 중간매체를 사용할 수 있다. 하지만 클라이언트는 서버와 직접 통신하는지 중간 서버와 통신하는지 알 수 없다.</p><h3 id="자체-표현-구조-Self-descriptiveness"><a href="#자체-표현-구조-Self-descriptiveness" class="headerlink" title="자체 표현 구조(Self-descriptiveness)"></a>자체 표현 구조(Self-descriptiveness)</h3><p>REST는 JSON 메세지 포멧을 이용하여 직관적으로 이해할 수 있고, 그 요청이 어떤 행위를 하는지 쉽게 알수 있는 자체 표현 구조로 되어있다.</p><blockquote><p>JSON은 하나의 옵션일뿐, 메시지 포맷을 꼭 JSON으로 적용해야할 필요는 없다.</p></blockquote><h3 id="유니폼-인터페이스-Uniform-Interface"><a href="#유니폼-인터페이스-Uniform-Interface" class="headerlink" title="유니폼 인터페이스(Uniform Interface)"></a>유니폼 인터페이스(Uniform Interface)</h3><p>URL에 대한 요청을 통일되고 한정적으로 수행하는 이키텍쳐 스타일을 의미하며, HTTP 표준에만 따른다면 모든 플랫폼에서 사용이 가능하다.</p><h2 id="REST-장점"><a href="#REST-장점" class="headerlink" title="REST 장점"></a>REST 장점</h2><h3 id="쉬운-사용"><a href="#쉬운-사용" class="headerlink" title="쉬운 사용"></a>쉬운 사용</h3><p>HTTP 프로토콜 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없다.</p><h3 id="클라이언트와-서버의-명확한-역할-분리"><a href="#클라이언트와-서버의-명확한-역할-분리" class="headerlink" title="클라이언트와 서버의 명확한 역할 분리"></a>클라이언트와 서버의 명확한 역할 분리</h3><p>클라이언트는 REST API만을 통해 서버와 정보를 주고받는다. 때문에 REST의 무상태성에 따라 사용자의 컨텍스트를 따로 관리할 필요가 없다.</p><h3 id="특정-데이터-표현-사용가능"><a href="#특정-데이터-표현-사용가능" class="headerlink" title="특정 데이터 표현 사용가능"></a>특정 데이터 표현 사용가능</h3><p>REST는 헤더 부분에 URL 처리 메서드를 명시하고 실제 필요한 데이터는 BODY에 표현할 수 있도록 분리하여 JSON , XML 등 원하는 언어로 사용이 가능하다.</p><h2 id="REST-단점"><a href="#REST-단점" class="headerlink" title="REST 단점"></a>REST 단점</h2><h3 id="메서드의-한계"><a href="#메서드의-한계" class="headerlink" title="메서드의 한계"></a>메서드의 한계</h3><p>REST API는 HTTP 메서드를 이용하여 URI를 표현하기 때문에 쉬운 사용이 가능한 장점이 있지만 반대로 메서드 형태가 제한적이라는 단점이 있다.</p><h3 id="표준이-없음"><a href="#표준이-없음" class="headerlink" title="표준이 없음"></a>표준이 없음</h3><p>REST는 설계 가이드일 뿐 표준이 아니며 명확한 표준이 없다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="http://www.incodom.kr/REST">REST</a><br><a href="https://www.zerocho.com/books">Node.js 교과서</a><br><a href="https://medium.com/@hckcksrl/rest%EB%9E%80-c602c3324196">REST란</a><br><a href="https://bcho.tistory.com/953">REST API의 이해와 설계-#1 개념 소개</a><br><a href="https://mangkyu.tistory.com/46">[Server] Restful API란?</a><br><a href="https://spoqa.github.io/2012/02/27/rest-introduction.html">REST 아키텍처를 훌륭하게 적용하기 위한 몇 가지 디자인 팁</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/network/">network</category>
      
      
      <category domain="https://recordboy.github.io/tags/network/">network</category>
      
      <category domain="https://recordboy.github.io/tags/rest/">rest</category>
      
      <category domain="https://recordboy.github.io/tags/restfull/">restfull</category>
      
      
      <comments>https://recordboy.github.io/2020/12/10/network-rest/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 함수형 프로그래밍의 순수 함수</title>
      <link>https://recordboy.github.io/2020/12/09/javascript-pure-function/</link>
      <guid>https://recordboy.github.io/2020/12/09/javascript-pure-function/</guid>
      <pubDate>Wed, 09 Dec 2020 02:30:35 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;함수형-프로그래밍&quot;&gt;&lt;a href=&quot;#함수형-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;함수형 프로그래밍&quot;&gt;&lt;/a&gt;함수형 프로그래밍&lt;/h2&gt;&lt;p&gt;부수 효과를 없애고 순수 함수를 만들어 모듈화 수준을 높이는 프로그래밍 패러다임&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부수 효과: 외부 상태를 변경하거나 함수로 들어온 인자 상태를 변경하는 것&lt;/li&gt;
&lt;li&gt;순수 함수&lt;ul&gt;
&lt;li&gt;동일한 입력에 대해 항상 동일한 출력을 반환하는 함수&lt;/li&gt;
&lt;li&gt;외부의 상태를 변경하거나 영향을 받지 않는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h2><p>부수 효과를 없애고 순수 함수를 만들어 모듈화 수준을 높이는 프로그래밍 패러다임</p><ul><li>부수 효과: 외부 상태를 변경하거나 함수로 들어온 인자 상태를 변경하는 것</li><li>순수 함수<ul><li>동일한 입력에 대해 항상 동일한 출력을 반환하는 함수</li><li>외부의 상태를 변경하거나 영향을 받지 않는 함수</li></ul></li></ul><a id="more"></a><h2 id="순수한-함수"><a href="#순수한-함수" class="headerlink" title="순수한 함수"></a>순수한 함수</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>위 <code>func</code> 함수는 순수하다. 언제나 이 함수를 수백번 실행시켜도 입력값이 <code>2</code>, <code>2</code>면 출력값이 <code>4</code>로 동일하기 때문이다. 또한 이 함수는 외부의 값에 영향을 주거나 받지 않는다.</p><h2 id="순수하지-않은-함수"><a href="#순수하지-않은-함수" class="headerlink" title="순수하지 않은 함수"></a>순수하지 않은 함수</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">2</span>; <span class="comment">// c 값이 변경됨</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>위 함수는 외부 값인인 <code>c</code>에 영향을 받기 때문에 순수함수가 아니다. <code>c</code>가 변하면 동일한 입력에 대해 출력이 다르기 때문이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  c += <span class="number">1</span>; <span class="comment">// 외부의 값에 변화를 주며, 이를 부수효과라 함</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 함수 실행</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// c 값이 2로 변화됨</span></span><br></pre></td></tr></table></figure><p>위 함수도 함수가 실행되면 외부값인 <code>c</code>를 변경시키기 때문에 순수 함수가 아니며, 이를 부수 효과라 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj.b = <span class="number">1</span>; <span class="comment">// 인자로 받은 객체에 b 값을 추가하여 리턴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>객체의 경우도 살펴보자. 위 함수도 외부 <code>obj</code> 객체에 <code>b</code>가 추가되었기 때문에 순수함수가 아니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 인자로 받은 객체를 그대로 리턴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = func(obj);</span><br></pre></td></tr></table></figure><p>위의 경우는 어떨까? 함수 안에서는 객체를 받고 아무런 변화를 주지 않고 리턴하였으며, 새로운 변수에 리턴된 객체를 할당했다. 위 함수에서는 객체에 아무런 변화를 주지 않았으니 순수 함수라고 할 수 있을까?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 인자로 받은 객체를 그대로 리턴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = func(obj); <span class="comment">// 새로운 변수에 리턴된 객체를 할당</span></span><br><span class="line"></span><br><span class="line">obj2.a = <span class="number">2</span>; <span class="comment">// 새로운 객체 obj2의 a 값을 변경</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; a: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>정답은 아니다. <code>func</code> 함수를 실행하여 새로운 변수에 리턴받은 객체를 할당했으며, 새로운 객체 <code>obj2</code>의 <code>a</code> 값을 변경하였다. 그랬더니 기존의 <code>obj</code> 객체의 값도 변경이 되었다. 바로 객체의 <strong>참조(주소)</strong> 값도 같이 복사되어 새롭게 만든 <code>obj2</code>가 변화함에 따라 기존의 <code>obj</code> 객체도 변경되기 때문이다. 이처럼 함수 내에서 직접 값을 변경하지 않았더라도 함수에 들어온 인자값을 그대로 사용하면 순수 함수가 아니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 객체의 값만 참조하여 새로운 객체를 리턴</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a: obj.a,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = func(obj);</span><br><span class="line"></span><br><span class="line">obj2.a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; a: 2, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>위에서는 인자로 받은 객체를 직접 사용하지 않고 <code>obj.a</code> 값만 참조해서 새로운 객체를 생성하여 리턴하고 있다. 이럴 경우는 참조(주소)값이 복사가 안되기 때문에 <code>obj2</code> 객체의 값이 변경되도 <code>obj</code>의 값이 변경되지 않는다. 그러므로 위 함수는 순수 함수라 할 수 있다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>모든 함수가 순수 할수일 수는 없다. 모든 함수가 순수 함수라면 외부의 어떤 데이터에도 변형을 주지 않기 때문에 프로그램은 구동되지 않을 것이다. 단지, 이런 스타일로 코딩하는것이 함수형 프로그래밍의 패러다임 이며, 이 패러다임의 목적은 외부 상태의 변화를 최소함으로 유지하고, 함수 실행 결과 예측을 용이하게 하여 버그 발생 가능성을 줄이는 것에 목적이 있다.</p><blockquote><p><a href="https://blog.ull.im/engineering/2019/04/07/functional-programming-with-javascript-in-3-steps.html">[번역] JavaScript 함수형 프로그래밍 3단계로 설명하기</a><br><a href="https://mrgamza.tistory.com/634">순수 함수란 무엇인가요… 별거 없음…</a><br><a href="https://darrengwon.tistory.com/595">JS 함수형 프로그래밍을 위한 사전 지식 : 순수함수, 일급함수</a><br><a href="https://soldonii.tistory.com/80">자바스크립트의 함수형 프로그래밍 1 : 순수 함수란?</a><br><a href="https://jeong-pro.tistory.com/23">순수 함수란? (함수형 프로그래밍의 뿌리, 함수의 부수효과를 없앤다)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/pure-function/">pure function</category>
      
      <category domain="https://recordboy.github.io/tags/functional-programming/">functional programming</category>
      
      
      <comments>https://recordboy.github.io/2020/12/09/javascript-pure-function/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] try...catch를 이용한 에러 핸들링</title>
      <link>https://recordboy.github.io/2020/12/01/javascript-try-catch/</link>
      <guid>https://recordboy.github.io/2020/12/01/javascript-try-catch/</guid>
      <pubDate>Tue, 01 Dec 2020 06:35:46 GMT</pubDate>
      
      <description>&lt;p&gt;자바스크립트에서 에러가 발생하면 코드는 멈추게 되고, 콘솔에 에러가 출력된다. 하지만 &lt;code&gt;try...catch&lt;/code&gt; 문법을 사용하면 스크립트가 죽는 것을 방지하고, 에러 상황을 잡아 예외처리를 할 수 있게 한다. 기본적인 형태는 두 블록으로 구성되며 예시 코드는 아래와 같다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바스크립트에서 에러가 발생하면 코드는 멈추게 되고, 콘솔에 에러가 출력된다. 하지만 <code>try...catch</code> 문법을 사용하면 스크립트가 죽는 것을 방지하고, 에러 상황을 잡아 예외처리를 할 수 있게 한다. 기본적인 형태는 두 블록으로 구성되며 예시 코드는 아래와 같다.</p><a id="more"></a><h2 id="기본-형태"><a href="#기본-형태" class="headerlink" title="기본 형태"></a>기본 형태</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 이 구간에서 에러가 발생하면 catch로 이동</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 에러 핸들링</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>먼저 <code>try</code> 블록의 코드가 실행된다.</li><li><code>try</code> 블록 안에 에러가 없다면 <code>catch</code> 블록은 건너 뛴다.</li><li><code>try</code> 블록 안에서 에러 코드를 만나면 <code>try</code> 블록의 실행이 중단되고 <code>catch</code> 블록의 코드가 실행된다.</li><li><code>err</code> 객체에는 에러에 대한 정보가 있다.</li></ul><p>실제 작동 코드 살펴보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;아직 에러 없음&quot;</span>);</span><br><span class="line"></span><br><span class="line">  a; <span class="comment">// 에러 시작</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;이곳은 실행 안됨&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// a is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;에러가 나도 이곳의 코드는 실행됨&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try</code> 블록에서 에러가 나면 아래의 <code>console.log()</code>는 실행이 안되며 바로 <code>catch</code> 블록으로 넘어간다. <code>err</code> 객체가 콘솔창에 어떤 에러인지 표시해 주며, 에러가 발생해도 <code>catch</code> 블록의 코드는 계속 실행되는 것을 확인할 수 있다. 이 부분에 에러 예외 처리를 작성해 주면 된다.</p><h2 id="try-catch는-런타임-에러에만-작동한다"><a href="#try-catch는-런타임-에러에만-작동한다" class="headerlink" title="try...catch는 런타임 에러에만 작동한다"></a><code>try...catch</code>는 런타임 에러에만 작동한다</h2><p><code>try...catch</code>는 실행이 가능한 코드에만 동작하며, 중괄호가 들어가는 등 자바스크립트 엔진이 해석할 수 없는 문법적 오류(SyntaxError)같은 경우는 작동하지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#123;&#123; <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;자바스크립트 엔진은 이 코드를 이해할 수 없어 실행 자체가 안됨&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;여기도 실행 안됨&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-catch는-동기적으로-동작한다"><a href="#try-catch는-동기적으로-동작한다" class="headerlink" title="try...catch는 동기적으로 동작한다"></a><code>try...catch</code>는 동기적으로 동작한다</h2><p><code>try...catch</code>는 <code>setTimeout</code>와 같이 비동기적으로 실행되는 코드의 에러는 잡아낼 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    a; <span class="comment">// 에러가 발생하지만 catch가 잡아낼 수 없음</span></span><br><span class="line"></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;try 블록의 에러를 잡아낼 수 없음&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1초뒤 <code>setTimeout</code>의 익명함수가 실행되고 에러가 발생하지만 이미 자바스크립트 엔진은 <code>try...catch</code> 블록을 떠났기 때문에 오류를 잡아낼 수 없다. 비동기로 실행되는 코드의 에러를 잡으려면 반드시 해당 함수 안에서 <code>try...catch</code> 구문을 사용해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    a; <span class="comment">// 에러가 발생하지만 catch가 잡아낼 수 있음</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;try 블록의 에러를 잡아냄&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="에러-객체"><a href="#에러-객체" class="headerlink" title="에러 객체"></a>에러 객체</h2><p>에러가 발생하면 자바스크립트는 에러 내용이 담긴 객체를 생성하고 <code>catch</code> 블록의 인수로 전달한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  a; <span class="comment">// 에러 시작</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// ReferenceError: a is not defined</span></span><br><span class="line">  <span class="built_in">console</span>.log(err.name); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(err.message); <span class="comment">// a is not defined</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>name</code> 프로퍼티는 에러의 이름을 나타내고 <code>message</code>는 에러에 대한 상세 내용을 가지고 있다.</p><h2 id="직접-에러를-생성해-던지기"><a href="#직접-에러를-생성해-던지기" class="headerlink" title="직접 에러를 생성해 던지기"></a>직접 에러를 생성해 던지기</h2><h3 id="throw-연산자"><a href="#throw-연산자" class="headerlink" title="throw 연산자"></a>throw 연산자</h3><p><code>throw</code> 연산자는 예외를 던질 수 있으며, <code>catch</code> 블록에 전달된다.</p><blockquote><p><code>throw</code> 연산자는 함수의 실행을 중단한다는 표현과 같다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;예외 처리를 던짐&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;여긴 실행 안됨&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 예외 처리를 던짐</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 <code>throw</code>는 예외를 던지고 있으며, <code>throw</code> 아래의 로직은 실행이 안된다. <code>throw</code> 연산자자와 에러 객체 생성자를 이용하여 예외 처리를 해보자.</p><h3 id="에러-객체-생성자"><a href="#에러-객체-생성자" class="headerlink" title="에러 객체 생성자"></a>에러 객체 생성자</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;에러 발생&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> syntaxError = <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">&quot;문법 에러 발생&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(error); <span class="comment">// Error: 에러 발생</span></span><br><span class="line"><span class="built_in">console</span>.log(syntaxError); <span class="comment">// SyntaxError: 문법 에러 발생</span></span><br></pre></td></tr></table></figure><p>자바스크립트는 <code>Error</code>, <code>SyntaxError</code>, <code>ReferenceError</code>, <code>TypeError</code> 등 표준 애러 객체 생성자를 지원하며, 이 생성자들을 이용해 에러 객체를 만들 수 있다.</p><h3 id="생성한-에러-던지기"><a href="#생성한-에러-던지기" class="headerlink" title="생성한 에러 던지기"></a>생성한 에러 던지기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!person.gender) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">&quot;성별이 없음&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;이곳은 실행이 안됨&quot;</span>); <span class="comment">// person.gender 값이 없기 때문에 실행이 안됨</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// Error: 성별이 없음</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드의 <code>try</code> 블록에서는 성별 값이 있는지 체크하고 있는데, 체크 대상인 <code>person</code> 객체에는 이름과 나이만 있고 성별이 없다. 때문에 성별이 없을 때 직접 생성한 에러를 던지고 있고, <code>catch</code> 블록에서 에러를 받아 출력하고 있다.</p><blockquote><p>참고로 위 에러는 직접 생성한 에러이기 때문에 실제 <code>SyntaxError</code> 에러는 아니다.</p></blockquote><h2 id="에러-다시-던지기"><a href="#에러-다시-던지기" class="headerlink" title="에러 다시 던지기"></a>에러 다시 던지기</h2><p><code>try...catch</code>는 애초에 <code>try</code> 블록에서 발생한 모든 에러를 잡는 목적으로 만들어졌다. 에러의 종류와 상관 없이 모든 에러를 잡는것은 디버깅에 어려움을 주기 때문에 예상치 못한 에러를 다시 던져서 에러의 종류에 따라 대응을 해줘야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getError = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!person.gender) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">&quot;성별이 없음&quot;</span>);</span><br><span class="line">      <span class="comment">// throw new ReferenceError(&quot;성별이 없음&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="built_in">SyntaxError</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;이 에러는 &quot;</span> + err); <span class="comment">// SyntaxError일 경우</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err; <span class="comment">// SyntaxError가 아닐 경우 밖으로 다시 던짐</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  getError();</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;이 에러는 &quot;</span> + err); <span class="comment">// ReferenceError일 경우</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getError()</code>가 실행되면서 <code>SyntaxError</code>를 잡아내고 있으며, 만약 <code>SyntaxError</code> 에러가 아닐 경우는 다시 에러를 함수 밖으로 던지며, 함수 외부에서 에러를 다시 잡고 있다. 함수 밖에서는 <code>ReferenceError</code>일 경우를 잡아내고 있다. <code>SyntaxError</code>일 경우는 함수 내부에서 에러를 잡고 <code>ReferenceError</code>일 경우는 함수 외부에서 잡는다고 보면 된다.</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p><code>finally</code>절은 에러의 유무와 상관없이 마지막으로 사용되는 블록이며, 마지막 제어가 필요할 때 사용하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;에러 발생&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(err); <span class="comment">// 에러 발생</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;항상 실행&quot;</span>); <span class="comment">// 항상 실행</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://ko.javascript.info/try-catch">‘try..catch’와 에러 핸들링</a><br><a href="https://rinae.dev/posts/how-to-handle-errors-1">에러 처리를 어떻게 하면 좋을까? - 1</a><br><a href="https://www.opentutorials.org/module/4302/26560">예외 ( throw,[try/catch/finally])</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/12/01/javascript-try-catch/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] Async/Await를 이용한 비동기 처리</title>
      <link>https://recordboy.github.io/2020/11/20/javascript-async-await/</link>
      <guid>https://recordboy.github.io/2020/11/20/javascript-async-await/</guid>
      <pubDate>Fri, 20 Nov 2020 07:07:51 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Async/Await&lt;/code&gt;는 ECMAScript8에서 새롭게 추가된 자바스크립트 비동기 처리 패턴이다. 코드의 모습과 동작을 좀 더 동기 코드와 유사하게 작성할수 있어 기존의 콜백 패턴이나 프로미스 패턴보다 가독성이 높다는 장점이 있다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Async/Await</code>는 ECMAScript8에서 새롭게 추가된 자바스크립트 비동기 처리 패턴이다. 코드의 모습과 동작을 좀 더 동기 코드와 유사하게 작성할수 있어 기존의 콜백 패턴이나 프로미스 패턴보다 가독성이 높다는 장점이 있다. </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1초뒤 data에 값 담음</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">      resolve(data);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// data 값 출력</span></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure><p>기본적인 형태는 위와 같으며 아래에서 각 키워드를 알아본다.</p><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p><code>async</code> 키워드를 <code>function</code>앞에 붙이면 <code>AsyncFunction</code> 함수가 되며 이 함수는 항상 프라미스를 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func()); <span class="comment">// Promise &#123; &#x27;my-data&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>위 코드를 보면 <code>func()</code>는 <code>my-data</code> 값을 리턴하고 있지만 실제 리턴값은 프로미스 객체를 리턴하고 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// my-data</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 코드는 반환된 프라미스 객체를 <code>then</code> 함수를 통해 <code>data</code>값을 받아 출력하고 있다.</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>또 다른 키워드 <code>await</code>는 <code>async</code> 함수 안에서만 동작한다. <code>await</code>는 프로미스 객체를 만나면 처리될 때까지 기다리고 결과는 그 이후에 반환되며 이 키워드로 비동기 패턴을 동기식으로 작성할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// promise 변수에 프로미스 객체를 담음</span></span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1초뒤 resolve 함수를 호출하여 프로미스가 이행상태가 됨</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;my-data&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> promise; <span class="comment">// 프로미스가 이행될 때 까지 기다림</span></span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure><blockquote><p><code>await</code>는 <code>async</code> 함수 외부에서 사용될 수 없다. 만약 사용된다면 문법 에러가 발생한다.</p></blockquote><p>위 코드를 아래처럼 프로미스를 선언할 때 <code>await</code> 키워드를 사용할 수도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 프로미스가 이행되었을 때 결과값을 담음</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1초뒤 resolve 함수를 호출하여 프로미스가 이행상태가 됨</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;my-data&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData();</span><br></pre></td></tr></table></figure><h2 id="기존-비동기-처리-방식과-비교"><a href="#기존-비동기-처리-방식과-비교" class="headerlink" title="기존 비동기 처리 방식과 비교"></a>기존 비동기 처리 방식과 비교</h2><p>기존의 비동기 방식과 비교해보자, 서버와 통신하여 1초뒤 <code>my-data</code> 값을 리턴하는 <code>getData()</code> 함수가 있다고 가정한다.(여기서는 비동기 통신을 <code>setTimeout()</code>로 대체한다.)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getData()); <span class="comment">// 출력 안됨</span></span><br></pre></td></tr></table></figure><p>함수를 실행하면 리턴값은 아무것도 안나온다. 비동기 방식으로 통신되기 때문에 응답(1초)을 기다리지 않고 바로 값을 리턴하기 때문이다.</p><h3 id="콜백함수-방식"><a href="#콜백함수-방식" class="headerlink" title="콜백함수 방식"></a>콜백함수 방식</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> callBack(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>콜백 방식을 사용하면 위와 같다. <code>getData()</code> 함수에 콜백함수를 인자로 넣고 통신이 끝난 후 리턴하여 그 값을 출력하는데, 코드의 가독성이 좋지 않다.</p><h3 id="프로미스의-then-방식"><a href="#프로미스의-then-방식" class="headerlink" title="프로미스의 then 방식"></a>프로미스의 then 방식</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData().then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>반환된 프로미스 객체를 <code>then()</code> 함수에 전달받는 방식이다. 콜백 지옥을 해결하고, 예외처리가 가능한 방식이지만, 여전히 가독성이 안좋은건 사실이다.</p><h3 id="Async-Await-방식"><a href="#Async-Await-방식" class="headerlink" title="Async/Await 방식"></a>Async/Await 방식</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> getData();</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getResult();</span><br></pre></td></tr></table></figure><p><code>getResult()</code> 함수에 <code>async</code> 키워드를 사용해 <code>AsyncFunction</code>으로 만들었다. <code>getData()</code>의 리턴값은 프로미스기 때문에 <code>await</code> 키워드를 만나 프로미스 실행이 완료되면 결과값이 <code>result</code> 변수에 할당된다.</p><h2 id="예외처리"><a href="#예외처리" class="headerlink" title="예외처리"></a>예외처리</h2><p><code>Async/Await</code>의 예외처리는 <code>try</code>, <code>catch</code>로 한다. 프로미스에서 <code>catch()</code>를 사용한 것처럼 <code>async &amp; await</code>에서는 <code>catch&#123;&#125;</code>를 사용하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      data = <span class="string">&quot;my-data&quot;</span>;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 통신 성공</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> getData();</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// my-data</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 통신 실패</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">// error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getResult();</span><br></pre></td></tr></table></figure><p><code>catch</code>로 통신 오류 및 타입오류 등이 <code>error</code> 객체에 담기게 된다. 에러 유형에 맞게 코드를 작성하면 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://joshua1988.github.io/web-development/javascript/js-async-await/">자바스크립트 async와 await</a><br><a href="https://ko.javascript.info/async-await#ref-259">async와 await</a><br><a href="https://medium.com/@constell99/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-async-await-%EA%B0%80-promises%EB%A5%BC-%EC%82%AC%EB%9D%BC%EC%A7%80%EA%B2%8C-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%9E%88%EB%8A%94-6%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0-c5fe0add656c">자바스크립트의 Async/Await 가 Promises를 사라지게 만들 수 있는 6가지 이유</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es8/">es8</category>
      
      
      <comments>https://recordboy.github.io/2020/11/20/javascript-async-await/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Express] Express + React 연동 및 Heroku에 배포하기</title>
      <link>https://recordboy.github.io/2020/11/05/express-react-heroku-init/</link>
      <guid>https://recordboy.github.io/2020/11/05/express-react-heroku-init/</guid>
      <pubDate>Thu, 05 Nov 2020 00:55:22 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;헤로쿠-Heroku-란&quot;&gt;&lt;a href=&quot;#헤로쿠-Heroku-란&quot; class=&quot;headerlink&quot; title=&quot;헤로쿠(Heroku)란?&quot;&gt;&lt;/a&gt;헤로쿠(Heroku)란?&lt;/h2&gt;&lt;p&gt;헤로쿠(Heroku)는 서버 호스팅을 지원하는 클라우드 플랫폼이며, 무료로 서비스를 이용할 수 있는 장점이 있다. 단 무료 버전의 경우 최대 5개의 어플리케이션만 올릴 수 있으며, 30분동안 요청이 없는 경우 사이트는 잠이 든다. 잠이 든 상태에서 다시 요청이 들어오면 깨어나지만, 10초 ~ 30초 가량의 시간이 걸린다는 단점이 있다. 간단한 토이 프로젝트나 포트폴리오 용도로 적합하며, 파일 업로드는 Git을 이용하여 업로드할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="헤로쿠-Heroku-란"><a href="#헤로쿠-Heroku-란" class="headerlink" title="헤로쿠(Heroku)란?"></a>헤로쿠(Heroku)란?</h2><p>헤로쿠(Heroku)는 서버 호스팅을 지원하는 클라우드 플랫폼이며, 무료로 서비스를 이용할 수 있는 장점이 있다. 단 무료 버전의 경우 최대 5개의 어플리케이션만 올릴 수 있으며, 30분동안 요청이 없는 경우 사이트는 잠이 든다. 잠이 든 상태에서 다시 요청이 들어오면 깨어나지만, 10초 ~ 30초 가량의 시간이 걸린다는 단점이 있다. 간단한 토이 프로젝트나 포트폴리오 용도로 적합하며, 파일 업로드는 Git을 이용하여 업로드할 수 있다.</p><a id="more"></a><p>이번 포스팅에서는 하나의 디렉토리에 클라이언트와 백앤드로 구성된 프로젝트를 세팅하여 헤로쿠에 배포하는 것까지 진행해 볼 것이다. 클라이언트는 리액트(React)로 구성하고 서버는 익스프레스(Express)로 구성한다.</p><p>보통 CRA(Create-React-App)로 리액트 프로젝트를 생성하면 자동으로 서버가 생성되기 때문에 로컬에서 바로 확인이 가능하다. 하지만 익스프레스로 구축한 서버에 리액트를 연동할 경우 두개의 서버(리액트 + 익스프레스)가 존재해 버린다. 로컬에서 작업할 때는 두개의 서버를 돌려 작업할것이며, 실제로 헤로쿠에 배포할 때는 익스프레스 서버에 리액트 빌드 파일을 배포하여 사용할 것이다.</p><blockquote><p>리액트를 빌드하면 <code>build/</code> 디렉토리에는 웹팩과 바벨 등을 통해 빌드된 번들 등이 담기지만 CRA에서 제공하는 서버는 포함되지 않는다.</p></blockquote><h2 id="디렉토리-구조"><a href="#디렉토리-구조" class="headerlink" title="디렉토리 구조"></a>디렉토리 구조</h2><p>프로젝트 기본 구조는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my-app&#x2F;</span><br><span class="line">├── clinet                 &#x2F;&#x2F; 클라이언트(리액트) 영역</span><br><span class="line">│   ├── build              &#x2F;&#x2F; 배포 전용 파일</span><br><span class="line">│   ├── node_modules</span><br><span class="line">│   ├── public             &#x2F;&#x2F; 정적 파일 리소스</span><br><span class="line">│   ├── src                &#x2F;&#x2F; 개발 전용 소스</span><br><span class="line">│   ├── .gitignore</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   └── tsconfig.json</span><br><span class="line">│</span><br><span class="line">├── node_modules</span><br><span class="line">├── .gitignore</span><br><span class="line">├── index.js               &#x2F;&#x2F; 백앤드(익스프레스) 영역</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h2 id="프로젝트-초기화-및-익스프레스-설치"><a href="#프로젝트-초기화-및-익스프레스-설치" class="headerlink" title="프로젝트 초기화 및 익스프레스 설치"></a>프로젝트 초기화 및 익스프레스 설치</h2><h3 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h3><p>프로젝트 디렉토리 생성 및 npm 초기화한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my-app</span><br><span class="line">$ cd my-app </span><br><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><!-- more --><h3 id="익스프레스와-필요-모듈-설치"><a href="#익스프레스와-필요-모듈-설치" class="headerlink" title="익스프레스와 필요 모듈 설치"></a>익스프레스와 필요 모듈 설치</h3><p>익스프레스 서버 생성 및 필요 모듈 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express nodemon concurrently</span><br></pre></td></tr></table></figure><blockquote><p>express: 데이터와 통신할 서버로 사용할 것이다.<br>nodemon: node.js를 이용하는 파일들은 수정을 해도 반영이 바로 안되고 서버를 재시작해줘야 반영이 되기 때문에 번거롭다. 노드몬은 코드가 수정될 경우 자동으로 서버를 재시작 해주기 때문에 편리하게 사용할 수 있다.<br>concurrently: 리액트와 익스프레스를 동시 실행해주는 역할을 한다.</p></blockquote><p><code>index.js</code>파일을 생성하여 아래 내용 입력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>노드몬으로 서버 구동해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nodemon server</span><br></pre></td></tr></table></figure><p><a href="http://localhost:5000/api/data">http://localhost:5000/api/data</a>경로에 들어가 보면 <code>&#123;&quot;greeting&quot;:&quot;Hello World&quot;&#125;</code>를 확인해 볼 수 있다.</p><h3 id="헤로쿠-실행-스크립트-추가"><a href="#헤로쿠-실행-스크립트-추가" class="headerlink" title="헤로쿠 실행 스크립트 추가"></a>헤로쿠 실행 스크립트 추가</h3><p>헤로쿠 앱을 시작하려면 아래 명령어가 필요하다. <code>package.json</code>파일의 <code>script</code>에 하단 명령어를 추가해 준다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="헤로쿠에-배포해보기"><a href="#헤로쿠에-배포해보기" class="headerlink" title="헤로쿠에 배포해보기"></a>헤로쿠에 배포해보기</h2><h3 id="계정-생성-및-CLI-설치"><a href="#계정-생성-및-CLI-설치" class="headerlink" title="계정 생성 및 CLI 설치"></a>계정 생성 및 CLI 설치</h3><p><a href="https://heroku.com/">헤로쿠 홈페이지</a>로 들어가 회원가입을 하고 <a href="https://devcenter.heroku.com/articles/heroku-cli">이곳에서</a> 헤로쿠 CLI를 설치한다. 설치가 완료되면 버전을 확인하여 헤로쿠 CLI가 제대로 설치되어 있는지 확인한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku -v</span><br></pre></td></tr></table></figure><h3 id="Git-초기화"><a href="#Git-초기화" class="headerlink" title="Git 초기화"></a>Git 초기화</h3><p>헤로쿠는 Git을 이용하여 업로드한다. 깃을 초기화 하고, 업로드 할 때 <code>node_modules</code>파일들을 무시하도록 <code>.gitignore</code> 파일을 추가한다. 다음에 첫번째 커밋을 해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo node_modules &gt; .gitignore</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;init commit&#39;</span><br></pre></td></tr></table></figure><h3 id="헤로쿠-프로젝트-생성"><a href="#헤로쿠-프로젝트-생성" class="headerlink" title="헤로쿠 프로젝트 생성"></a>헤로쿠 프로젝트 생성</h3><p>아래 명령어를 사용하여 내가 만든 계정에 로그인을 해주자. 명령어 입력 후 아무키나 입력하면 새 브라우저 창이 열리며 내 헤로쿠 계정에 로그인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login</span><br></pre></td></tr></table></figure><p>만약 새 브라우저 창에서 <code>IP address mismatch</code>라는 오류가 뜰 경우 아래 명령어를 이용하여 터미널에서 직접 로그인해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login -i</span><br></pre></td></tr></table></figure><p>아래 명령어를 사용하여 내 헤로쿠 계정에 프로젝트를 생성한다. 프로젝트 이름은 url로 사용되기 때문에 다른 헤로쿠 사용자와 중복되면 안되며, <code>heroku create</code> 명령어만 사용할 경우 임의의 이름으로 설정된다. 이후 로컬과 헤로쿠 저장소가 제대로 연결이 되었는지 확인해 본다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku create 프로젝트이름</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><p>헤로쿠에 배포해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure><p>시간이 약간 소요되며 <code>https://프로젝트이름.herokuapp.com/api/data</code>으로 들어가면 <code>&#123;&quot;greeting&quot;:&quot;Hello World&quot;&#125;</code>를 확인해 볼 수 있다.</p><h2 id="리액트-설치"><a href="#리액트-설치" class="headerlink" title="리액트 설치"></a>리액트 설치</h2><p>익스프레스를 설치하였으니 이제 클라이언트 영역인 리액트를 생성하겠다. 이 포스팅에서는 <code>TypeScript</code>를 사용하겠다. <code>client</code>이란 폴더명으로 CRA를 실행한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx create-react-app client --template typescript</span><br></pre></td></tr></table></figure><p>조금 기다리면 리액트 앱이 생성될 것이다. <code>/client/src/</code> 경로의 <code>App.tsx</code>파일을 아래처럼 수정해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fetch(<span class="string">&#x27;http://localhost:5000/api/data&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;&#125;&gt;get data&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>버튼을 누르면 <code>fetch</code> 함수를 이용하여 <code>http://localhost:5000/api/data</code>에서 데이터를 가져오겠다는 코드다. 수정하고 <code>client</code>디렉토리로 가서 리액트를 실행한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>그럼 브라우저가 열리면서 <a href="http://localhost:3000/">http://localhost:3000</a>페이지가 나타난다. <code>get data</code>버튼을 누르면 브라우저의 콘솔창에 <code>http://localhost:5000/api/data</code>에서 가져온 JSON 데이터를 출력해야 되는데 아래와 같은 오류가 난다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to fetch at &#39;http:&#x2F;&#x2F;localhost:5000&#x2F;api&#x2F;data&#39; from origin &#39;http:&#x2F;&#x2F;localhost:3000&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. If an opaque response serves your needs, set the request&#39;s mode to &#39;no-cors&#39; to fetch the resource with CORS disabled.</span><br></pre></td></tr></table></figure><p>CORS(Cross-Origin Resource Sharing) 오류로써, 클라이언트와 서버의 포트가 다른 상태에서 클라이언트 측에서 서버 측으로 무언가를 요청했을 때 브라우저가 보안상의 이유로 요청을 차단하는 문제다. 여기서 설정한 리액트<code>(http://localhost:3000)</code>와 익스프레스<code>(http://localhost:5000)</code>는 각 다른 포트를 사용하고 있다. 이럴 경우 프록시 설정을 해줘야 한다.</p><h2 id="프록시-Proxy-설정"><a href="#프록시-Proxy-설정" class="headerlink" title="프록시(Proxy) 설정"></a>프록시(Proxy) 설정</h2><p>프록시란 사전적으로 대리, 대리인이라는 의미를 가지고 있으며, 프로토콜에 대한 대리 응답이라는 개념으로 보면 된다. 유저가 요청을 하는 경우 IP 주소가 전달되는데, 이를 프록시 서버가 임의로 IP 주소를 변경할 수 있다. 즉, 유저의 실제 IP를 알 수 없도록 하는 것이 프록시 서버의 역할이다. <code>http-proxy-middleware</code> 모듈을 설치하여 프록시를 설정할 수 있다. </p><p><code>client</code> 디렉토리에서 아래 명령어로 설치해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install http-proxy-middleware</span><br></pre></td></tr></table></figure><p>다음에 <code>/client/src/</code> 디렉토리로 가서 <code>setupProxy.js</code> 파일을 생성하고 아래 코드를 입력해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(</span><br><span class="line">    createProxyMiddleware(<span class="string">&quot;/api/data&quot;</span>, &#123;</span><br><span class="line">      target: <span class="string">&quot;http://localhost:5000&quot;</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>http-proxy-middleware</code>모듈은 앱이 실행될 때 <code>src</code> 디렉토리에서 <code>setupProxy.js</code>파일을 찾은 뒤 이 파일의 설정을 참고하여 프록시를 설정해 준다. <code>/api/data</code>라는 경로로 요청이 들어올 경우 <code>localhost:5000</code>서버를 이용하도록 설정했다. 다시 <code>App.tsx</code>파일을 아래처럼 수정해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fetch(<span class="string">&#x27;/api/data&#x27;</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> res.json();</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;&#125;&gt;get data&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>리액트를 재시작 하여 <code>get data</code>버튼을 클릭하면 콘솔창에 <code>&#123;&quot;greeting&quot;:&quot;Hello World&quot;&#125;</code> 데이터가 정상적으로 출력되는 것을 확인할 수 있다.</p><h2 id="서버-동시-시작"><a href="#서버-동시-시작" class="headerlink" title="서버 동시 시작"></a>서버 동시 시작</h2><p>익스프레스와 리액트, 프록시 설정까지 마쳤다. 이제 이 두개의 서버를 동시에 시작해야하는데, 처음에 설치했던 <code>concurrently</code>모듈을 이용하면 된다. 루트 디렉토리의 <code>package.json</code>파일의 <code>script</code>에 아래 부분을 추가한다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;concurrently \&quot;npm run dev:server\&quot; \&quot;npm run dev:client\&quot;&quot;,</span><br><span class="line">  &quot;dev:server&quot;: &quot;npm start&quot;,</span><br><span class="line">  &quot;dev:client&quot;: &quot;cd client &amp;&amp; npm start&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존의 실행되있던 서버를 모두 종료 후 아래 명령어를 실행해보면 두개의 서버가 동시에 실행된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h2 id="빌드-빛-배포하기"><a href="#빌드-빛-배포하기" class="headerlink" title="빌드 빛 배포하기"></a>빌드 빛 배포하기</h2><p><code>client</code> 디렉토리로 가서 빌드를 해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>빌드가 완료되면 <code>build</code> 디렉토리가 생성되며 안에는 배포용 파일들이 들어있다. 이 정적 파일들이 헤로쿠에서 클라이언트 영역으로 사용되며, 서버는 익스프레스만 구동된다. 따라서 정적 파일에 접근할 수 있도록 Route 설정이 필요하다. <code>index.js</code> 파일을 아래 코드처럼 수정한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// express 객체 생성</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// path 모듈 불러오기</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 미들웨어 함수를 특정 경로에 등록</span></span><br><span class="line">app.use(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 기본 포트를 app 객체에 설정</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리액트 정적 파일 제공</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;client/build&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 라우트 설정</span></span><br><span class="line">app.get(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.sendFile(path.join(__dirname+<span class="string">&#x27;/client/build/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`server running at http <span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>코드를 수정했으면 다시 루트 디렉토리의 <code>package.json</code>파일의 <code>script</code>에 아래 부분을 추가한다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;heroku-postbuild&quot;: &quot;cd client &amp;&amp; npm install &amp;&amp; npm run build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 헤로쿠에 푸쉬해주자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;build&#39;</span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure><p>배포가 완료되고 해당 주소로 들어가 배포가 잘 되었는지 확인해 본다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://daveceddia.com/deploy-react-express-app-heroku/">Deploy React and Express to Heroku) 배포</a><br><a href="https://chaewonkong.github.io/posts/express-with-react.html">Express 서버와 React: Proxy 활용과 빌드 및 헤로쿠(Heroku) 배포</a><br><a href="https://cbw1030.tistory.com/267">[React.js] 프록시(Proxy) 설정을 통해 CORS 이슈를 해결해보자!</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/server/">server</category>
      
      <category domain="https://recordboy.github.io/categories/server/express/">express</category>
      
      
      <category domain="https://recordboy.github.io/tags/express/">express</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      <category domain="https://recordboy.github.io/tags/heroku/">heroku</category>
      
      
      <comments>https://recordboy.github.io/2020/11/05/express-react-heroku-init/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] Fetch API</title>
      <link>https://recordboy.github.io/2020/09/22/javascript-fetch-api/</link>
      <guid>https://recordboy.github.io/2020/09/22/javascript-fetch-api/</guid>
      <pubDate>Tue, 22 Sep 2020 08:10:56 GMT</pubDate>
      
      <description>&lt;p&gt;자바스크립트의 fetch 함수는 비동기 통신 API로써 서버에 네트워크 요청을 보내 새로운 정보를 받아올 수 있다. ES6부터 지원하며, 가독성이 매우 뛰어난 장점이 있다. &lt;a href=&quot;https://recordboy.github.io/ui/dummy/data.json&quot;&gt;이곳&lt;/a&gt;을 클릭하면 &lt;code&gt;&amp;#123;&amp;quot;message&amp;quot;: &amp;quot;hello world&amp;quot;&amp;#125;&lt;/code&gt;라는 JSON 데이터 화면이 나온다. fetch API를 이용해 이 JSON을 가져와 보자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바스크립트의 fetch 함수는 비동기 통신 API로써 서버에 네트워크 요청을 보내 새로운 정보를 받아올 수 있다. ES6부터 지원하며, 가독성이 매우 뛰어난 장점이 있다. <a href="https://recordboy.github.io/ui/dummy/data.json">이곳</a>을 클릭하면 <code>&#123;&quot;message&quot;: &quot;hello world&quot;&#125;</code>라는 JSON 데이터 화면이 나온다. fetch API를 이용해 이 JSON을 가져와 보자.</p><a id="more"></a><h2 id="기본-형태"><a href="#기본-형태" class="headerlink" title="기본 형태"></a>기본 형태</h2><p>fetch API의 기본 형태는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, [options])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// data를 응답 받은 후 로직</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li><code>url</code>에는 접근하고자 경로를 넣으면 된다.  </li><li><code>options</code>에는 <code>method</code>나 <code>header</code>등을 지정하여 요청할 수 있다.  </li><li><code>options</code>에 아무값도 넘기지 않으면 요청은 GET 메서드로 진행된다.  </li></ul><p>화살표 함수를 함수 선언식으로 변경하면 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, [options])</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// data를 응답 받은 후 로직</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><a href="https://recordboy.github.io/ui/dummy/data.json">위에서 언급한 주소</a>를 입력하여 JSON 데이터를 잘 가져오는지 확인해 본다.</p><h2 id="요청-하기"><a href="#요청-하기" class="headerlink" title="요청 하기"></a>요청 하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://recordboy.github.io/ui/dummy/data.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Response Object</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 응답값 JSON 형태로 얻기</span></span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 리턴 받은 JSON</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>응답값은 첫번째 <code>then</code>에 지정된 함수의 <code>res</code>에 담겨지며, 이 값은 http 응답값을 가지고 있는 <code>Response Object</code>이다.  </li><li>첫번째 <code>then</code>의 응답값을 JSON 형태로 얻기 위해 <code>Response Object</code>의 <code>json()</code> 함수를 호출하여 값을 리턴한다.  </li><li>두번째 <code>then</code>에서 응답 받은 JSON을 확인할 수 있다.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://ko.javascript.info/fetch">fetch</a><br><a href="https://yeri-kim.github.io/posts/fetch/#fetch-%ED%95%A8%EC%88%98-%EA%B8%B0%EB%B3%B8">fetch() 함수 사용법</a><br><a href="https://m.blog.naver.com/dndlab/221783285664">Javascript에서의 비동기 통신</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/http/">http</category>
      
      
      <comments>https://recordboy.github.io/2020/09/22/javascript-fetch-api/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Node.js] http 서버 만들기</title>
      <link>https://recordboy.github.io/2020/08/04/node-http-server/</link>
      <guid>https://recordboy.github.io/2020/08/04/node-http-server/</guid>
      <pubDate>Tue, 04 Aug 2020 01:15:25 GMT</pubDate>
      
      <description>&lt;p&gt;Node.js 환경에서 간단한 http 서버를 만들어 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임(특정 언어로 만든 프로그램들을 실행할 수 있는 환경)이다. 기존의 자바스크립트는 웹 브라우저에서만 실행할 수 있었지만, Node.js를 사용하면 자바스크립트를 서버 환경에서도 사용할 수 았다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;노드 환경에서 서버를 만들려면 노드 기본 모듈인 &lt;code&gt;http&lt;/code&gt;가 필요하다. 이 모듈은 말그대로 HTTP의 각종 기능을 가지고 있다. 모듈을 불러오고 아래 코드를 입력한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Node.js 환경에서 간단한 http 서버를 만들어 보자.</p><blockquote><p>Node.js는 Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임(특정 언어로 만든 프로그램들을 실행할 수 있는 환경)이다. 기존의 자바스크립트는 웹 브라우저에서만 실행할 수 있었지만, Node.js를 사용하면 자바스크립트를 서버 환경에서도 사용할 수 았다.</p></blockquote><p>노드 환경에서 서버를 만들려면 노드 기본 모듈인 <code>http</code>가 필요하다. 이 모듈은 말그대로 HTTP의 각종 기능을 가지고 있다. 모듈을 불러오고 아래 코드를 입력한다.</p><a id="more"></a><h2 id="HTTP-모듈-생성"><a href="#HTTP-모듈-생성" class="headerlink" title="HTTP 모듈 생성"></a>HTTP 모듈 생성</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="string">&quot;&lt;div&gt;hello world&lt;/div&gt;&quot;</span>);</span><br><span class="line">    res.end(<span class="string">&quot;&lt;div&gt;end&lt;/div&gt;&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;8080포트에서 서버 대기중&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>아래 명령어를 시용하여 서버를 구동시켜 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node server</span><br></pre></td></tr></table></figure><p><code>8080포트에서 서버 대기중</code>이란 문구가 터미널에 출력되면 <code>http</code>서버가 정상 작동하는 것이다. <a href="http://localhost:8080/">http://localhost:8080</a> 주소로 들어가보면 <code>hello world</code>를 확인할 수 있다.</p><ul><li><p><code>http</code> 모듈의 <code>createServer</code>메서드로 서버 객체를 생성하였고 요청이 들어올 때 마다 매번 이 콜백함수가 실행된다. 콜백의 인수로 <code>res(request)</code>는 요청에 관한 정보들을, <code>res(respone)</code>은 응답에 관한 정보들을 담고있다.</p></li><li><p><code>res.writeHead</code> 메서드는 응답에 대한 정보를 기록하는 메서드이며, 첫번째 인수로 요청이 성공했다는 <strong>상태 코드</strong> <code>200</code>을 넣어주고, 두번째 인수로 응답에 대한 정보인 형식(HTML)과 문자셋(utf-8)를 넣어준다. 이 정보가 기록되는 부분을 헤더(header) 라고 한다.</p><blockquote><h3 id="상태-코드"><a href="#상태-코드" class="headerlink" title="상태 코드"></a><strong>상태 코드</strong></h3><p><code>res.writeHead</code> 메서드의 첫번째 인수로 넣어주는 200이나 500과 같은 숫자는 응답 상태를 나타내는 값으로서 브라우저는 상태 코드를 보고 요청이 성공/실패했는지 판단한다.</p><ul><li><strong>2XX</strong>: 성공을 알리는 상태코드며, 대표적으로 아래가 있다.<ul><li>200(성공)</li><li>201(작성됨)</li></ul></li><li><strong>3XX</strong>: 리다이렉션(다른 페이지로 아동)을 알리는 상태코드로 넘겨받은 URL을 브라우저가 열려고 하면 다른 URL로 갈 때 이 코드가 사용된다. 대표적으로 아래가 있다.<ul><li>301(영구 이동)</li><li>302(임시 이동)</li><li>302(수정되지 않음, 요청의 응답으로 캐시를 사용했음)</li></ul></li><li><strong>4XX</strong>: 요청 오류를 알리는 코드로서 요청 자체에 오류가 있을 때 표시된다. 대표적으로 아래가 있다.<ul><li>400(잘못된 요청)</li><li>401(권한 없음)</li><li>403(금지됨)</li><li>404(찾을 수 없음)</li></ul></li><li><strong>5XX</strong>: 서버 오류를 나타내며, 요청은 제대로 왔지만 서버에 오류가 있을 때 발생한다. 이 오류는 <code>res.writeHead</code>에서 직접 보내는 경우는 거의 없고, 예기치 못한 에러가 발생 시 서버가 알아서 5XX대 코드를 보낸다. 대표적으로 아래가 있다.<ul><li>500(내부 서버 오류)</li><li>502(불량 게이트웨이)</li><li>503(서비스를 사용할 수 없음)</li></ul></li></ul></blockquote></li><li><p><code>res.write</code> 메서드는 클라이언트로 보낼 데이터이며, 인수로 지정한 값이 바디 부분의 컨텐츠로 작성된다. 여러번 호출해서 데이터를 여러개 보낼 수 있다.</p></li><li><p><code>res.end</code> 메서드는 출력을 완료하는 메서드이며, 인수로 값을 지정하면 해당 인수의 값을 작성한 뒤 내용을 완료한다. 이 메서드로 인해 응답 처리는 종료되고, 그 요청의 처리가 종료된다.  <code>res.writeHead</code>, <code>res.write</code>, <code>res.end</code> 이 3개의 메서드로 클라이언트에 대한 응답 내용을 사용할 수 있다.</p></li><li><p><code>createServer</code> 메서드 뒤에 <code>listen</code> 메서드에 클라이언트에게 공개할 포트번호를 인수로 넣고 두번째 인자로 포트연결 완료 후 살행될 콜백 함수를 넣었다.</p></li></ul><h2 id="HTML-불러오기"><a href="#HTML-불러오기" class="headerlink" title="HTML 불러오기"></a>HTML 불러오기</h2><p><code>res.write</code>나 <code>res.end</code>에 HTML 코드를 일일히 작성하는 것은 비효율적이므로 미리 HTML 파일을 만들고 <code>fs</code> 모듈로 파일을 읽어 전송할 수 있다. 간단한 HTML 코드를 작성하고 <code>index.html</code> 파일로 루트경로에 저장한다,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>contents<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs 모듈 로드</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).promises;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 통신 성공 시</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// fs 모듈로 index.html 로드</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> fs.readFile(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// html 응답</span></span><br><span class="line">      res.end(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 에러 발생 시</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">      res.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 에러 메세지 응답</span></span><br><span class="line">      res.end(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;8080포트에서 서버 대기중&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>요청이 들어오면 <code>fs</code> 모듈로 HTML 파일을 읽어 클라이언트의 응답 값으로 보낼 수 있다.</p><h2 id="라우팅"><a href="#라우팅" class="headerlink" title="라우팅"></a>라우팅</h2><p>라우팅이란 특정한 URL에 대해 특정한 화면으로 연결하는 역할이라 정의할 수 있다. 주소가 <code>http://localhost:8080/index.html</code>면 <code>index.html</code> 화면을 보여주고 <code>http://localhost:8080/about.html</code>면 <code>about.html</code> 화면을 보여주는 역할이라 보면 된다. 간단히 라우팅을 구현해 보겠다. <code>index.html</code> 파일을 아래와 같이 수정해 주고, <code>about.html</code> 파일도 새롭게 추가해 준다. </p><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>메인 페이지<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>about.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>소개 페이지<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>server.js</code> 파일은 아래와 같이 수정해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs 모듈 로드</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).promises;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 통신 성공 시</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// index.html 로드</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> fs.readFile(<span class="string">&quot;./index.html&quot;</span>);</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.url === <span class="string">&quot;/about&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// about.html 로드</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> fs.readFile(<span class="string">&quot;./about.html&quot;</span>);</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 에러 발생 시</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">      res.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain; charset=utf-8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 에러 메세지 응답</span></span><br><span class="line">      res.end(err.message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;8080포트에서 서버 대기중&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>특정 링크를 클릭하면 지정한 화면으로 이동하는 것을 확인할 수 있다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://www.zerocho.com/books">Node.js 교과서</a><br><a href="https://jeonghwan-kim.github.io/series/2018/12/02/node-web-2_http.html">[Node.js코드랩] 2.기본 모듈 http</a><br><a href="https://araikuma.tistory.com/453">기본 스크립트와 http 객체</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/node-js/">node.js</category>
      
      
      <category domain="https://recordboy.github.io/tags/node-js/">node.js</category>
      
      
      <comments>https://recordboy.github.io/2020/08/04/node-http-server/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[ETC] ESLint, Prettier 적용하기</title>
      <link>https://recordboy.github.io/2020/07/06/eslint-prettier/</link>
      <guid>https://recordboy.github.io/2020/07/06/eslint-prettier/</guid>
      <pubDate>Mon, 06 Jul 2020 10:54:44 GMT</pubDate>
      
      <description>&lt;p&gt;자바스크립트 개발을 하다 보면 문법 오류나 코드 정리로 인해 시간을 많이 소비한다. &lt;code&gt;ESLint&lt;/code&gt;와 &lt;code&gt;Prettier&lt;/code&gt;는 이러한 상황을 해결해 주는 도구들이며, VSCode, WebStorm, Atom 등 여러 에디터와 연동해 사용이 가능하다. 이번 포스팅에서는 두가지 도구를 간단히 살펴보고 리액트 프로젝트에 적용하는 방법을 알아보겠다. 에디터는 VSCode를 기준으로 하겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바스크립트 개발을 하다 보면 문법 오류나 코드 정리로 인해 시간을 많이 소비한다. <code>ESLint</code>와 <code>Prettier</code>는 이러한 상황을 해결해 주는 도구들이며, VSCode, WebStorm, Atom 등 여러 에디터와 연동해 사용이 가능하다. 이번 포스팅에서는 두가지 도구를 간단히 살펴보고 리액트 프로젝트에 적용하는 방법을 알아보겠다. 에디터는 VSCode를 기준으로 하겠다.</p><a id="more"></a><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p>ESLint는 ES + Lint의 합성어로 ES는 EcmaScript를 의미하고 Lint는 보푸라기라는 뜻인데, 프로그래밍에서는 에러가 있는 코드에 표시를 달아 놓는 것을 의미한다. 즉 ESLint는 JavaScript의 스타일 가이드를 따르지 않거나 문제가 있는 안티 패턴들을 찾아주고 일관된 코드 스타일로 작성하도록 도와준다. 코딩 컨벤션 및 안티 패턴을 자동 검출 하므로 옮바른 코딩 습관을 위해 필히 사용할 것을 권장한다.</p><p>ESLint는 스타일 가이드를 편리하게 적용하기 위해 사용되기도 하는데, 많은 개발자가 사용중인 <a href="https://github.com/airbnb/javascript">Airbnb Style Guide</a>, <a href="https://github.com/google/eslint-config-google">Google Style Guide</a>가 대표적인 예이다.</p><p>ESLint가 어떻게 오류를 잡아주는지 예제를 통해 간단히 알아보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br><span class="line">$ touch test.js</span><br></pre></td></tr></table></figure><p>프로젝트를 생성할 디렉토리로 이동하여 <code>test</code> 폴더를 만들고 <code>test.js</code> 파일을 생성하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = text;;</span><br></pre></td></tr></table></figure><p>문자열에 따옴표도 없고, 세미콜론도 두개고, 변수에 값이 할당되어도 사용이 안되는 엉망인 코드를 작성하였다. 그냥 js 파일은 문법적 오류를 따로 잡아주지 않을 것이다.</p><h3 id="ESLint-설치"><a href="#ESLint-설치" class="headerlink" title="ESLint 설치"></a>ESLint 설치</h3><p>npm 프로젝트를 하나 생성하고 ESLint를 설치하도록 하겠다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line">$ npm i -D eslint</span><br></pre></td></tr></table></figure><blockquote><p><strong>축약법 간단 설명</strong></p><ul><li><code>npm init -y</code> 명령어에 <code>-y</code>는 <code>--yes</code>의 축약법으로 npm 프로젝트를 초기 세팅할 때 아무 질문 없이 기본값으로 프로젝트가 세팅된다. 비슷한 명령어로<code> --force(-f)</code>가 있다.</li><li><code>npm i -D eslint</code> 명령어의 <code>-D</code>는 <code>--save-dev</code>의 축약법이며, 비슷한 옵션으로 <code>--save</code>가 있다. 차이는 아래를 참고한다.<ul><li><code>--save-dev</code>는 설치한 패키지 정보를 <code>./package.json</code> 파일의 <code>devDependencies</code> 항목에 저장하며, npm install을 할 때 해당 패키지가 같이 설치된다. 설치할 때 <code>--production</code> 옵션을 붙이면 해당 패키지를 제외하고 npm이 설치된다.</li><li><code>--save</code>는 설치한 패키지 정보가 <code>./package.json</code>의 <code>dependencies</code>에 추가되며, npm install을 할 때 해당 패키지는 항상 설치가 된다.</li><li>아무 옵션을 넣지 않으면 순수하게 <code>./node_modules</code>에 패키지만 설치한다.</li></ul></li></ul></blockquote><p>설치가 끝나면 ESLint 실행 파일이 <code>./node_modules</code> 디렉토리 안에 생성될 것이다. ESLint 설정 파일을 생성하기 위해 아래 명령어를 실행한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node_modules&#x2F;.bin&#x2F;eslint --init</span><br></pre></td></tr></table></figure><p>실행하면 몇가지 질문들이 나온다. 본인의 프로젝트 상황에 맞게 답변을 하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint?</span><br><span class="line">    ❯ To check syntax and find problems</span><br><span class="line">? What type of modules does your project use?</span><br><span class="line">    ❯ None of these</span><br><span class="line">? Which framework does your project use?</span><br><span class="line">    ❯ None of these</span><br><span class="line">? Does your project use TypeScript?</span><br><span class="line">    ❯ No</span><br><span class="line">? Where does your code run?</span><br><span class="line">    ❯ browser</span><br><span class="line">? What format do you want your config file to be in?</span><br><span class="line">    ❯ JavaScript</span><br></pre></td></tr></table></figure><p>답변을 전부 마치면 루트 경로에 <code>.eslintrc.js</code> 파일이 생성되며, 여기에서 ESLint를 설정할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es2020&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>환경(env): 프로젝트의 사용 환경을 설정한다.</li><li>확장(extends): 다른 ESLint 설정을 확장해서 사용할때 설정한다. 위 파일에서는 ESLint가 추천하는 규칙을 적용하라는 설정이며, 실제 프로젝트에서는 위에서 언급한 <code>airbnb</code>나 <code>prettier</code> 등을 확장해서 사용한다.</li><li>파서 옵션(parserOptions): ESLint 사용을 위해 지원하려는 Javascript 언어 옵션을 설정할 수 있다.</li><li>규칙(rules): 프로젝트에서 자체적으로 덮어쓰고 싶은 규칙을 정의할 때 사용한다.</li></ul><p>설정 규칙 및 리스트는 상당히 방대하며, <a href="https://eslint.org/docs/rules/">ESLint 공식 레퍼런스</a>에서 참고 가능하다.</p><h3 id="ESLint-검사"><a href="#ESLint-검사" class="headerlink" title="ESLint 검사"></a>ESLint 검사</h3><p>이제 위에서 엉망으로 작성한 test.js 파일을 아래 명령어를 사용하여 검사해 보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node_modules&#x2F;.bin&#x2F;eslint test.js</span><br></pre></td></tr></table></figure><p>터미널에서 오류를 세가지를 아래처럼 알려준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\code\test\test.js</span><br><span class="line">  1:5   error  &#39;foo&#39; is assigned a value but never used  no-unused-vars</span><br><span class="line">  1:11  error  &#39;text&#39; is not defined                     no-undef</span><br><span class="line">  1:16  error  Unnecessary semicolon                     no-extra-semi</span><br><span class="line"></span><br><span class="line">✖ 3 problems (3 errors, 0 warnings)</span><br><span class="line">  1 error and 0 warnings potentially fixable with the &#96;--fix&#96; option.</span><br></pre></td></tr></table></figure><ol><li><code>foo</code>에 값이 할당되었지만 사용되지 않음</li><li><code>text</code>가 정의되지 않았음</li><li>불필요한 세미콜론이 있음</li></ol><p>위에서 3번째 항목에는 오른쪽에 <a href="https://eslint.org/docs/rules/no-extra-semi">no-extra-semi</a>라고 나와있다. 이는 ESLint가 의도된 것이 아닌 실수라고 판단한 것이며, 자동으로 코드를 수정할 수 있다. 검사 명령어에 <code>--fix</code>를 붙이면 <code>no-extra-semi</code>항목을 자동으로 고쳐준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node_modules&#x2F;.bin&#x2F;eslint test.js --fix</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 세미콜론이 두개에서 한개로 바뀐것을 확인할 수 있다.</p><p>실제 프로젝트에서는 검사할 파일이 많은데 위와 같이 일일히 터미널에서 ESLint를 실행하는것은 비효율적이다. 그래서 일반적으로 ESLint를 사용할때는 <code>package.json</code> 파일에 따로 설정해준다. 전체 파일을 상대로 ESLint를 실행되도록 설정해 보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint .&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>이제 터미널에 아래 명령어를 실행하면 전체 파일을 상대로 ESLint가 실행될 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>Prettier는 기존의 코드에 적용되어있던 스타일들을 전부 무시하고, 정해진 규칙에 따라 자동으로 코드 스타일을 정리해 주는 코드 포멧터이다.</p><blockquote><p>코드 포멧터(Code Formatter)란 개발자가 작성한 코드를 정해진 코딩 스타일을 따르도록 변환해주는 도구를 말한다.</p></blockquote><p>ESLint와 다른점이라면 ESLint는 문법 에러를 잡아내고, 특정 문법 요소를 쓰도록 만드는 등 코드 퀄리티와 관련된 것을 고치기 위해 사용되지만 Prettier는 코드 한 줄의 최대 길이나, 탭의 길이는 몇으로 할 것인지, 따옴표는 홀따옴표(‘)나 쌍따옴표(“)중 무엇을 사용 할 것인지 등등 코드 퀄리티보단 코딩 스타일을 일괄적으로 통일하는 도구에 가깝다.</p><p>다시 테스트를 위해 <code>test.js</code>에 엉망인 코드를 작성하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func=<span class="function"><span class="keyword">function</span> </span></span><br><span class="line"><span class="function">(<span class="params"> </span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> </span><br><span class="line">foo  </span><br><span class="line">=<span class="string">&#x27;text&#x27;</span></span><br><span class="line"><span class="keyword">return</span>     foo&#125;</span><br></pre></td></tr></table></figure><h3 id="Prettier-설치"><a href="#Prettier-설치" class="headerlink" title="Prettier 설치"></a>Prettier 설치</h3><p>Prettier을 아래 명령어로 설치해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i prettier -D -E</span><br></pre></td></tr></table></figure><blockquote><p>위 명령어중 <code>-E</code>는 <code>--save-exac</code>의 축약법이다. 위 ESLint 모듈을 설치할때와 다르게 Prettier에서는 이 옵션을 붙이는 것을 권장하는데, 버전이 달라지면서 생길 스타일 변화를 막기 위해서라고 한다.</p></blockquote><h3 id="Prettier-실행"><a href="#Prettier-실행" class="headerlink" title="Prettier 실행"></a>Prettier 실행</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx prettier test.js</span><br></pre></td></tr></table></figure><p>위 명령어를 사용하면 엉망인 코드가 아래처럼 올바른 코드로 포멧팅되어 터미널창에 출력이 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">&quot;text&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>코드 자체를 수정하고 싶다면 명령어에 <code>--write</code> 옵션을 추가하면 된다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx prettier --write test.js</span><br></pre></td></tr></table></figure><p>에디터에 아래처럼 코드가 수정된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">&quot;text&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이제 리액트 프로젝트에 ESLint와 Prettier를 적용하는 방법을 알아보겠다.</p><h2 id="리액트에-ESLint와-Prettier-적용하기"><a href="#리액트에-ESLint와-Prettier-적용하기" class="headerlink" title="리액트에 ESLint와 Prettier 적용하기"></a>리액트에 ESLint와 Prettier 적용하기</h2><p>이 포스팅에서는 CRA(Create React App)을 이용하여 생성한 리액트 프로젝트를 기준으로 한다. 아래 명령어를 사용하여 리액트 프로젝트를 생성한다.</p><h3 id="리액트-프로젝트-생성"><a href="#리액트-프로젝트-생성" class="headerlink" title="리액트 프로젝트 생성"></a>리액트 프로젝트 생성</h3><p><strong>자바스크립트 사용 경우</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app 프로젝트이름 --use-npm</span><br></pre></td></tr></table></figure><p><strong>타입스크립트 사용 경우</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app 프로젝트이름 --use-npm --template typescript</span><br></pre></td></tr></table></figure><p>CRA로 생성된 프로젝트는 안에 ESLint가 따로 탑재되어 있기 때문에 위처럼 따로 설치할 필요가 없다. 만약 CRA로 생성한 프로젝트에 수동으로 ESLint를 설치한다면, 프로젝트는 실행이 안되고, 터미널에 아래 경고가 출력될 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">There might be a problem with the project dependency tree.</span><br><span class="line">It is likely not a bug in Create React App, but something you need to fix locally.</span><br><span class="line"></span><br><span class="line">The react-scripts package provided by Create React App requires a dependency:</span><br><span class="line"></span><br><span class="line">  &quot;eslint&quot;: &quot;^6.6.0&quot;</span><br><span class="line"></span><br><span class="line">Don&#39;t try to install it manually: your package manager does it automatically.</span><br><span class="line">However, a different version of eslint was detected higher up in the tree:</span><br><span class="line"></span><br><span class="line">  &#x2F;Users&#x2F;kongseongjoo&#x2F;Documents&#x2F;app&#x2F;node_modules&#x2F;eslint (version: 7.5.0) </span><br><span class="line"></span><br><span class="line">Manually installing incompatible versions is known to cause hard-to-debug issues.</span><br><span class="line"></span><br><span class="line">If you would prefer to ignore this check, add SKIP_PREFLIGHT_CHECK&#x3D;true to an .env file in your project.</span><br><span class="line">That will permanently disable this message but you might encounter other issues.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>이는 기본 탑재되는 node_module과 수동설치한 node_module의 버전 호환성 문제이며 터미널 경고 아래에 해결 방법이 나온다. CRA로 생성된 프로젝트는 ESLint를 따로 설치를 하지 않도록 한다.</p><h3 id="Prettier-설치-1"><a href="#Prettier-설치-1" class="headerlink" title="Prettier 설치"></a>Prettier 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i prettier -D -E</span><br></pre></td></tr></table></figure><h3 id="필요한-추가-모듈"><a href="#필요한-추가-모듈" class="headerlink" title="필요한 추가 모듈"></a>필요한 추가 모듈</h3><p>Prettier와 ESLint를 같이 사용하려면 아래 모듈을 추가로 설치해야 한다.</p><ul><li><strong>eslint-config-prettier</strong><br>ESLint의 formatting 관련 설정 중 Prettier와 충돌하는 부분을 비활성화 한다.</li><li><strong>eslint-plugin-prettier</strong><br>Prettier를 ESLint 플러그인으로 추가한다. 즉, Prettier에서 인식하는 코드상의 포맷 오류를 ESLint 오류로 출력해준다.</li></ul><p>아래 명령어를 입력하여 위에서 언급한 모듈을 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><p>그리고 프로젝트의 루트 경로에 <code>.eslintrc.json</code>파일을 만들고 아래 내용을 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: [<span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;plugin:prettier/recommended&quot;</span>],</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ESLint-Prettier-익스텐션-설치"><a href="#ESLint-Prettier-익스텐션-설치" class="headerlink" title="ESLint, Prettier 익스텐션 설치"></a>ESLint, Prettier 익스텐션 설치</h3><p>Node 모듈을 설치했으니, 이제 VSCode와 같이 사용할 때 필요한 익스텐션을 설치하고 설정을 바꿔주자. VSCode의 Extensions: Marketplace로 들어가서 ESLint와 Prettier를 검색하여 설치한다.</p><h3 id="VSCode-설정"><a href="#VSCode-설정" class="headerlink" title="VSCode 설정"></a>VSCode 설정</h3><p>VSCode에서 파일을 저장할 때마다 자동으로 코드가 수정되도록 설정해보자. VSCode 설정(윈도우, 리눅스에서는 Ctrl + , 맥에서는 Cmd + ,)으로 들어간다. 설정으로 들어가면 Search settings 입력창 아래에 User와 Workspace 항목이 있다. User는 VSCode 자체 설정으로 모든 프로젝트에 적용이 되고, Workspace는 현재 프로젝트에서만 설정이 적용되며, <code>.vscode/settings.json</code>에 설정 항목이 저장된다. ESLint와 Prettier의 경우 프로젝트별로 설정이 다른경우가 많이 때문에 작업공간마다 설정파일을 따로 관리하는 것을 선호한다. 설정은 json파일에 직접 입력이 가능하며, 우측 상단에 종이 모양의 Open Setting(JSON)아이콘을 클릭하면 <code>settings.json</code>파일이 열린다. 아래처럼 설정한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Set the default</span></span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// Enable per-language</span></span><br><span class="line">  <span class="string">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// For ESLint</span></span><br><span class="line">    <span class="string">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ESLint-설정"><a href="#ESLint-설정" class="headerlink" title="ESLint 설정"></a>ESLint 설정</h3><p><a href="https://eslint.org/docs/rules/">ESLint 규칙</a>은 상당히 방대하며, 모든것을 다 바꾸기 어렵기 때문에 여러가지 규칙을 정해준 모음이 있는데 위에서 언급한 Airbnb Style Guide나 Google Style Guide가 있다. 여기선 Airbnb를 적용해 보겠다.</p><h4 id="Airbnb-Style-Guide-적용"><a href="#Airbnb-Style-Guide-적용" class="headerlink" title="Airbnb Style Guide 적용"></a>Airbnb Style Guide 적용</h4><p>아래 명령어를 사용하여 Airbnb를 설치해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D eslint-config-airbnb</span><br></pre></td></tr></table></figure><blockquote><p>eslint-config-airbnb 말고도 eslint-config-airbnb-base가 있는데, 차이는 base에는 리액트 관련 규칙이 들어있지 않다는 점이다.</p></blockquote><p>그리고 <code>.eslintrc.json</code>파일의 <code>&quot;extends&quot;</code>속성에 <code>&quot;airbnb&quot;</code>를 추가 해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: [<span class="string">&quot;eslint:recommended&quot;</span>, <span class="string">&quot;plugin:prettier/recommended&quot;</span>, <span class="string">&quot;airbnb&quot;</span>],</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>App.js</code>파일을 열어보면 빨간줄이 엄청 그어져 있을 것이다. Airbnb의 규칙이 상당히 까다롭기 때문이다. 꼭 Airbnb 규칙을 따를 필요는 없다. <a href="https://eslint.org/docs/user-guide/configuring">ESLint 문서</a>에서 본인 스타일에 맞는 스타일을 찾거나 수정하여 사용하면 된다.</p><h3 id="Prettier-설정"><a href="#Prettier-설정" class="headerlink" title="Prettier 설정"></a>Prettier 설정</h3><p>ESLint 설정 파일과 마찬가지로 루트 경로에 <code>.prettierrc.json</code>을 만들어 준다. <a href="https://prettier.io/docs/en/options.html">Prettier의 옵션 문서</a>에서 필요한 옵션을 골라 설정해 주면 된다. 아래는 간단한 예시이다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://www.daleseo.com/js-eslint/">[자바스크립트] ESLint로 소스 코드의 문제 찾기</a><br><a href="https://www.daleseo.com/js-prettier/">[자바스크립트] Prettier로 코딩 스타일 통일하기</a><br><a href="https://feynubrick.github.io/2019/05/20/eslint-prettier.html">VS Code에서 ESlint와 Prettier 함께 사용하기</a><br><a href="https://velog.io/@kyusung/eslint-config-2">ESLint 설정 살펴보기</a><br><a href="https://react.vlpt.us/basic/27-useful-tools.html">27. 리액트 개발 할 때 사용하면 편리한 도구들 - Prettier, ESLint, Snippet</a><br><a href="https://tech.kakao.com/2019/12/05/make-better-use-of-eslint/">ESLint 조금 더 잘 활용하기</a><br><a href="https://github.com/airbnb/javascript">Airbnb JavaScript Style Guide</a><br><a href="https://jeonghwan-kim.github.io/series/2019/12/30/frontend-dev-env-lint.html">프론트엔드 개발환경의 이해: 린트</a><br><a href="https://pravusid.kr/javascript/2019/03/10/eslint-prettier.html">ESLint(TSLint)와 Prettier 함께 사용하기</a><br><a href="https://velog.io/@velopert/eslint-and-prettier-in-react">리액트 프로젝트에 ESLint 와 Prettier 끼얹기</a><br><a href="https://poiemaweb.com/eslint">ESLint</a>  </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/etc/">etc</category>
      
      
      <category domain="https://recordboy.github.io/tags/eslint/">eslint</category>
      
      <category domain="https://recordboy.github.io/tags/prettier/">prettier</category>
      
      <category domain="https://recordboy.github.io/tags/tools/">tools</category>
      
      <category domain="https://recordboy.github.io/tags/module/">module</category>
      
      <category domain="https://recordboy.github.io/tags/extension/">extension</category>
      
      
      <comments>https://recordboy.github.io/2020/07/06/eslint-prettier/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 비동기 처리를 위한 프로미스</title>
      <link>https://recordboy.github.io/2020/06/05/javascript-promise/</link>
      <guid>https://recordboy.github.io/2020/06/05/javascript-promise/</guid>
      <pubDate>Fri, 05 Jun 2020 00:07:04 GMT</pubDate>
      
      <description>&lt;p&gt;자바스크립트는 비동기 처리를 위한 하나의 패턴으로 &lt;a href=&quot;/2020/06/04/javascript-asynchronous-callback/&quot;&gt;콜백 함수&lt;/a&gt;를 사용한다. 하지만 콜백 패턴은 가독성이 나쁘고, 비동기 처리 중 발생한 에러의 예외처리가 곤란하며, 여러개의 비동기 처리 로직을 한꺼번에 처리하는 것도 한계가 있다. ES6에서 비동기 처리를 위한 또 다른 패턴으로 프로미스(Promise)를 도입하였다. &lt;strong&gt;프로미스는 비동기적으로 요청한 결과(성공/실패)를 나타내는 객체&lt;/strong&gt;로서, 콜백 패턴이 가진 단점을 보완하며, 비동기 처리 시점을 명확하게 표현한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>자바스크립트는 비동기 처리를 위한 하나의 패턴으로 <a href="/2020/06/04/javascript-asynchronous-callback/">콜백 함수</a>를 사용한다. 하지만 콜백 패턴은 가독성이 나쁘고, 비동기 처리 중 발생한 에러의 예외처리가 곤란하며, 여러개의 비동기 처리 로직을 한꺼번에 처리하는 것도 한계가 있다. ES6에서 비동기 처리를 위한 또 다른 패턴으로 프로미스(Promise)를 도입하였다. <strong>프로미스는 비동기적으로 요청한 결과(성공/실패)를 나타내는 객체</strong>로서, 콜백 패턴이 가진 단점을 보완하며, 비동기 처리 시점을 명확하게 표현한다.</p><a id="more"></a><h2 id="기존의-콜백-함수-패턴"><a href="#기존의-콜백-함수-패턴" class="headerlink" title="기존의 콜백 함수 패턴"></a>기존의 콜백 함수 패턴</h2><p>기존의 비동기 처리 방식은 콜백 패턴을 이용하는 방법이였으며 코드는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">id, callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">      id: id,</span><br><span class="line">      name: <span class="string">&#x27;my name is &#x27;</span> + id</span><br><span class="line">    &#125;;</span><br><span class="line">    callback(user);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findUser(<span class="string">&#x27;foo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user); <span class="comment">// &#123; id: &#x27;foo&#x27;, name: &#x27;my name is foo&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>user</code>객체의 정보를 받아오는 구조다. <code>getUser()</code> 함수를 호출할 때 두번째 인자로 콜백 함수가 할당된다. <code>setTimeout()</code>함수로 인하여 1초 뒤 <code>user</code>객체의 정보를 담는 로직이 실행되며 결과물이 두번째 인자로 들어간 콜백 함수의 인자에 할당되어 콜백 함수가 호출된다.</p><h2 id="프로미스-패턴"><a href="#프로미스-패턴" class="headerlink" title="프로미스 패턴"></a>프로미스 패턴</h2><p>상단의 비동기 처리 방식을 프로미스를 이용하면 아래와 같이 작성할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> user = &#123;</span><br><span class="line">        id: id,</span><br><span class="line">        name: <span class="string">&#x27;my name is &#x27;</span> + id,</span><br><span class="line">      &#125;;</span><br><span class="line">      resolve(user);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findUser(<span class="string">&#x27;foo&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user); <span class="comment">// &#123; id: &#x27;foo&#x27;, name: &#x27;my name is foo&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 코드는 콜백 함수를 인자로 넘기는 대신에 프로미스 객체를 생성하여 리턴을 하고, 리턴받은 프로미스 객체의 <code>then()</code>메서드를 호출하여 실행할 로직을 인자값으로 넣어줬다. 실행할 로직은 <code>resolve</code> 메서드에 할당되어 <code>user</code>객체의 결과값을 콘솔창에 출력하고 있다. <code>resolve()</code>와 <code>then()</code>가 생소하다. 아래에서 천천히 알아보도록 하겠다.</p><h2 id="프로미스의-3가지-상태"><a href="#프로미스의-3가지-상태" class="headerlink" title="프로미스의 3가지 상태"></a>프로미스의 3가지 상태</h2><p>프로미스는 3가지의 상태(states)를 가지며, 여기서 상태란 프로미스의 처리 과정을 의미한다. <code>new Promise()</code>로 프로미스를 생성하고 종료될 때까지 3가지 상태를 가진다.</p><ul><li>Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태</li><li>Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태</li><li>Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태</li></ul><h3 id="Pending-대기"><a href="#Pending-대기" class="headerlink" title="Pending(대기)"></a>Pending(대기)</h3><p>아래처럼 <code>new Promise()</code>생성자를 호출하면 대기 상태가 된다. <code>new Promise()</code> 생성자를 호출할 때 인자로 콜백 함수를 선언할 수 있고, 콜백 함수의 인자는 <code>resolve</code>, <code>reject</code>이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실제로는 변수에 할당하기 보단 어떤 함수의 리턴값으로 많이 사용되며, 생성자의 인자로 화살표 함수를 많이 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fulfilled-이행"><a href="#Fulfilled-이행" class="headerlink" title="Fulfilled(이행)"></a>Fulfilled(이행)</h3><p>넘겨 받은 인자에서 <code>resolve</code>를 함수로 실행하면 이행(완료) 상태가 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이행 상태에서 아래와 같이 <code>then()</code>메서드를 이용하면 결과값을 받을 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="string">&#x27;my name is foo&#x27;</span>;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnPromise().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// my name is foo</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Rejected-실패"><a href="#Rejected-실패" class="headerlink" title="Rejected(실패)"></a>Rejected(실패)</h3><p>넘겨 받은 인자에서 <code>reject</code>를 함수로 실행하면 실패 상태가 된다. 실패 상태가 되면 실패 처리의 결과값을 <code>catch()</code>메서드를 통해 받을 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnPromise</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Request is failed&#x27;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnPromise()</span><br><span class="line">  .then()</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// Error: Request is failed</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h2><h3 id="기본-코드"><a href="#기본-코드" class="headerlink" title="기본 코드"></a>기본 코드</h3><p>아래는 응답값에 따라 결과를 출력하는 예제이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> data = <span class="string">&#x27;my-data&#x27;</span>;  <span class="comment">// data 값이 있다면 data 값을 출력 </span></span><br><span class="line">      <span class="comment">// const data = &#x27;&#x27;; // data 값이 없다면 에러를 출력</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Request is failed&#x27;</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData()</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// my-data</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// Error: Request is failed</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>setTimeout()</code>함수로 1초 뒤 <code>data</code>값을 받아오며, <code>data</code>값이 있을 경우 <code>then()</code>메서드를 호출하고, <code>data</code>값이 없을 경우 <code>catch()</code> 메서드를 호출한다.</p><h3 id="프로미스-연결-Promise-Chaining"><a href="#프로미스-연결-Promise-Chaining" class="headerlink" title="프로미스 연결(Promise Chaining)"></a>프로미스 연결(Promise Chaining)</h3><p>프로미스의 특징으로 여러개의 프로미스를 연결하여 사용할 수 있다. <code>then()</code>메서드를 호출하면 새로운 프로미스 객체가 반환된다. 아래처럼 각 프로미스를 연결하여 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> data = <span class="number">10</span>; <span class="comment">// data 값이 10일 경우</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Request is failed&#x27;</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData()</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">10</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 20</span></span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">10</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 30</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err); <span class="comment">// Error: Request is failed</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>setTimeout()</code>함수에서 <code>data</code>값이 10으로 왔다고 가정해 본다. 첫번째 <code>then()</code>메서드의 <code>data</code>에 10을 더하여 리턴하고 두번째 <code>then()</code>에 더한 <code>data</code>를 인자로 넣어 호출한다. 이와 같은 방법으로 <code>then()</code>함수를 연결하여 사용할 수 있다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://www.daleseo.com/js-async-promise/">[자바스크립트] 비동기 처리 2부 - Promise</a><br><a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/">자바스크립트 Promise 쉽게 이해하기</a><br><a href="https://velog.io/@cyranocoding/2019-08-02-1808-%EC%9E%91%EC%84%B1%EB%90%A8-5hjytwqpqj">JavaScript 비동기 처리를 위한 promise 이해하기</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a><br><a href="https://poiemaweb.com/es6-promise">프로미스</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/06/05/javascript-promise/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 비동기 처리와 콜백 함수</title>
      <link>https://recordboy.github.io/2020/06/04/javascript-asynchronous-callback/</link>
      <guid>https://recordboy.github.io/2020/06/04/javascript-asynchronous-callback/</guid>
      <pubDate>Thu, 04 Jun 2020 05:51:02 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;비동기-처리&quot;&gt;&lt;a href=&quot;#비동기-처리&quot; class=&quot;headerlink&quot; title=&quot;비동기 처리&quot;&gt;&lt;/a&gt;비동기 처리&lt;/h2&gt;&lt;p&gt;비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고, 순차적으로 다음 코드를 먼저 실행하는 자바스크립트의 특성이다. 비동기의 반대로는 동기 처리가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동기: 요청을 보낸 후 해당 응답을 받아야 다음 동작을 실행(ex: 은행)&lt;/li&gt;
&lt;li&gt;비동기: 요청을 보낸 후 응답에 관계 없이 다음 동작을 실행(ex: 카페)&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="비동기-처리"><a href="#비동기-처리" class="headerlink" title="비동기 처리"></a>비동기 처리</h2><p>비동기 처리란 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고, 순차적으로 다음 코드를 먼저 실행하는 자바스크립트의 특성이다. 비동기의 반대로는 동기 처리가 있다.</p><ul><li>동기: 요청을 보낸 후 해당 응답을 받아야 다음 동작을 실행(ex: 은행)</li><li>비동기: 요청을 보낸 후 응답에 관계 없이 다음 동작을 실행(ex: 카페)</li></ul><a id="more"></a><h2 id="비동기-예제"><a href="#비동기-예제" class="headerlink" title="비동기 예제"></a>비동기 예제</h2><p>비동기 처리의 대표적인 사례는 제이쿼리의 <code>Ajax</code>와 자바스크립트의 내장 함수인 <code>setTimeout()</code>이 있다.</p><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>아래 처럼 <code>Ajax</code>로 통신을 하고 있다고 가정해 보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data;</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;https://recordboy.github.io/&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="comment">// 전송 데이터</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 통신 성공시 결과값 할당</span></span><br><span class="line">      data = result;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getData()); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>https://recordboy.github.io/</code>주소로 <code>data</code>를 전송하고, 통신 성공시 응답값을 <code>data</code>변수에 할당하여 리턴하도록 되어있다. 정상적으로 응답값을 받아 올 것 같지만 리턴값은 <code>undefined</code>가 출력된다. 이유는 <code>Ajax</code>를 요청하고 응답값을 받기 전에 <code>return data</code>를 실행했기 때문이다. 결국 <code>getData()</code>의 리턴값은 초기 값을 설정하지 않는 <code>undefined</code>가 출력되는 것이다. <strong>이렇게 특정 로직의 실행이 끝날 때까지 대기하지 않고, 나머지 코드를 먼저 실행하는 것이 비동기 처리이다.</strong> </p><p>자바스크립트에서 비동기 처리가 필요한 이유는 화면에서 서버로 데이터를 요청했을 때 서버가 응답값을 언제 줄지도 모르는데 마냥 기다릴 순 없기 때문이다. 만약 어플리케이션이 비동기 처리를 하지 않고 동기적 처리를 한다고 가정해 보자. 위에서는 1번만 요청하였지만, 만약 요청을 100번이상 보낸다면 해당 어플리케이션은 실행하는데 수십분이 걸릴 것이다. </p><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h3><p>비동기 처리의 두번째 사례이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    data = <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getData()); <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>위에서의 <code>setTimeout()</code>은 1초 뒤에 <code>data</code>변수에 <code>result</code>값을 할당하도록 되어있다. <code>Ajax</code>와 마찬가지로 코드는 <code>setTimeout()</code>이 실행되는 것을 기다리지 않고 <code>return data</code>를 먼저 실행하기 때문에 리턴값은 <code>undefined</code>를 출력한다.</p><h2 id="비동기-처리-방식의-문제-해결"><a href="#비동기-처리-방식의-문제-해결" class="headerlink" title="비동기 처리 방식의 문제 해결"></a>비동기 처리 방식의 문제 해결</h2><p>위와 같은 문제점들은 콜백 패턴으로 처리가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    data = <span class="string">&#x27;result&#x27;</span>;</span><br><span class="line">    callback(data);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// result</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>함수를 실행할 때 인자값으로 콜백 함수를 넣는 것이다. <code>getData()</code>의 인자값으로 콜백 함수가 들어갔고, <code>setTimeout()</code>이 1초뒤 실행되고 결과값을 콜백 함수의 인자값으로 넣어 호출하였다. 이렇게 콜백 패턴을 사용하면 특정 로직이 끝났을 때 원하는 동작을 실행 시킬 수 있다.</p><h2 id="콜백-지옥"><a href="#콜백-지옥" class="headerlink" title="콜백 지옥"></a>콜백 지옥</h2><p>비동기 처리를 위해 콜백 패턴를 사용하면 처리 순서를 보장하기 위해 여러 개의 콜백 함수가 중첩되어 복잡도가 높아지는 콜백 함수가 발생하는 단점이 있다. 아래는 콜백 지옥이 발생하는 전형적인 사례이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(<span class="function"><span class="keyword">function</span> (<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(<span class="function"><span class="keyword">function</span> (<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(<span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        step5(<span class="function"><span class="keyword">function</span> (<span class="params">value5</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 탈출</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>step1에서 어떤 처리 (주로 입출력) 이후 그 결과를 받아와, 인자로 전달된 익명 함수의 매개변수로 넘겨준다. 이후 step2에서 또 어떤 처리를 하고, 다음 익명 함수가 실행된다. 이를 반복하다보면 코드가 위에서 아래가 아니라 기묘한 피라미드 모양으로 기술되게 된다. 이러한 콜백 지옥은 가독성을 나쁘게 하며 실수를 유발하는 원인이 된다.</p><h3 id="콜백-지옥-해결-방법"><a href="#콜백-지옥-해결-방법" class="headerlink" title="콜백 지옥 해결 방법"></a>콜백 지옥 해결 방법</h3><p>일반적으로 콜백 지옥을 해결하는 방법에는 Promise나 Async를 사용하는 방법이 있으며, 만약 코딩 패턴으로만 콜백 지옥을 해결하려면 아래와 같이 각 콜백 함수를 분리해 주면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">step1(afterStep1);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterStep1</span>(<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(afterStep2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterStep2</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">  step3(afterStep3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 생략</span></span><br></pre></td></tr></table></figure><p>위와 같은 방법으로 콜백 지옥을 해결할 수 있지만 Promise나 Async를 이용하면 더욱 편리하게 비동기 처리를 구현할 수 있다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/">자바스크립트 비동기 처리와 콜백 함수</a><br><a href="https://medium.com/@yoohl/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%8F%99%EA%B8%B0-ac9495e42d0">자바스크립트 비동기처리</a><br><a href="https://poiemaweb.com/js-async">동기식 처리 모델 vs 비동기식 처리 모델</a><br><a href="https://pro-self-studier.tistory.com/89">동기와 비동기, 콜백함수</a><br><a href="https://poiemaweb.com/es6-promise">프로미스</a><br><a href="https://librewiki.net/wiki/%EC%BD%9C%EB%B0%B1_%EC%A7%80%EC%98%A5">콜백 지옥</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/06/04/javascript-asynchronous-callback/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Algorithm] 랜덤 배열(Shuffle)</title>
      <link>https://recordboy.github.io/2020/06/04/algorithm-shuffle-array/</link>
      <guid>https://recordboy.github.io/2020/06/04/algorithm-shuffle-array/</guid>
      <pubDate>Thu, 04 Jun 2020 04:18:39 GMT</pubDate>
      
      <description>&lt;p&gt;아래는 배열을 무작위로 섞는 알고리즘이며, &lt;code&gt;arr&lt;/code&gt;배열을 선언한 뒤 각 요소를 랜덤으로 추출하여 &lt;code&gt;newArr&lt;/code&gt;라는 새로운 배열에 할당하도록 작성되었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>아래는 배열을 무작위로 섞는 알고리즘이며, <code>arr</code>배열을 선언한 뒤 각 요소를 랜덤으로 추출하여 <code>newArr</code>라는 새로운 배열에 할당하도록 작성되었다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">  newArr = [],</span><br><span class="line">  len = arr.length,</span><br><span class="line">  ranIdx = <span class="number">0</span>,</span><br><span class="line">  ran = <span class="number">0</span>,</span><br><span class="line">  target = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  ranIdx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length);</span><br><span class="line">  ran = arr[ranIdx];</span><br><span class="line">  <span class="keyword">if</span> (arr.indexOf(ran) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    target = arr.indexOf(ran);</span><br><span class="line">    arr.splice(target, <span class="number">1</span>);</span><br><span class="line">    newArr.push(ran);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// 무작위로 배열 출력</span></span><br></pre></td></tr></table></figure><p>구글링을 하다 더욱 간결한 코드를 발견하였다. 코드는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> j, x, i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = a.length; i; i -= <span class="number">1</span>) &#123;</span><br><span class="line">    j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i);</span><br><span class="line">    x = a[i - <span class="number">1</span>];</span><br><span class="line">    a[i - <span class="number">1</span>] = a[j];</span><br><span class="line">    a[j] = x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="comment">// 무작위로 배열 출력</span></span><br><span class="line">&#125;</span><br><span class="line">shuffle([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><p> <code>shuffle()</code>에 배열을 인자로 넘겨 호출한다. 함수안 반복문의 인덱스 값은 내림차순으로 할당된다. <code>Math.random()</code>로 배열 요소의 난수를 구한 뒤 <code>x</code>에 배열의 마지막 요소를 할당하고, 마지막 요소 자리에 난수를 인덱스로 가지는 요소를 대입한다. 난수를 인덱스 값으로 가지는 요소 자리에는 아까 할당해둔 <code>x</code>값을 대입한다. 이 로직을 반복하여 랜덤 배열을 얻게 된다.</p>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/algorithm/">algorithm</category>
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/06/04/algorithm-shuffle-array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[UI] Vanilla JS로 패럴랙스 적용하기</title>
      <link>https://recordboy.github.io/2020/05/23/ui-parallax-scroll/</link>
      <guid>https://recordboy.github.io/2020/05/23/ui-parallax-scroll/</guid>
      <pubDate>Sat, 23 May 2020 04:37:06 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;https://vincentgarreau.com/particles.js/&quot;&gt;particles.js&lt;/a&gt; 적용&lt;/dle&gt;&lt;/li&gt;
&lt;li&gt;백그라운드에 패럴랙스 적용&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://recordboy.github.io/ui/parallax-scroll/&quot;&gt;구현 화면&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/recordboy/ui/tree/master/parallax-scroll&quot;&gt;코드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><del><a href="https://vincentgarreau.com/particles.js/">particles.js</a> 적용</dle></li><li>백그라운드에 패럴랙스 적용</li><li><a href="https://recordboy.github.io/ui/parallax-scroll/">구현 화면</a>  </li><li><a href="https://github.com/recordboy/ui/tree/master/parallax-scroll">코드</a></li></ul><a id="more"></a>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/ui/">ui</category>
      
      
      <category domain="https://recordboy.github.io/tags/vanillajs/">vanillajs</category>
      
      <category domain="https://recordboy.github.io/tags/ui/">ui</category>
      
      
      <comments>https://recordboy.github.io/2020/05/23/ui-parallax-scroll/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[TypeScript] 타입스크립트 타입 선언</title>
      <link>https://recordboy.github.io/2020/05/12/typescript-type-declaration/</link>
      <guid>https://recordboy.github.io/2020/05/12/typescript-type-declaration/</guid>
      <pubDate>Tue, 12 May 2020 01:46:47 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;타입-기본&quot;&gt;&lt;a href=&quot;#타입-기본&quot; class=&quot;headerlink&quot; title=&quot;타입 기본&quot;&gt;&lt;/a&gt;타입 기본&lt;/h2&gt;&lt;h3 id=&quot;타입-지정&quot;&gt;&lt;a href=&quot;#타입-지정&quot; class=&quot;headerlink&quot; title=&quot;타입 지정&quot;&gt;&lt;/a&gt;타입 지정&lt;/h3&gt;&lt;p&gt;타입스크립트는 일반 변수, 매개 변수, 객체 속성 등에&lt;code&gt;: TYPE&lt;/code&gt;과 같은 형태로 타입을 지정할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="타입-기본"><a href="#타입-기본" class="headerlink" title="타입 기본"></a>타입 기본</h2><h3 id="타입-지정"><a href="#타입-지정" class="headerlink" title="타입 지정"></a>타입 지정</h3><p>타입스크립트는 일반 변수, 매개 변수, 객체 속성 등에<code>: TYPE</code>과 같은 형태로 타입을 지정할 수 있다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: string = <span class="string">&#x27;text&#x27;</span>; <span class="comment">// 문자열</span></span><br><span class="line"><span class="keyword">let</span> b: number = <span class="number">0</span>; <span class="comment">// 숫자형</span></span><br><span class="line"><span class="keyword">let</span> c: boolean = <span class="literal">true</span>; <span class="comment">// 논리형</span></span><br><span class="line"><span class="keyword">let</span> d: any = <span class="literal">true</span>; <span class="comment">// 어떤 타입이 올지 모를 때</span></span><br><span class="line"><span class="keyword">let</span> e: string | number = <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 문자열이나 숫자가 올 때</span></span><br></pre></td></tr></table></figure><h3 id="타입-에러"><a href="#타입-에러" class="headerlink" title="타입 에러"></a>타입 에러</h3><p>만약 아래와 같이 타입을 선언하고 다른 타입의 값을 대입하거나 값이 선언된 후에 다른 타입의 값이 대입되면 에러를 발생한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문자열로 선언하고 숫자를 대입하면 에러 발생</span></span><br><span class="line"><span class="keyword">let</span> a: string = <span class="number">0</span>; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 값이 들어가고 이후에 숫자가 대입하면 에러 발생</span></span><br><span class="line"><span class="keyword">let</span> b: string = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">b = <span class="number">1</span>; <span class="comment">// error Type &#x27;1&#x27; is not assignable to type &#x27;string&#x27;.  TS2322</span></span><br></pre></td></tr></table></figure><p>출력창에서 <code>TS2322</code>라는 에러 코드를 볼 수 있으며, 이를 검색하면 쉽게 에러 코드에 대한 정보를 얻을 수 있다.</p><h2 id="타입-선언"><a href="#타입-선언" class="headerlink" title="타입 선언"></a>타입 선언</h2><p>타입스크립트는 ES5, ES6의 상위 확장인 언어이므로 자바스크립트의 타입을 그대로 사용하며, 이외에도 타입스크립트의 고유의 타입이 추가로 제공된다.</p><table><thead><tr><th align="left">Type</th><th align="center">JS</th><th align="center">TS</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="center">◯</td><td align="center">◯</td><td align="left">true와 false</td></tr><tr><td align="left">null</td><td align="center">◯</td><td align="center">◯</td><td align="left">값이 없다는 것을 명시</td></tr><tr><td align="left">undefined</td><td align="center">◯</td><td align="center">◯</td><td align="left">값을 할당하지 않은 변수의 초기값</td></tr><tr><td align="left">number</td><td align="center">◯</td><td align="center">◯</td><td align="left">숫자(정수와 실수, Infinity, NaN)</td></tr><tr><td align="left">string</td><td align="center">◯</td><td align="center">◯</td><td align="left">문자열</td></tr><tr><td align="left">symbol</td><td align="center">◯</td><td align="center">◯</td><td align="left">고유하고 수정 불가능한 데이터 타입이며 주로 객체 프로퍼티들의 식별자로 사용(ES6에서 추가)</td></tr><tr><td align="left">object</td><td align="center">◯</td><td align="center">◯</td><td align="left">객체형(참조형)</td></tr><tr><td align="left">array</td><td align="center"></td><td align="center">◯</td><td align="left">배열</td></tr><tr><td align="left">tuple</td><td align="center"></td><td align="center">◯</td><td align="left">고정된 요소수 만큼의 타입을 미리 선언후 배열을 표현</td></tr><tr><td align="left">enum</td><td align="center"></td><td align="center">◯</td><td align="left">열거형. 숫자값 집합에 이름을 지정한 것</td></tr><tr><td align="left">any</td><td align="center"></td><td align="center">◯</td><td align="left">타입 추론(type inference)할 수 없거나 타입 체크가 필요없는 변수에 사용, var 키워드로 선언한 변수와 같이 어떤 타입의 값이라도 할당 가능</td></tr><tr><td align="left">void</td><td align="center"></td><td align="center">◯</td><td align="left">일반적으로 함수에서 반환값이 없을 경우 사용</td></tr><tr><td align="left">never</td><td align="center"></td><td align="center">◯</td><td align="left">결코 발생하지 않는 값</td></tr></tbody></table><h3 id="논리형-Boolean"><a href="#논리형-Boolean" class="headerlink" title="논리형(Boolean)"></a>논리형(Boolean)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool01: boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> bool02: boolean = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="숫자형-Number"><a href="#숫자형-Number" class="headerlink" title="숫자형(Number)"></a>숫자형(Number)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num01: number = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> num02: number = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">let</span> num03: number = <span class="literal">NaN</span>;</span><br></pre></td></tr></table></figure><h3 id="문자열-String"><a href="#문자열-String" class="headerlink" title="문자열(String)"></a>문자열(String)</h3><p>ES6의 템플릿 문자열도 지원한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str01: string = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str02: string = <span class="string">`my name is <span class="subst">$&#123;val&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="배열-Array"><a href="#배열-Array" class="headerlink" title="배열(Array)"></a>배열(Array)</h3><p>배열은 아래와 같이 두가지 방법으로 타입을 선언할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문자열만 가지는 배열</span></span><br><span class="line"><span class="keyword">let</span> arr01: string[] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr02: <span class="built_in">Array</span>&lt;string&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자형만 가지는 배열</span></span><br><span class="line"><span class="keyword">let</span> arr03: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr04: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union 타입(다중 타입)의 문자열과 숫자를 동시에 가지는 배열</span></span><br><span class="line"><span class="keyword">let</span> arr05: (string | number)[] = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr06: <span class="built_in">Array</span>&lt;string | number&gt; = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열이 가지는 값의 타입을 추측할 수 없을 때 any를 사용할 수 있다.</span></span><br><span class="line"><span class="keyword">let</span> arr07: (any)[] = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr08: <span class="built_in">Array</span>&lt;any&gt; = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="함수-Function"><a href="#함수-Function" class="headerlink" title="함수(Function)"></a>함수(Function)</h3><p>함수는 파라미터에 각각 타입을 선언해 주며, 파라미터 우측에는 해당 함수의 리턴값 타입도 선언해 주면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>리턴값을 숫자형으로 선언하였는데 다른 값이 리턴된다면 역시 에러가 난다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="객체-Object"><a href="#객체-Object" class="headerlink" title="객체(Object)"></a>객체(Object)</h3><p>기본적으로 typeof 연산자가 <code>object</code>로 반환하는 모든 타입을 나타낸다. 여러 타입의 상위 타입이기 때문에 그다지 유용하지 않다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr: object = [];</span><br><span class="line"><span class="keyword">let</span> func: object = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> date: object = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>보다 정확하게 타입 지정을 하기 위해 아래와 같이 객체 속성들에 대한 타입을 개별적으로 지정할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125; = &#123;</span><br><span class="line">  name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123;name: &quot;a&quot;, age: 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="튜플-Tuple"><a href="#튜플-Tuple" class="headerlink" title="튜플(Tuple)"></a>튜플(Tuple)</h3><p>배열과 유사하다. 차이점은 정해진 타입의 요소 개수 만큼의 타입을 미리 선언후 배열을 표현한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [string, number];</span><br><span class="line">tuple = [<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(tuple); <span class="comment">// [&quot;a&quot;, 0]</span></span><br></pre></td></tr></table></figure><p>정해진 요소의 순서 및 개수가 다르면 오류를 출력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tuple: [string, number];</span><br><span class="line">tuple = [<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>]; <span class="comment">// error</span></span><br><span class="line">tuple = [<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>아래와 같이 데이터를 개별 변수로 지정하지 않고, 단일 튜플 타입으로 지정해 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기존 변수</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age: number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 튜플</span></span><br><span class="line"><span class="keyword">let</span> user: [string, number] = [<span class="string">&#x27;a&#x27;</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// [&quot;a&quot;, 20]</span></span><br></pre></td></tr></table></figure><p>값으로 타입을 대신할 수도 있다. 처음 선언할 때의 값과 다른 값이 할당 되면 에러가 출력된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [<span class="string">&#x27;a&#x27;</span>, number];</span><br><span class="line">user = [<span class="string">&#x27;a&#x27;</span>, <span class="number">20</span>]; <span class="comment">// [&quot;a&quot;, 20]</span></span><br><span class="line">user = [<span class="string">&#x27;a&#x27;</span>, <span class="number">30</span>]; <span class="comment">// [&quot;a&quot;, 30]</span></span><br><span class="line">user = [<span class="string">&#x27;b&#x27;</span>, <span class="number">30</span>]; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>튜플은 정해진 타입과 고정된 길이의 배열이지만, 값을 할당할 때만 해당된다. push나 splice같은 메서드를 통해 값을 넣는건 막을 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [string, number];</span><br><span class="line">user = [<span class="string">&#x27;a&#x27;</span>, <span class="number">20</span>]</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// [&quot;a&quot;, 20]</span></span><br><span class="line">user.push(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// [&quot;a&quot;, 20, 30]</span></span><br></pre></td></tr></table></figure><h3 id="열거형-Enum"><a href="#열거형-Enum" class="headerlink" title="열거형(Enum)"></a>열거형(Enum)</h3><p>숫자 혹은 문자열 값 집합에 이름을 부여할 수 있는 타입으로, 값의 종류가 일정한 범위로 정해져 있는 경우 유용하다. 기본적으로 0부터 시작하며, 값은 1씩 증가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enum obj &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">  c,</span><br><span class="line">  d,</span><br><span class="line">  e</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// 0: &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1: &quot;b&quot;</span></span><br><span class="line"><span class="comment">// 2: &quot;c&quot;</span></span><br><span class="line"><span class="comment">// 3: &quot;d&quot;</span></span><br><span class="line"><span class="comment">// 4: &quot;e&quot;</span></span><br><span class="line"><span class="comment">// a: 0</span></span><br><span class="line"><span class="comment">// b: 1</span></span><br><span class="line"><span class="comment">// c: 2</span></span><br><span class="line"><span class="comment">// d: 3</span></span><br><span class="line"><span class="comment">// e: 4</span></span><br></pre></td></tr></table></figure><p>수동으로 값을 변경할 수 있으며, 변경한 부분부터 다시 1씩 증가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enum obj &#123;</span><br><span class="line">  a,</span><br><span class="line">  b = <span class="number">10</span>,</span><br><span class="line">  c,</span><br><span class="line">  d,</span><br><span class="line">  e</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.c); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><h3 id="모든-타입-Any"><a href="#모든-타입-Any" class="headerlink" title="모든 타입(Any)"></a>모든 타입(Any)</h3><p>Any는 모든 타입을 의미하며, 기존의 자바스크립트 변수와 마찬가지로 어떠한 타입의 값도 할당할 수 있다. 불가피하게 타입을 선언할 수 없는 경우, 유용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> any:any = <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line">any = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(any); <span class="comment">// 0</span></span><br><span class="line">any = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(any); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="빈-타입-Void"><a href="#빈-타입-Void" class="headerlink" title="빈 타입(Void)"></a>빈 타입(Void)</h3><p>빈 타입인 Void는 리턴값이 없는 함수에서 사용된다. 리턴값의 타입을 명시하는 곳에 작성하며, 리턴값이 없는 함수는 <code>undefined</code>를 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(hello()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>Never 타입은 절대 발생할 수 없는 타입을 나타낸다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;오류 발생!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(errorMsg()); <span class="comment">// Uncaught Error: 오류 발생!</span></span><br></pre></td></tr></table></figure><p><code>errorMsgd</code> 함수는 오류를 발생시키기 때문에 <code>null</code>, <code>undefined</code>를 포함한 어떠한 값도 반환하지 않는다. 이럴 경우 never 타입을 사용하면 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://heropy.blog/2020/01/27/typescript/">한눈에 보는 타입스크립트(updated)</a><br><a href="https://poiemaweb.com/typescript-typing">정적 타이핑</a><br><a href="https://velog.io/@velopert/typescript-basics">타입스크립트 기초 연습</a><br><a href="https://typescript-kr.github.io/">TypeScript-Handbook 한글 문서</a><br><a href="https://ahnheejong.gitbook.io/ts-for-jsdev/03-basic-grammar/primitive-types">3.1 기본 타입</a><br><a href="https://velog.io/@velopert/typescript-basics">타입스크립트 기초 연습</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/typescript/">typescript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/typescript/">typescript</category>
      
      
      <comments>https://recordboy.github.io/2020/05/12/typescript-type-declaration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[TypeScript] 타입스크립트 시작하기</title>
      <link>https://recordboy.github.io/2020/05/09/typescript-init/</link>
      <guid>https://recordboy.github.io/2020/05/09/typescript-init/</guid>
      <pubDate>Sat, 09 May 2020 07:36:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;타입스크립트(TypeScript)는 마이크로소프트에서 개발, 유지하고 있으며 엄격한 문법을 지원한다. 자바스크립트 엔진을 사용하며, 자바스크립트의 상위 집합으로 ECMA의 최신 표준을 지원한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>타입스크립트(TypeScript)는 마이크로소프트에서 개발, 유지하고 있으며 엄격한 문법을 지원한다. 자바스크립트 엔진을 사용하며, 자바스크립트의 상위 집합으로 ECMA의 최신 표준을 지원한다.</p><a id="more"></a><h2 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h2><h3 id="정적-타입-언어-static-type-language"><a href="#정적-타입-언어-static-type-language" class="headerlink" title="정적 타입 언어(static type language)"></a>정적 타입 언어(static type language)</h3><p>C#과 Java같은 정적 타입 언어들에서 사용하는 타입 시스템은 높은 가독성과 코드 품질 등을 제공할 수 있고, 런타임이 아닌 컴파일 환경에서 에러가 발생해 치명적인 오류들을 더욱 쉽게 잡아낼 수 있다.</p><p>기존의 자바스크립트는 타입 시스템이 없는 동적 프로그래밍 언어로, 변수에 문자열, 숫자, 불리언 등 여러 타입의 값을 가질 수 있다. 이는 약한 타입의 언어라고 하며, 비교적 유연하게 개발할 수 있는 환경을 제공하지만, 타입 안정성이 보장되지 않아 런타임 환경에서 쉽게 에러가 발생할 수 있는 단점을 가진다. </p><p>타입스크립트는 자바스크립트에 타입 시스템을 적용하여 대부분의 에러를 컴파일 환경에서 체크할 수 있다.</p><h2 id="설치하기"><a href="#설치하기" class="headerlink" title="설치하기"></a>설치하기</h2><p>타입스크립트를 설치하는 방법에는 크게 두가지가 있다.</p><ul><li>npm을 이용한 설치</li><li>TypeScript의 Visual Studio 플러그인 설치</li></ul><p>여기서는 npm을 이용하여 설치하겠다. 우선 전역에 타입스크립트를 설치해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g typescript</span><br></pre></td></tr></table></figure><p>기존의 자바스크립트의 확장자가 <code>.js</code>이였다면 타입스크립트는 <code>.ts</code>라는 확장자를 가진다. 타입스크립트 작성 후 컴파일러를 통해 자바스크립트 파일로 변환되어 사용하게 된다.</p><h3 id="파일-생성하기"><a href="#파일-생성하기" class="headerlink" title="파일 생성하기"></a>파일 생성하기</h3><p>원하는 디렉토리로 이동하여 타입스크립트 파일을 하나 만들어준다. 여기서는 <code>app.ts</code>로 만들겠다. 만든 뒤 아래 처럼 코드를 입력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span> + msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> txt = <span class="string">&#x27;world&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="컴파일-하기"><a href="#컴파일-하기" class="headerlink" title="컴파일 하기"></a>컴파일 하기</h3><p>이제 터미널로 가서 아래 명령어를 실행 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc app.ts</span><br></pre></td></tr></table></figure><p><code>app.ts</code> 파일을 컴파일 하여 아래처럼 <code>app.js</code> 파일이 생성되었을 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span> + msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">&#x27;world&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="로컬에서-작업-하기"><a href="#로컬에서-작업-하기" class="headerlink" title="로컬에서 작업 하기"></a>로컬에서 작업 하기</h2><p>로컬 환경에서 <a href="https://ko.parceljs.org/getting_started.html">Parcel 번들러</a>를 이용하면 작업을 빠르게 테스트를 할 수 있다.</p><h3 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h3><p>Parcel 전역 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g parcel-bundler</span><br></pre></td></tr></table></figure><p>프로젝트 파일 생성 및 패키지 파일 생성 후 패키지 및 Parcel를 설치해 준다. 프로젝트 폴더명은 <code>app</code>으로 하겠다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir app</span><br><span class="line">$ cd app</span><br><span class="line">$ npm init -y</span><br><span class="line">$ npm install -D typescript parcel-bundler</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code> 파일을 생성하고 아래 옵션을 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.ts</code> 파일을 생성하고 아래 코드를 입력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: number, b: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum: number = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p><code>index.html</code> 파일을 생성하고 <code>main.ts</code> 파일을 연결한다. Parcel 번들러가 빌드시에 자동으로 타입스크립트를 컴파일 할 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>typescript<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Parcel 번들러로 빌드해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx parcel index.html</span><br></pre></td></tr></table></figure><p><code>http://localhost:1234</code>에서 결과물을 확인할 수 있으며, 이제 코드를 수정할 때마다 타입스크립트가 자동으로 컴파일될 것이다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://heropy.blog/2020/01/27/typescript/">한눈에 보는 타입스크립트(updated)</a><br><a href="https://typescript-kr.github.io/">TypeScript-Handbook 한글 문서</a><br><a href="https://hyunseob.github.io/2018/08/12/do-you-need-to-use-ts/">타입스크립트, 써야할까?</a>  </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/typescript/">typescript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/typescript/">typescript</category>
      
      
      <comments>https://recordboy.github.io/2020/05/09/typescript-init/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Economy] 보험 상품 개발 프로세스 및 보험 용어</title>
      <link>https://recordboy.github.io/2020/05/06/economy-insurance-terms/</link>
      <guid>https://recordboy.github.io/2020/05/06/economy-insurance-terms/</guid>
      <pubDate>Wed, 06 May 2020 04:37:46 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;보험-개요&quot;&gt;&lt;a href=&quot;#보험-개요&quot; class=&quot;headerlink&quot; title=&quot;보험 개요&quot;&gt;&lt;/a&gt;보험 개요&lt;/h2&gt;&lt;p&gt;보험은 질병, 재해, 사망 등 각종 사고와 같은 위험에 대비한 보장을 받기 위하여 가입하는 금융상품이다. 보험상품은 보험사가 만든다고 무조건 출시하는 것이 아니고, 보험개발원의 검증과 금융감독원의 승인이 필수적이다. 보험개발원은 보험요율의 산출과 검증, 보험상품의 개발 등을 하는 곳이다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="보험-개요"><a href="#보험-개요" class="headerlink" title="보험 개요"></a>보험 개요</h2><p>보험은 질병, 재해, 사망 등 각종 사고와 같은 위험에 대비한 보장을 받기 위하여 가입하는 금융상품이다. 보험상품은 보험사가 만든다고 무조건 출시하는 것이 아니고, 보험개발원의 검증과 금융감독원의 승인이 필수적이다. 보험개발원은 보험요율의 산출과 검증, 보험상품의 개발 등을 하는 곳이다. </p><a id="more"></a><h3 id="보험-개발"><a href="#보험-개발" class="headerlink" title="보험 개발"></a>보험 개발</h3><h4 id="시장조사-상품-안-제안"><a href="#시장조사-상품-안-제안" class="headerlink" title="시장조사, 상품 안 제안"></a>시장조사, 상품 안 제안</h4><p>고객의 니즈, 시장성 수익성을 고려한 상품 안 제안</p><h4 id="상품-안-확정-및-개발에-대한-승인"><a href="#상품-안-확정-및-개발에-대한-승인" class="headerlink" title="상품 안 확정 및 개발에 대한 승인"></a>상품 안 확정 및 개발에 대한 승인</h4><p>상품개발 위원회를 통해 상품 안 논의, 확정 및 개발 착수에 대한 승인 진행</p><h4 id="상품-개발"><a href="#상품-개발" class="headerlink" title="상품 개발"></a>상품 개발</h4><p>위험을 개발, 외부 기관 검증자료 준비</p><h4 id="상품-승인"><a href="#상품-승인" class="headerlink" title="상품 승인"></a>상품 승인</h4><p>보험개발원 검증 및 금융감독원 승인, 선임계리사 검증</p><h4 id="상품-출시-준비"><a href="#상품-출시-준비" class="headerlink" title="상품 출시 준비"></a>상품 출시 준비</h4><p>상품판매에 필요한 시스템 준비, 판매자 교육 진행</p><h4 id="상품공시-판매-모니터링"><a href="#상품공시-판매-모니터링" class="headerlink" title="상품공시 판매 모니터링"></a>상품공시 판매 모니터링</h4><p>홈페이지 공시 (상품요약서, 약관, 사업 방법서 별지), 완전 판매 관리</p><h3 id="보험-판매"><a href="#보험-판매" class="headerlink" title="보험 판매"></a>보험 판매</h3><p>보험 상품에 대한 금융감독원의 승인이 이루어지면, 대면 및 비대면 방식으로 상품 판매가 시행된다.</p><ul><li>대면: 창구에서 판매</li><li>비대면: 홈페이지, 모바일, 텔레마케팅으로 판매</li></ul><p>텔레마케팅 채널은 전화를 이용하여 판매하는 경우로써 크게 두가지가 있다.</p><ul><li>인바운드(Inbound): 보험사 콜센터로 걸려온 고객의 전화를 받아 홍보하는 것</li><li>아웃바운드(Outbound): 보험사 콜센터 직원이 고객에게 전화를 걸어 홍보하는 것</li></ul><p>각 채널을 통해 보험 상품을 고객에게 판매하였다면, 보험 상품에 대한 계약을 하게 되는데 이를 <code>청약</code>이라고 한다. 청약이 이루어지기 전에 보험사 내부에서는 <code>언더라이팅(Underwriting)</code> 과정을 거치게 되는데, 이는 언더라이터(보험 계약의 인수 여부를 확인하는 사람)들이 고객이 작성한 청약서의 고지내용이나 건강진단 결과 등을 토대로, 최종 심사 과정을 진행하는 것이다.</p><p>언더라이팅 과정이 통과되고, 초회 보험료(제 1회 보험료)를 납입하면 이 때부터 효력이 발생하게 되며, 이후 입금하는 보험료를 계속 보험료라고 한다. 이후 계약자는 개인정보 변경, 조건 변경 등 다양한 이유로 계약 조건을 변경할 것이고, 중도해지 등을 하지 않으면 아래 경우로 보험금을 지급받을 수 있다.</p><ul><li>만기 &gt; 지금</li><li>사고(클레임) &gt; 심사 &gt; 계산 &gt; 지급</li></ul><h2 id="보험-종류"><a href="#보험-종류" class="headerlink" title="보험 종류"></a>보험 종류</h2><h3 id="인-人-보험과-물-物-보험"><a href="#인-人-보험과-물-物-보험" class="headerlink" title="인(人)보험과 물(物)보험"></a>인(人)보험과 물(物)보험</h3><ul><li>인보험: 사람에 관하여 발생하는 사고에 대한 보험</li><li>물보험: 물건 기타의 재산에 관하여 발생하는 사고에 대한 보험</li></ul><h3 id="생명보험-손해보험-제3보험"><a href="#생명보험-손해보험-제3보험" class="headerlink" title="생명보험, 손해보험, 제3보험"></a>생명보험, 손해보험, 제3보험</h3><ul><li>생명보험: 생명/신체에 대한 보장</li><li>손해보험: 재산에 대한 보장</li><li>제3보험: 생명보험이나 손해보험 중 어느 한 보험으로 분류하기 어려운 보험</li></ul><h3 id="보장성보험-저축성보험"><a href="#보장성보험-저축성보험" class="headerlink" title="보장성보험, 저축성보험"></a>보장성보험, 저축성보험</h3><ul><li>보장성보험: 사망 · 상해 · 입원 · 생존 등과 같은 사람의 생명이나, 재산 피해와 관련하여 보험사고가 발생했을 때 피보험자에게 약속된 급부금을 제공하는 보험</li><li>저축성보험: 목돈마련이나 노후생활자금을 대비해주는 보험상품으로 납입한 보험료보다 만기시 지급되는 급부금이 더 많은 보험</li></ul><p><em>추후 추가 예정</em></p><h2 id="보험-용어"><a href="#보험-용어" class="headerlink" title="보험 용어"></a>보험 용어</h2><h3 id="보험"><a href="#보험" class="headerlink" title="보험"></a>보험</h3><p>보험같은 종류의 사고를 당할 위험성이 있는 많은 사람이 미리 금전을 각출하여 공통준비재산을 형성하고, 사고를 당한 사람이 이것으로부터 재산적 급여를 받는 경제제도.</p><h3 id="보험료"><a href="#보험료" class="headerlink" title="보험료"></a>보험료</h3><p>보험계약의 당사자 한쪽인 보험계약자가 보험계약에 의거하여 보험자에게 지급하는 요금.</p><h3 id="보험금"><a href="#보험금" class="headerlink" title="보험금"></a>보험금</h3><p>보험사고(생명보험인 경우) 또는 소정의 손해(손해보험인 경우)가 발생한 때에 보험자가 계약자에게 지급하는 금전.</p><h3 id="보험자"><a href="#보험자" class="headerlink" title="보험자"></a>보험자</h3><p>흔히 보험사를 말하며, 보험자는 수익자에게 보험금을 지급할 의무가 있다.</p><h3 id="계약자"><a href="#계약자" class="headerlink" title="계약자"></a>계약자</h3><p>말그대로 보험을 가입한 사람을 말하며, 보험료를 납부할 의무가 있다.</p><h3 id="피보험자"><a href="#피보험자" class="headerlink" title="피보험자"></a>피보험자</h3><p>보험을 통해 보호받을 보험 대상자를 말하고, 생명보험에서는 <code>피보험자</code>, 손해보험에서는 <code>담보물</code>, <code>목적물</code> 이라고 한다. 피보험자는 여러명 일 수 있다. 부부보험, 가족보험처럼 피보험자를 여러 명 지정할 수 있다.</p><h4 id="주피보험자"><a href="#주피보험자" class="headerlink" title="주피보험자"></a>주피보험자</h4><p>보험의 주대상(1명)</p><h4 id="종피보험자"><a href="#종피보험자" class="headerlink" title="종피보험자"></a>종피보험자</h4><p>함께 가입한 대상(여러명)</p><h3 id="수익자"><a href="#수익자" class="headerlink" title="수익자"></a>수익자</h3><p>피보험자에게 보험 사고가 발생 시 보험금을 받을 수 있는 사람을 말하며, 계약자가 따로 지정하지 않으면 법정 상속인이 수익자가 된다.</p><h3 id="계피-동일"><a href="#계피-동일" class="headerlink" title="계피 동일"></a>계피 동일</h3><p>계약자와 피보험자가 같은 경우</p><h3 id="계피-상이"><a href="#계피-상이" class="headerlink" title="계피 상이"></a>계피 상이</h3><p>계약자와 피보험자가 다를 경우</p><h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>보험 시작일</p><h3 id="종기"><a href="#종기" class="headerlink" title="종기"></a>종기</h3><p>보험 종료일</p><h3 id="만기"><a href="#만기" class="headerlink" title="만기"></a>만기</h3><p>정해진 보험기간이 다 경과하여 끝나는 것</p><h3 id="갱신"><a href="#갱신" class="headerlink" title="갱신"></a>갱신</h3><p>보험 기간이 종료되어 다시 기간을 연장하는 것</p><h3 id="보험-개발원"><a href="#보험-개발원" class="headerlink" title="보험 개발원"></a>보험 개발원</h3><p>보험요율의 산출과 검증, 보험상품의 개발 등을 하는 기관으로써 개인의 보험 가입 정보 등 보험료 계산을 위한 정보를 가지고 있다.</p><h3 id="담보-보장"><a href="#담보-보장" class="headerlink" title="담보, 보장"></a>담보, 보장</h3><p>보험이 보장해 주는 것</p><h3 id="특약"><a href="#특약" class="headerlink" title="특약"></a>특약</h3><p>특별보험약관의 줄임말이며, 주 계약의 보장 내용 보완을 위해 주 계약에 부가해서 판매하는 것, 필요하거나 부족한 보장을 자유롭게 선택택하여 가입 가능</p><h3 id="플랜"><a href="#플랜" class="headerlink" title="플랜"></a>플랜</h3><p>미리 짜여진 담보 조합(예: 기본플랜, 표준플랜, 고급플랜)</p><h3 id="고지사항"><a href="#고지사항" class="headerlink" title="고지사항"></a>고지사항</h3><p>보험 계약 전에 고객에게 알려야할 중요한 사항</p><h3 id="질병고지"><a href="#질병고지" class="headerlink" title="질병고지"></a>질병고지</h3><p>본인의 질병에 대해 알릴 사항</p><h3 id="청약"><a href="#청약" class="headerlink" title="청약"></a>청약</h3><p>보험 계약자가 보험 상품에 대한 가입을 위해 의사 표시를 하는 것</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://gbsb.tistory.com/411?category=734611">헷갈리는 보험 용어 알아두기 1편</a><br><a href="http://www.doopedia.co.kr/doopedia/master/master.do?_method=view&MAS_IDX=101013000753005">보험[insurance,保險]</a><br><a href="https://terms.naver.com/entry.nhn?docId=3431579&cid=58438&categoryId=58438">보험상품</a><br><a href="https://m.aig.co.kr/wm/content.html?contentId=DPWMS331">상품개발 프로세스</a>  </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/economy/">economy</category>
      
      <category domain="https://recordboy.github.io/categories/economy/insurance/">insurance</category>
      
      
      <category domain="https://recordboy.github.io/tags/economy/">economy</category>
      
      <category domain="https://recordboy.github.io/tags/insurance/">insurance</category>
      
      
      <comments>https://recordboy.github.io/2020/05/06/economy-insurance-terms/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 비구조화 할당(Destructuring Assignment)</title>
      <link>https://recordboy.github.io/2020/04/30/javascript-es6-destructuring-assignment/</link>
      <guid>https://recordboy.github.io/2020/04/30/javascript-es6-destructuring-assignment/</guid>
      <pubDate>Thu, 30 Apr 2020 11:51:12 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;ECMAScript6(2015)에서 새로 추가된 비구조화 할당(Destructuring Assignment)이란 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식(expression)이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>ECMAScript6(2015)에서 새로 추가된 비구조화 할당(Destructuring Assignment)이란 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트 표현식(expression)이다.</p><a id="more"></a><h2 id="기본-문법-배열"><a href="#기본-문법-배열" class="headerlink" title="기본 문법(배열)"></a>기본 문법(배열)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animalList = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> cat = animalList[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> dog = animalList[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> tiger = animalList[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>animalList는 “CAT”, “DOG”, “TIGER” 값을 가지고 있는 배열이다. 이 배열의 값을 각각 변수에 할당 하려면 위처럼 각각 하나씩 지정해 줘야 한다. 번거로운 작업이며, 코드도 복잡해보이는 단점이 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>비구조화 할당을 이용하면 위처럼 간단하게 작성할 수 있다. 좌항이 호출될 변수명 집합, 우항이 할당할 값이다. 좌항의 각 요소에는 같은 index를 가지는 배열값이 할당된다.</p><h3 id="나머지-패턴"><a href="#나머지-패턴" class="headerlink" title="나머지 패턴"></a>나머지 패턴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, ...rest] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>, <span class="string">&quot;TIGER&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [&quot;DOG&quot;, &quot;TIGER&quot;]</span></span><br></pre></td></tr></table></figure><p>전개연산자(<code>...</code>)를 활용하면 좌항에서 명시적으로 할당되지 않는 나머지 배열 값을 사용할 수 있다.</p><h2 id="기본-문법-객체"><a href="#기본-문법-객체" class="headerlink" title="기본 문법(객체)"></a>기본 문법(객체)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;</span><br><span class="line">  cat: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  dog: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  tiger: <span class="string">&quot;TIGER&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> cat = animals.cat;</span><br><span class="line"><span class="keyword">const</span> dog = animals.dog;</span><br><span class="line"><span class="keyword">const</span> tiger = animals.tiger;</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>객체도 배열과 마찬가지로 일일히 값을 따로 넣어주려면 번거롭다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cat, dog, tiger &#125; = &#123;</span><br><span class="line">  cat: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  dog: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  tiger: <span class="string">&quot;TIGER&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>위와 같이 작성하면 비구조화 할당을 수행하며, 배열의 경우 좌항의 index값에 값에 할당되었다면, 객체는 같은 key에 있는 값이 담긴다.</p><h3 id="나머지-패턴-1"><a href="#나머지-패턴-1" class="headerlink" title="나머지 패턴"></a>나머지 패턴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cat, ...rest &#125; = &#123;</span><br><span class="line">  cat: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  dog: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  tiger: <span class="string">&quot;TIGER&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;dog: &quot;DOG&quot;, tiger: &quot;TIGER&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>배열과 마찬가지로 객체도 나머지 패턴이 있다.</p><h3 id="원래의-key-대신-다른-변수명-사용"><a href="#원래의-key-대신-다른-변수명-사용" class="headerlink" title="원래의 key 대신 다른 변수명 사용"></a>원래의 key 대신 다른 변수명 사용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">cat</span>: catName, <span class="attr">dog</span>: dogName, ...rest &#125; = &#123;</span><br><span class="line">  cat: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  dog: <span class="string">&quot;DOG&quot;</span>,</span><br><span class="line">  tiger: <span class="string">&quot;TIGER&quot;</span>,</span><br><span class="line">  monkey: <span class="string">&quot;MONKEY&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(catName); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dogName); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;tiger: &quot;TIGER&quot;, monkey: &quot;MONKEY&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>좌항의 변수에 다른이름으로 사용할 변수명을 대입하면 되며, 나머지 값을 뜻하하는 전개연산자는 우항의 key에 영향을 받지 않으므로 <code>...rest: restName</code>이라는 표현식은 무의미 하며, 에러가 난다.</p><h3 id="우항의-key-값이-변수명으로-사용-불가-경우"><a href="#우항의-key-값이-변수명으로-사용-불가-경우" class="headerlink" title="우항의 key 값이 변수명으로 사용 불가 경우"></a>우항의 key 값이 변수명으로 사용 불가 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="string">&#x27;cat-name&#x27;</span>, <span class="string">&#x27;dog name&#x27;</span> &#125; = &#123;</span><br><span class="line">  <span class="string">&#x27;cat-name&#x27;</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;dog name&#x27;</span>: <span class="string">&quot;DOG&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>좌항으로 전달 받는 key 값이 <code>&#39;cat-name&#39;</code>같이 사용 불가능한 문자열이 있는 경우 에러를 호출한다. 이럴 경우는 아래와 같은 방식으로 비구조화 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;dog name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="string">&#x27;cat-name&#x27;</span>: cat_name, [key]: dog_name &#125; = &#123;</span><br><span class="line">  <span class="string">&#x27;cat-name&#x27;</span>: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  <span class="string">&#x27;dog name&#x27;</span>: <span class="string">&quot;DOG&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cat_name); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog_name); <span class="comment">// DOG</span></span><br></pre></td></tr></table></figure><p>다만 이 경우 <code>&#39;cat-name&#39;</code>과 매칭할 변수명 <code>cat_name</code>을 작성하지 않으면 에러가 발생한다.</p><h3 id="객체-비구조화시-변수-선언-키워드가-없는-경우"><a href="#객체-비구조화시-변수-선언-키워드가-없는-경우" class="headerlink" title="객체 비구조화시 변수 선언 키워드가 없는 경우"></a>객체 비구조화시 변수 선언 키워드가 없는 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cat,</span><br><span class="line">    dog;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; cat, dog &#125; = &#123; cat: &quot;CAT&quot;, dog: &quot;DOG&quot; &#125; // error</span></span><br><span class="line">(&#123; cat, dog &#125; = &#123; <span class="attr">cat</span>: <span class="string">&quot;CAT&quot;</span>, <span class="attr">dog</span>: <span class="string">&quot;DOG&quot;</span> &#125;) <span class="comment">// 괄호로 감싸줘야 함</span></span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br></pre></td></tr></table></figure><p>객체 비구조화시 변수 선언 키워드가 없을 경우 소괄호를 사용하여 감싸줘야 한다. 감싸주지 않으면 에러가 난다.</p><h2 id="기본값-할당"><a href="#기본값-할당" class="headerlink" title="기본값 할당"></a>기본값 할당</h2><h3 id="배열의-기본값-할당"><a href="#배열의-기본값-할당" class="headerlink" title="배열의 기본값 할당"></a>배열의 기본값 할당</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>비구조화의 범위를 벗어나는 값 할당을 시도하면 <code>undefined</code>를 반환한다. 이럴 경우를 방지하기 위해 아래처럼 호출될 변수명에 기본값을 할당할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [cat, dog, tiger = <span class="string">&quot;TIGER&quot;</span>] = [<span class="string">&quot;CAT&quot;</span>, <span class="string">&quot;DOG&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><h3 id="객체의-기본값-할당"><a href="#객체의-기본값-할당" class="headerlink" title="객체의 기본값 할당"></a>객체의 기본값 할당</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cat, dog, tiger = <span class="string">&quot;TIGER&quot;</span> &#125; = &#123;</span><br><span class="line">  cat: <span class="string">&quot;CAT&quot;</span>,</span><br><span class="line">  dog: <span class="string">&quot;DOG&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(cat); <span class="comment">// CAT</span></span><br><span class="line"><span class="built_in">console</span>.log(dog); <span class="comment">// DOG</span></span><br><span class="line"><span class="built_in">console</span>.log(tiger); <span class="comment">// TIGER</span></span><br></pre></td></tr></table></figure><p>배열과 마찬가지로 객체도 기본값을 지원한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">monkey</span>: monkey_name = <span class="string">&#x27;MONKEY&#x27;</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(monkey_name); <span class="comment">// MONKEY</span></span><br></pre></td></tr></table></figure><p>위 코드처럼 객체의 key에 새로운 변수명을 할당하는 방식에도 기본 기본값 할당을 사용할 수 있다.</p><h2 id="복사"><a href="#복사" class="headerlink" title="복사"></a>복사</h2><p>전개연산자를 사용하여 배열, 객체의 깊은 복사를 할 수 있다.</p><h3 id="배열의-깊은-복사"><a href="#배열의-깊은-복사" class="headerlink" title="배열의 깊은 복사"></a>배열의 깊은 복사</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> copy1 = arr;</span><br><span class="line"><span class="keyword">let</span> [...copy2] = arr;</span><br><span class="line"><span class="keyword">let</span> copy3 = [...arr];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ &#x27;String&#x27;, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(copy1); <span class="comment">// [ &#x27;String&#x27;, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(copy2); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(copy3); <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><p>얕은 복사인 <code>copy1</code>은 <code>arr</code>를 참조하기 때문에 0번째 요소가 같이 수정되었지만, 전개연산자를 사용한 <code>copy2</code>와 <code>copy3</code>은 깊은 복사가 되었기 때문에 0번째 요소가 변경되지 않았다.</p><h3 id="객체의-깊은-복사"><a href="#객체의-깊은-복사" class="headerlink" title="객체의 깊은 복사"></a>객체의 깊은 복사</h3><p>객체 역시 전개연산자로 깊은 복사를 사용할 수 있다. 무엇보다 강력한 점은 복사와 함께 새로운 값을 할당할 수 있다는 점이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prevState = &#123;</span><br><span class="line">  name: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  birth: <span class="string">&quot;1995-01-01&quot;</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  ...prevState,</span><br><span class="line">  age: <span class="number">26</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state); <span class="comment">// &#123;name: &quot;foo&quot;, birth: &quot;1995-01-01&quot;, age: 26&#125;</span></span><br></pre></td></tr></table></figure><p>위와 같이 <code>...prevState</code>를 사용하여 기존 객체를 복사함과 동시에 <code>age</code>에 새로운 값을 할당했다. 리액트의 props나 state처럼 이전 정보를 이용하는 경우 유용하게 사용할 수 있다.</p><h2 id="함수에서의-비구조화-할당"><a href="#함수에서의-비구조화-할당" class="headerlink" title="함수에서의 비구조화 할당"></a>함수에서의 비구조화 할당</h2><p>함수의 파라미터 부분에서도 비구조화 할당을 사용할 수 있다. 이러한 문법은 특히 API 응답값을 처리하는데에 유용하게 사용된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderUser</span>(<span class="params">&#123;name, age, addr&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(addr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>:<span class="string">&#x27;kor&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>:<span class="string">&#x27;usa&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;miko&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>:<span class="string">&#x27;jp&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users.map(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">  renderUser(user);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// kim</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// kor</span></span><br><span class="line"><span class="comment">// joe</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// usa</span></span><br><span class="line"><span class="comment">// miko</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// jp</span></span><br></pre></td></tr></table></figure><p><code>users</code> 배열의 <code>map</code> 메서드로 인하여 <code>renderUser</code> 함수에 <code>users</code>의 객체가 각각 전달된다. 각 객체의 key 값이 <code>renderUser</code>함수의 파라미터 받는 부분에서 비구조화 할당을 받았기 때문에 함수 내에서 객체의 key 값을 각각 가져올 수 있게 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>:<span class="string">&#x27;kor&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>:<span class="string">&#x27;usa&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;miko&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>:<span class="string">&#x27;jp&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">users.map(<span class="function">(<span class="params">&#123;name, age, addr&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="built_in">console</span>.log(addr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>마찬가지로 위처럼 <code>map</code> 메서드의 파라미터에도 바로 사용할 수 있다.</p><h2 id="for-of-문을-이용한-비구조화-할당"><a href="#for-of-문을-이용한-비구조화-할당" class="headerlink" title="for of 문을 이용한 비구조화 할당"></a>for of 문을 이용한 비구조화 할당</h2><p>배열 내 객체들은 for of 문을 사용하여 비구조화 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;kim&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">addr</span>:<span class="string">&#x27;kor&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>:<span class="string">&#x27;usa&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;miko&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>:<span class="string">&#x27;jp&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> &#123;name : n, age : a&#125; <span class="keyword">of</span> users</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="중첩된-객체-및-배열의-비구조화"><a href="#중첩된-객체-및-배열의-비구조화" class="headerlink" title="중첩된 객체 및 배열의 비구조화"></a>중첩된 객체 및 배열의 비구조화</h2><p>중첩된 객체 및 배열 역시 비구조화가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> kim = &#123;</span><br><span class="line">  name: <span class="string">&#x27;kim&#x27;</span>,</span><br><span class="line">  age: <span class="number">10</span>,</span><br><span class="line">  addr: <span class="string">&#x27;kor&#x27;</span>,</span><br><span class="line">  friends: [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;joe&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">addr</span>:<span class="string">&#x27;usa&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;miko&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">addr</span>:<span class="string">&#x27;jp&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: userName, <span class="attr">friends</span>: [ ,&#123; <span class="attr">name</span>: jpFriend &#125;] &#125; = kim;</span><br><span class="line"><span class="built_in">console</span>.log(userName); <span class="comment">// kim</span></span><br><span class="line"><span class="built_in">console</span>.log(jpFriend); <span class="comment">// miko</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://yuddomack.tistory.com/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94-%ED%95%A0%EB%8B%B9">자바스크립트 {…} […] 문법 (비구조화 할당/구조분해 할당)</a><br><a href="https://velog.io/@public_danuel/destructuring-assignment">JavaScript ) 비구조화 할당 알아보기</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">구조 분해 할당</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es6/">es6</category>
      
      
      <comments>https://recordboy.github.io/2020/04/30/javascript-es6-destructuring-assignment/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 화살표 함수(Arrow Function)</title>
      <link>https://recordboy.github.io/2020/04/29/javascript-es6-arrow-function/</link>
      <guid>https://recordboy.github.io/2020/04/29/javascript-es6-arrow-function/</guid>
      <pubDate>Wed, 29 Apr 2020 11:13:36 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;ECMAScript6(2015)에서 새로 추가된 화살표 함수(Arrow Function)는 function 키워드 대신 화살표(&lt;code&gt;=&amp;gt;&lt;/code&gt;)를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>ECMAScript6(2015)에서 새로 추가된 화살표 함수(Arrow Function)는 function 키워드 대신 화살표(<code>=&gt;</code>)를 사용하여 보다 간략한 방법으로 함수를 선언할 수 있다.</p><a id="more"></a><h3 id="기존-함수"><a href="#기존-함수" class="headerlink" title="기존 함수"></a>기존 함수</h3><h4 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="함수-선언식"><a href="#함수-선언식" class="headerlink" title="함수 선언식"></a>함수 선언식</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="화살표-함수의-기본-문법"><a href="#화살표-함수의-기본-문법" class="headerlink" title="화살표 함수의 기본 문법"></a>화살표 함수의 기본 문법</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개 변수가 없을 경우</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수가 한 개인 경우, 소괄호를 생략할 수 있다.</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수가 여러 개인 경우, 소괄호를 생략할 수 없다.</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 간단하게 한줄로 표현할 땐 중괄호를 생략할 수 있으며 암묵적으로 값이 반환된다. 아래 두 표현은 같다.</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 반환시 중괄호를 생략하면 소괄호를 사용한다. 아래 두 표현은 같다.</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123; <span class="keyword">return</span> &#123; <span class="attr">a</span>: x &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x</span>) =&gt;</span> (&#123; <span class="attr">a</span>: x &#125;);</span><br></pre></td></tr></table></figure><h2 id="화살표-함수의-호출"><a href="#화살표-함수의-호출" class="headerlink" title="화살표 함수의 호출"></a>화살표 함수의 호출</h2><p>화살표 함수는 익명 함수로만 사용할 수 있다. 따라서 함수를 호출하기 위해서는 함수 표현식을 사용한다.</p><h3 id="함수-표현식-1"><a href="#함수-표현식-1" class="headerlink" title="함수 표현식"></a>함수 표현식</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h3 id="콜백-함수"><a href="#콜백-함수" class="headerlink" title="콜백 함수"></a>콜백 함수</h3><p>콜백 함수의 경우 함수 표현식보다 표현이 간결하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.map(<span class="function"><span class="params">x</span> =&gt;</span> x + x);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>기존의 function 키워드로 생선된 일반 함수와 화살표 함수의 큰 차이점 중 하나는 this이다.</p><h3 id="function-키워드-함수의-this"><a href="#function-키워드-함수의-this" class="headerlink" title="function 키워드 함수의 this"></a>function 키워드 함수의 this</h3><p>function 키워드로 생성된 함수는 함수가 어떻게 호출되었는지에 따라 this가 바인딩할 객체가 동적으로 결정된다.</p><h4 id="일반-함수의-this"><a href="#일반-함수의-this" class="headerlink" title="일반 함수의 this"></a>일반 함수의 this</h4><p>일반 함수(여기서 일반 함수란 중첩 함수나 객체의 함수인 메서드, 콜백 함수가 아닌 전역 스코프에 있는 함수를 말한다.)를 호출하게 되면 this는 전역 객체인 window를 바인딩 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><h4 id="생성자-함수의-this"><a href="#생성자-함수의-this" class="headerlink" title="생성자 함수의 this"></a>생성자 함수의 this</h4><p>하지만 new 키워드를 사용하여 생성자함수 호출 방식으로 obj 객체를 생성하면 함수 안에서의 this는 생성자 함수를 바인딩 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Func &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Func();</span><br></pre></td></tr></table></figure><h4 id="메서드의-this"><a href="#메서드의-this" class="headerlink" title="메서드의 this"></a>메서드의 this</h4><p>function 키워드로 만들어진 메서드의 this는 자신을 포함하는 객체를 바인딩 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    myName: <span class="string">&#x27;나나&#x27;</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// &#123;myName: &quot;나나&quot;, getName: ƒ&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.myName); <span class="comment">// 나나</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName();</span><br></pre></td></tr></table></figure><p>obj 객체의 getName 메서드 안에서의 this는 obj 객체를 바인딩 하고 있다. this.myName 호출하면 값이 제대로 출력된다.</p><h3 id="화살표-함수의-this"><a href="#화살표-함수의-this" class="headerlink" title="화살표 함수의 this"></a>화살표 함수의 this</h3><p>화살표 함수는 자신의 this를 바인딩하지 않고 언제나 상위 스코프인 this를 바인딩 한다. 이를 Lexical this 라고 한다.</p><h4 id="일반-함수의-this-1"><a href="#일반-함수의-this-1" class="headerlink" title="일반 함수의 this"></a>일반 함수의 this</h4><p>일반 함수의 경우 function 키워드와 마찬가지로 전역 객체인 window를 바인딩 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><h4 id="생성자-함수의-this-1"><a href="#생성자-함수의-this-1" class="headerlink" title="생성자 함수의 this"></a>생성자 함수의 this</h4><p>화살표 함수는 생성자 함수로 사용할 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Func = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Func(); <span class="comment">// Uncaught TypeError: Func is not a constructor</span></span><br></pre></td></tr></table></figure><p>기존의 function 키워드로 만든 일반적인 생성자 함수는 prototype 프로퍼티를 가지며, prototype 프로퍼티가 가르키는 프로토 타입 객체의 constructor를 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Func.prototype); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure><p>하지만 화살표 함수는 prototype 프로퍼티를 가지고 있지 않다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Func = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Func.prototype) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h4 id="메서드의-this-1"><a href="#메서드의-this-1" class="headerlink" title="메서드의 this"></a>메서드의 this</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    myName: <span class="string">&#x27;나나&#x27;</span>,</span><br><span class="line">    getName: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.myName); <span class="comment">// undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName();</span><br></pre></td></tr></table></figure><p>화살표 함수로 만들어진 메서드의 this는 자신을 포함하는 객체를 바인딩하지 않고 window를 바인딩하기 때문에 화살표 함수는 메서드에 적합하지 않다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://poiemaweb.com/es6-arrow-function">화살표 함수</a><br><a href="https://velog.io/@ki_blank/JavaScript-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98Arrow-function">JavaScript - 화살표 함수(Arrow function)</a><br><a href="https://mygumi.tistory.com/229">Arrow Function(화살표 함수)이란? :: 마이구미</a><br><a href="https://jeong-pro.tistory.com/110">ES6 화살표 함수(arrow function) 변경점 요약 (사용법, this등)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es6/">es6</category>
      
      
      <comments>https://recordboy.github.io/2020/04/29/javascript-es6-arrow-function/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 전개연산자(Spread Operator)</title>
      <link>https://recordboy.github.io/2020/04/29/javascript-es6-spread-operator/</link>
      <guid>https://recordboy.github.io/2020/04/29/javascript-es6-spread-operator/</guid>
      <pubDate>Wed, 29 Apr 2020 11:09:38 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;ECMAScript6(2015)에서 새로 추가된 전개연산자(Spread Operator)란 객체나 배열의 값을 하나 하나 넘기는 용도로 사용할 수 있다. 전개연산자를 사용하는 방법은 점 세개(&lt;code&gt;...&lt;/code&gt;)를 붙이면 된다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>ECMAScript6(2015)에서 새로 추가된 전개연산자(Spread Operator)란 객체나 배열의 값을 하나 하나 넘기는 용도로 사용할 수 있다. 전개연산자를 사용하는 방법은 점 세개(<code>...</code>)를 붙이면 된다.</p><a id="more"></a><h2 id="직관적이고-배열의-아무-곳에-추가-가능하다"><a href="#직관적이고-배열의-아무-곳에-추가-가능하다" class="headerlink" title="직관적이고, 배열의 아무 곳에 추가 가능하다."></a>직관적이고, 배열의 아무 곳에 추가 가능하다.</h2><h3 id="ES5-배열-내용-조합"><a href="#ES5-배열-내용-조합" class="headerlink" title="ES5 배열 내용 조합"></a>ES5 배열 내용 조합</h3><p>ES5 에서는 배열의 내용을 합쳐 새로운 배열을 만들기 위해서 concat 메서드를 활용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> arrWrap = arr1.concat(arr2, arr3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrWrap); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>arr1 배열에 concat 메서드를 사용하여, 배열 arr2와 arr3를 배열에 이어붙였다.</p><h3 id="ES6-배열-내용-조합"><a href="#ES6-배열-내용-조합" class="headerlink" title="ES6 배열 내용 조합"></a>ES6 배열 내용 조합</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> arrWrap = [...arr1, ...arr2, ...arr3];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrWrap); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>전개연산자를 활용하여 새로운 배열을 만들었다. concat 메서드를 사용한 코드보다 간결하고, 가독성도 개선되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> arrWrap = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...arr, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrWrap); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>concat 메서드는 인자로 전달받은 값 순으로 기존 배열 끝에서부터 값을 추가하지만, 전개연산자는 위처럼 배열의 아무 곳에나 추가 할 수 있다.</p><h2 id="전개연산자로-할당하면-2차원-형태가-되지-않는다"><a href="#전개연산자로-할당하면-2차원-형태가-되지-않는다" class="headerlink" title="전개연산자로 할당하면 2차원 형태가 되지 않는다."></a>전개연산자로 할당하면 2차원 형태가 되지 않는다.</h2><h3 id="배열의-경우"><a href="#배열의-경우" class="headerlink" title="배열의 경우"></a>배열의 경우</h3><p>concat 메서드로 새로운 배열을 만들어내는 것이 아닌, 기존 배열 요소에 값을 추가한다면 push 메서드를 사용할 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(arr2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br></pre></td></tr></table></figure><p>arr1 배열에 arr2 배열을 할당했지만 arr2 배열 전체가 들어가 2차원 배열이 되었다. 이 경우 기존 자바스크립트에서는 배열 객체의 프로토타입 매서드인 push.apply를 사용해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>원하는 결과를 얻었지만 코드가 복잡하다. 하지만 전개연산자를 활용하면 쉽게 구현이 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="객체의-경우"><a href="#객체의-경우" class="headerlink" title="객체의 경우"></a>객체의 경우</h3><p>객체의 경우도 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  b: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  c: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  d: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> objWrap = &#123;obj1, obj2&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(objWrap);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  obj1: &#123;</span><br><span class="line">    a: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    b: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  obj2: &#123;</span><br><span class="line">    c: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    d: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj1 객체와 obj2 객체를 하나의 objWrap 객체로 묶으면 객체 각각의 값이 아닌, 객체 자체가 들어가 2차원 객체가 되었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  b: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  c: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  d: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> objWrap = &#123;...obj1, ...obj2&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(objWrap);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">  b: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">  c: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">  d: <span class="string">&#x27;D&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전개연산자를 사용하면 객체 자체가 할당되는 것이 아닌, 각각의 값이 할당 된다.</p><h2 id="전개연산자를-이용한-복사에는-1차원에서만-유효하다"><a href="#전개연산자를-이용한-복사에는-1차원에서만-유효하다" class="headerlink" title="전개연산자를 이용한 복사에는 1차원에서만 유효하다."></a>전개연산자를 이용한 복사에는 1차원에서만 유효하다.</h2><p>위에서 전개연산자로 할당하면 2차원 배열이 되지 않는다고 했다. 하지만 2차원 이상의 배열을 할당할 땐 1차원 요소만 같은 1차원 레벨로 할당이 되고 2차원 이상의 배열은 그대로 들어간다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...arr1];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 2, 3, 4, 5, [6, 7]]</span></span><br></pre></td></tr></table></figure><h2 id="기존-배열을-보존해야-할-때-유용하다"><a href="#기존-배열을-보존해야-할-때-유용하다" class="headerlink" title="기존 배열을 보존해야 할 때 유용하다."></a>기존 배열을 보존해야 할 때 유용하다.</h2><h3 id="ES5-배열-요소를-역순으로-변경"><a href="#ES5-배열-요소를-역순으로-변경" class="headerlink" title="ES5 배열 요소를 역순으로 변경"></a>ES5 배열 요소를 역순으로 변경</h3><p>전개연산자는 원본 배열을 그대로 유지하면서 새로운 배열을 만든다. 예를 들어 reverse 메서드는 배열의 각 요소를 역순으로 바꾸는 메서드인데, 기존 배열도 바꿔버리는 단점이 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr1.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [3, 2, 1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>원본 배열을 수정할 의도가 있었으면 문제가 되지 않지만, 원본 배열은 그대로 두고 배열 요소의 순서를 뒤집은 새로운 배열이 필요하다면 상황이 복잡해진다. 이 상황에서 전개연산자를 사용하면 편리해진다.</p><h3 id="ES6-배열-요소를-역순으로-변경"><a href="#ES6-배열-요소를-역순으로-변경" class="headerlink" title="ES6 배열 요소를 역순으로 변경"></a>ES6 배열 요소를 역순으로 변경</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1].reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>원본 배열은 그대로 유지하면서 새로운 배열을 만들었다.</p><h2 id="배열의-나머지-요소를-할당할-수-있다"><a href="#배열의-나머지-요소를-할당할-수-있다" class="headerlink" title="배열의 나머지 요소를 할당할 수 있다."></a>배열의 나머지 요소를 할당할 수 있다.</h2><p><a href="/2020/04/27/javascript-es6-destructuring-assignment/">비구조화 할당</a>과 전개연산자를 사용하여 배열의 나머지 요소를 할당 받을 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, second, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(second); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>변수 first과 second의 각각의 인덱스 값에 맞는 값이 차례로 들어가고(1, 2), rest에는 할당 받지 못한 나머지 값들이 대입된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://hudi.kr/es6-%EB%AC%B8%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/">ES6 문법으로 다시 시작하는 자바스크립트</a><br><a href="https://chanspark.github.io/2017/11/28/ES6-%EA%BF%80%ED%8C%81.html">[번역]ES6 축약코딩 기법 19가지</a><br><a href="https://blog.naver.com/zoz0312/221622159150">[JavaScript] 전개연산자 ( Spread Operator )</a><br><a href="https://pro-self-studier.tistory.com/13">3. 배열을 좀 더 직관적으로 활용, 전개연산자 (spread operator)</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">전개 구문</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es6/">es6</category>
      
      
      <comments>https://recordboy.github.io/2020/04/29/javascript-es6-spread-operator/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[HEXO] 헥소를 이용한 깃허브 블로그 만들기</title>
      <link>https://recordboy.github.io/2020/04/20/github-hexo-init/</link>
      <guid>https://recordboy.github.io/2020/04/20/github-hexo-init/</guid>
      <pubDate>Mon, 20 Apr 2020 11:12:05 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;헥소-HEXO-란&quot;&gt;&lt;a href=&quot;#헥소-HEXO-란&quot; class=&quot;headerlink&quot; title=&quot;헥소(HEXO)란?&quot;&gt;&lt;/a&gt;헥소(HEXO)란?&lt;/h2&gt;&lt;p&gt;정적 웹 사이트(DB 통신 등을 해서 서버에서 HTML 페이지를 실시간으로 만들던 동적 사이트 방식이 아닌, 완성된 HTML 파일을 바로 전달) 생성기이며, 대표적으로 지킬(&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;)과 헥소(&lt;a href=&quot;https://hexo.io/ko/index.html&quot;&gt;Hexo&lt;/a&gt;)가 있다. 지킬은 Ruby기반이며, 헥소는 Node.js기반의 도구이다. 나는 기존에 지킬 블로그를 이용하다가 최근에 헥소 블로그로 이전하였다. 이유는 지킬 블로그의 경우 포스팅을 작성한 후 깃허브 페이지에 배포하여 반영되기까지 매번 커밋 및 푸쉬를 해줘야 하는 번거로움과 푸쉬 후 약 1분정도의 시간이 지나야 반영이 되는 딜레이가 불편하였다. 헥소같은 경우 빠른 빌드 및 반영(명령어 단 한줄로 실시간 배포 가능) 및 로컬에서 바로 수정사항을 확인할 수 있다는 점(물론 지킬도 루비 기반의 플러그인을 따로 설치하면 로컬에서 바로 확인이 가능함), Node.js 기반의 도구인 점과 마지막으로 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;icarus&lt;/a&gt;테마가 가장 마음에 들어서(사실 이 부분이 제일 큼)이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="헥소-HEXO-란"><a href="#헥소-HEXO-란" class="headerlink" title="헥소(HEXO)란?"></a>헥소(HEXO)란?</h2><p>정적 웹 사이트(DB 통신 등을 해서 서버에서 HTML 페이지를 실시간으로 만들던 동적 사이트 방식이 아닌, 완성된 HTML 파일을 바로 전달) 생성기이며, 대표적으로 지킬(<a href="https://jekyllrb.com/">Jekyll</a>)과 헥소(<a href="https://hexo.io/ko/index.html">Hexo</a>)가 있다. 지킬은 Ruby기반이며, 헥소는 Node.js기반의 도구이다. 나는 기존에 지킬 블로그를 이용하다가 최근에 헥소 블로그로 이전하였다. 이유는 지킬 블로그의 경우 포스팅을 작성한 후 깃허브 페이지에 배포하여 반영되기까지 매번 커밋 및 푸쉬를 해줘야 하는 번거로움과 푸쉬 후 약 1분정도의 시간이 지나야 반영이 되는 딜레이가 불편하였다. 헥소같은 경우 빠른 빌드 및 반영(명령어 단 한줄로 실시간 배포 가능) 및 로컬에서 바로 수정사항을 확인할 수 있다는 점(물론 지킬도 루비 기반의 플러그인을 따로 설치하면 로컬에서 바로 확인이 가능함), Node.js 기반의 도구인 점과 마지막으로 <a href="https://github.com/ppoffice/hexo-theme-icarus">icarus</a>테마가 가장 마음에 들어서(사실 이 부분이 제일 큼)이다.</p><a id="more"></a><p>헥소 블로그의 경우, 일반적으로 깃허브 저장소가 2개 사용되는데, 하나는 소스가 빌드 및 배포되어 실질적으로 보여지는 저장소(예: …github.io), 두번째는 실제 소스가 들어있는 저장소(블로그 설정 파일 및 테마 파일)가 있다.</p><h2 id="설치-환경"><a href="#설치-환경" class="headerlink" title="설치 환경"></a>설치 환경</h2><ul><li>node.js</li><li>git</li></ul><h2 id="헥소-HEXO-설치"><a href="#헥소-HEXO-설치" class="headerlink" title="헥소(HEXO) 설치"></a>헥소(HEXO) 설치</h2><h3 id="초기-세팅"><a href="#초기-세팅" class="headerlink" title="초기 세팅"></a>초기 세팅</h3><p><code>npm</code>을 이용하여 헥소를 전역으로 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>원하는 디렉토리로 이동하여 헥소 블로그 초기 설치(이 포스팅에선 <code>hexo</code>라는 이름으로 초기 설치) 후 해당 디렉토리로 이동하여 노드 모듈 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init hexo</span><br><span class="line">$ cd hexo</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>설치 후 터미널에서 <code>hexo server</code>명령어를 실행해 준다. 로컬 서버가 구동되면 <code>http://localhost:4000</code>주소로 들어가 보자, 아래 화면이 나온다면 헥소가 정상적으로 설치된 것이다.</p><p><img src="/gallery/post/github-hexo-init-01.png" alt="헥소 초기 화면"></p><h3 id="icarus-테마-적용"><a href="#icarus-테마-적용" class="headerlink" title="icarus 테마 적용"></a>icarus 테마 적용</h3><p>이제 icarus 테마를 적용할 것이다. 우선 <a href="https://github.com/ppoffice/hexo-theme-icarus">icarus 저장소</a>로 가서 테마를 다운 받은 뒤 압축을 풀어준다. 압축을 풀어주면 <code>hexo-theme-icarus-master</code>폴더가 있는데, <code>icarus</code>라고 이름을 변경한 뒤 <code>hexo</code>폴더의 <code>themes</code>폴더 안에 넣어준다. 기존의 <code>landscape(기본 테마)</code>는 삭제해 준다.</p><p>이제 설정 파일에서 테마를 <code>icarus</code>로 사용한다고 정해줘야 한다. <code>hexo</code>폴더 루트 경로에 <code>_config.yml</code>파일이 있다. 이 파일이 헥소 기본 설정파일이며, 여기서 전반적인 사이트 설정을 할 수 있다. <code>theme</code> 항목을 <code>icarus</code>로 수정해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: icarus</span><br></pre></td></tr></table></figure><p>수정한 뒤 아래 명령어로 로컬서버를 다시 실행해 본다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>서버가 정상적으로 실행이 안되고 아래 처럼 에러가 날 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR Package bulma-stylus is not installed.</span><br><span class="line">ERROR Package hexo-component-inferno is not installed.</span><br><span class="line">ERROR Package hexo-renderer-inferno is not installed.</span><br><span class="line">ERROR Package inferno is not installed.</span><br><span class="line">ERROR Package inferno-create-element is not installed.</span><br><span class="line">ERROR Please install the missing dependencies your Hexo site root directory:</span><br><span class="line">ERROR npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.2.4 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3</span><br></pre></td></tr></table></figure><p><code>icarus</code>테마는 위 패키지 설치가 필요해 보인다. 필요 패키지를 다시 설치한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.2.4 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3</span><br></pre></td></tr></table></figure><p>설치한 후 다시 서버를 실행하면 성공적으로 <code>icarus</code>테마 사이트가 만들어 진다.</p><p><img src="/gallery/post/github-hexo-init-02.png" alt="이카루스 초기 화면"></p><h3 id="about-페이지-생성"><a href="#about-페이지-생성" class="headerlink" title="about 페이지 생성"></a>about 페이지 생성</h3><p>살펴보니 about 페이지가 존재하지 않는다. 아래 명령어를 실행하여 페이지를 만들어 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 <code>/sources/about/</code> 경로에 <code>index.md</code>파일이 생성된다. 이 파일에 원하는 내용을 작성하면 된다.</p><h2 id="블로그-작성-하기"><a href="#블로그-작성-하기" class="headerlink" title="블로그 작성 하기"></a>블로그 작성 하기</h2><p>헥소 블로그는 터미널에서 아래 명령어를 실행하여 마크다운 파일을 생성할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 포스트명</span><br></pre></td></tr></table></figure><p>정해진 규칙은 아니지만 나는 <code>범주-내용</code>형식으로 포스트명을 지었다.(예: 자바스크립트의 클로저 포스팅일 경우 <code>javascript-closure</code> 라고 명명)</p><p><code>/sources/_posts/</code> 경로에 마크다운 파일이 새로 생성되며 이곳에 포스팅을 작성하면 된다. 마크다운 문법은 <a href="https://heropy.blog/2017/09/30/markdown/">MarkDown 사용법 총정리</a>에 설명이 잘 되어있다.</p><h2 id="깃허브-페이지에-배포하기"><a href="#깃허브-페이지에-배포하기" class="headerlink" title="깃허브 페이지에 배포하기"></a>깃허브 페이지에 배포하기</h2><p>이제 깃허브 페이지에 배포를 해보자</p><h3 id="깃허브-저장소-배포-페이지-생성"><a href="#깃허브-저장소-배포-페이지-생성" class="headerlink" title="깃허브 저장소(배포 페이지) 생성"></a>깃허브 저장소(배포 페이지) 생성</h3><p>우선 헥소 블로그는 2개의 저장소를 사용하는데, 한개는 배포 페이지(보여지는 블로그 페이지)로 사용되며 한개는 실제 소스가 들어가는 저장소다.</p><p>우선 배포 페이지 저장소를 만들어 준다. 저장소 이름은 <code>사용자계정.github.io</code>로 만들어 준다. 깃허브 페이지가 정상적으로 호스팅 되는것을 확인하기 위해 <code>Initialize this repository with a README</code>는 체크해 준다. 저장소가 생성 되면 <code>README.md</code>도 같이 생성이 된다. 이제 <code>settings</code>페이지로 가서 <code>GitHub Pages</code>항목에서 <code>Source</code> 옵션을 <code>master branch</code>로 선택해 준다. <code>Your site is published at https://사용자계정.github.io/</code>라는 문구가 뜨며, 이제 <code>https://사용자계정.github.io</code>주소로 들어가면 페이자가 정상으로 출력되는 것을 확인할 수 있다.</p><h3 id="깃허브-저장소-주소-설정"><a href="#깃허브-저장소-주소-설정" class="headerlink" title="깃허브 저장소 주소 설정"></a>깃허브 저장소 주소 설정</h3><p>배포하기전 헥소 설정 파일에서 배포할 저장소를 입력해줘야 한다. <code>hexo</code>폴더 루트 경로에 <code>_config.yml</code>파일에 가면 아래 항목이 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;&#39;</span><br></pre></td></tr></table></figure><p>위 항목을 아래처럼 설정해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 저장소 주소(예: https:&#x2F;&#x2F;github.com&#x2F;사용자계정&#x2F;사용자계정.github.io.git)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h3 id="배포-플러그인-설치"><a href="#배포-플러그인-설치" class="headerlink" title="배포 플러그인 설치"></a>배포 플러그인 설치</h3><p>깃허브 페이지에 배포하기 위해선 <code>hexo-deployer-git</code>플러그인을 설치해줘야 한다. 아래 명령어를 사용하여 설치해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="정적-리소스-생성하기"><a href="#정적-리소스-생성하기" class="headerlink" title="정적 리소스 생성하기"></a>정적 리소스 생성하기</h3><p>아래 명령어를 실행하면 <code>public</code>폴더가 생성되면서 정적 리소스가 생성된다. 이 파일들이 실제로 깃허브 페이지에 배포될 파일들이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h3><p>아래 명령어를 사용하면 생성한 정적 리소스를 배포하게 된다. <code>사용자계정.github.io</code>주소로 들어가면 정상적으로 배포된 것을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>정적 리소스를 삭제하는 명령어는 아래 명령어를 사용하면 된다. 간혹 정상적으로 배포가 되었음에도 불구하고 페이지가 업데이트 되지 않는 현상이 있는 경우 사용하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>정적 리소스 및 배포를 동시에 하고싶다면 아래 명령어를 사용하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><h2 id="깃허브-저장소에-소스-저장하기"><a href="#깃허브-저장소에-소스-저장하기" class="headerlink" title="깃허브 저장소에 소스 저장하기"></a>깃허브 저장소에 소스 저장하기</h2><p>위의 배포 과정은 보여지는 페이지를 저장한 것이고, 이제 실제 소스를 깃허브 저장소에 저장할 것이다. 새로운 저장소를 만들어 준다. 나는 <code>hexo</code>라고 저장소를 생성하였다. 다시 <code>hexo</code>폴더로 가서 아래 명령어를 입력해 깃을 설치하고, 소스가 들어갈 저장소를 선택한 뒤 푸쉬해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin 저장소 주소</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &#39;커밋 메세지&#39;</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>간혹 깃의 히스토리가 충돌되어 푸쉬가 안되는 경우가 있는데 이런 상황에는 아래 명령어를 사용하여 해결해 준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin 브랜치명 --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/">Github Page와 Hexo를 통해 30분만에 기술 블로그 만들기</a><br><a href="https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/">Github 블로그 만들기 with Hexo - 초기설정</a><br><a href="https://wepplication.github.io/programming/jekyll/">Jekyll을 이용한 무료 블로그 만들기</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/git/">git</category>
      
      <category domain="https://recordboy.github.io/categories/git/github/">github</category>
      
      
      <category domain="https://recordboy.github.io/tags/github/">github</category>
      
      <category domain="https://recordboy.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://recordboy.github.io/2020/04/20/github-hexo-init/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트로 전화번호부 만들기</title>
      <link>https://recordboy.github.io/2020/03/27/react-phone-book/</link>
      <guid>https://recordboy.github.io/2020/03/27/react-phone-book/</guid>
      <pubDate>Fri, 27 Mar 2020 11:51:12 GMT</pubDate>
      
      <description>&lt;p&gt;리액트로 간단한 전화번호부를 만들어 보자, 우선 새로운 리액트 프로젝트를 만들고, 로컬 서버를 시작한다. 프로젝트 이름은 &lt;code&gt;phone-book&lt;/code&gt;으로 하겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트로 간단한 전화번호부를 만들어 보자, 우선 새로운 리액트 프로젝트를 만들고, 로컬 서버를 시작한다. 프로젝트 이름은 <code>phone-book</code>으로 하겠다.</p><a id="more"></a><h2 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app phone-book --use-npm</span><br><span class="line">$ cd phone-book</span><br><span class="line">$ npm server</span><br></pre></td></tr></table></figure><p>App.js 파일을 열어 필요없는 코드를 전부 지워준 뒤 App 컴포넌트만 추가해 본다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>http://localhost:3000</code>에 들어가보면 hello 라고 정상적으로 출력 될 것이다. 이제 본격적으로 하위 컴포넌트를 만들어 App.js에 연결해 보겠다.</p><h2 id="입력-폼-컴포넌트-추가"><a href="#입력-폼-컴포넌트-추가" class="headerlink" title="입력 폼 컴포넌트 추가"></a>입력 폼 컴포넌트 추가</h2><p>src 디렉토리 내부에 components 디렉토리를 만든 뒤 그 안에 PhoneForm.jsx 파일을 만든 뒤 아래 코드를 입력한다.</p><h3 id="이름-인풋-값-state에-할당"><a href="#이름-인풋-값-state에-할당" class="headerlink" title="이름 인풋 값 state에 할당"></a>이름 인풋 값 state에 할당</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      name: e.target.value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> onChange=&#123;<span class="built_in">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;div&gt;name: &#123;<span class="built_in">this</span>.state.name&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneForm;</span><br></pre></td></tr></table></figure><p>코드를 살펴보면, 우선 인풋태그의 <code>onChange</code> 이벤트가 발생하면 <code>handleChange</code> 함수를 실행하게 된다. 이벤트 객체를 파라미터로 받은 <code>handleChange</code> 함수는 <code>e.target.value</code>값을 통해 인풋 요소의 값을 가져와서 <code>state</code>의 <code>name</code>값을 설정하게 된다. 인풋태그 아래 텍스트가 <code>state</code>의 값이 잘 바뀌고 있는지 확인할 수 있게 해준다.</p><h2 id="App컴포넌트에-연결"><a href="#App컴포넌트에-연결" class="headerlink" title="App컴포넌트에 연결"></a>App컴포넌트에 연결</h2><p>App.js 파일에 PhoneForm 컴포넌트를 아래와 같이 연결해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>인풋 태그에 값을 입력할 때 마다 아래에 입력값이 출력되는 것을 확인할 수 있다.</p><h3 id="전화번호-인풋-태그-추가"><a href="#전화번호-인풋-태그-추가" class="headerlink" title="전화번호 인풋 태그 추가"></a>전화번호 인풋 태그 추가</h3><p>전화번호가 들어갈 phone 인풋태그를 더 추가한다. 아래 코드를 살펴보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      [e.target.name]: e.target.value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> onChange=&#123;<span class="built_in">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;phone&quot;</span> onChange=&#123;<span class="built_in">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;div&gt;name: &#123;<span class="built_in">this</span>.state.name&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;phone: &#123;<span class="built_in">this</span>.state.phone&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneForm;</span><br></pre></td></tr></table></figure><p>phone 인풋태그가 추가되었으니 해당 값을 가져오는 이벤트 핸들러 함수를 하나 더 만들어야 될 것 같지만 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names">Computed property names</a>문법을 사용하면 따로 메서드를 추가 안하고 위처럼 작성이 가능하다. </p><p>우선 인풋 태그에 name 값을 추가 하여 각 인풋을 구분할 수 있게 되었다. setState 함수를 보면 <code>[e.target.name]</code>로 이벤트 객체의 name 값을 state의 키값으로 활용하고 있다. 즉 name 인풋을 입력하면 <code>[e.target.name]</code>값은 name이기 때문에 state의 name 프로퍼티에 e.target.value 값을 할당, phone 인풋을 입력하면 <code>[e.target.name]</code>값은 phone이기 때문에 state의 phone 프로퍼티에 e.target.value 값을 할당 한다고 보면 된다. 두 인풋 값이 하단에 잘 출력되는 것을 확인할 수 있다.</p><h2 id="부모-컴포넌트에게-정보-전달하기"><a href="#부모-컴포넌트에게-정보-전달하기" class="headerlink" title="부모 컴포넌트에게 정보 전달하기"></a>부모 컴포넌트에게 정보 전달하기</h2><p>PhoneForm 컴포넌트에 있는 값을 부모(App)컴포넌트에 값을 전달해줄 차례다. 이런 상황에는, 부모 컴포넌트에서 메서드를 만들고, 이 메서드를 자식에게 전달한 다음에 자식 내부에서 호출하는 방식을 사용한다.</p><p>순서를 보면 우선 App에서 handleCreate라는 메서드를 만들고 이를 props를 이용하여 PhoneForm 컴포넌트에 전달을 한다. 그리고 PhoneForm 컴포넌트에 submit 버튼을 추가하여 이벤트가 발생하면 props로 받은 함수를 호출하여 App에서 파라미터로 받은 값을 사용할 수 있도록 하겠다. 우선 App 컴포넌트는 아래와 같이 수정해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleCreate = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm onCreate=&#123;<span class="built_in">this</span>.handleCreate&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>handleCreate 함수를 추가했다. 이 함수는 자식 컴포넌트에서 전달받아오는 결과값을 콘솔창에 출력할 함수다. PhoneForm 컴포넌트에는 onCreate 라는 속성에 handleCreate 함수를 할당해 주었다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      [e.target.name]: e.target.value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 이벤트 리로딩 방지</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상태값을 onCreate를 통하여 부모에게 전달</span></span><br><span class="line">    <span class="built_in">this</span>.props.onCreate(<span class="built_in">this</span>.state);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 상태 초기화</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      phone: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="built_in">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;text&quot;</span></span><br><span class="line">          name=<span class="string">&quot;name&quot;</span></span><br><span class="line">          value=&#123;<span class="built_in">this</span>.state.name&#125;</span><br><span class="line">          onChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;text&quot;</span></span><br><span class="line">          name=<span class="string">&quot;phone&quot;</span></span><br><span class="line">          value=&#123;<span class="built_in">this</span>.state.phone&#125;</span><br><span class="line">          onChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;send&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneForm;</span><br></pre></td></tr></table></figure><p>render 함수 안을 먼저 보면, submit 버튼을 추가하고, form태그에는 onSubmit 이벤트를 등록하였다. 인풋의 value 값은 현재 state 값을 참조하도록 하여 실시간으로 변경되는 값으로 할당되도록 하였다. state 값이 실시간으로 바뀌는지 확인하기 위한 인풋 아래 텍스트들은 삭제해준다.</p><p>메서드는 handleSubmit 함수를 추가하였는데, 우선 submit 이벤트가 발생하면 페이지가 리로드되기 때문에 함수가 실행될 때 e.preventDefault 함수를 이용하여 리로드를 막는다. 다음에 props으로 받은 onCreate 함수를 실행하여 현재 state 값을 전달해주고, 현재 값은 초기화 해준다. submit 버튼을 클릭하면 콘솔창에 전달받은 인풋값이 정상적으로 출력될 것이다.</p><h2 id="데이터-추가"><a href="#데이터-추가" class="headerlink" title="데이터 추가"></a>데이터 추가</h2><p>PhoneForm 컴포넌트의 데이터를 부모 컴포넌트로 전달했으니 이제 부모 컴포넌트에 데이터를 계속 추가 하도록 하겠다. </p><h3 id="리액트에서의-배열-다루기"><a href="#리액트에서의-배열-다루기" class="headerlink" title="리액트에서의 배열 다루기"></a>리액트에서의 배열 다루기</h3><p>데이터 객체를 배열에 계속 추가하기 위해선 리액트에서 배열을 어떻게 다루는지 알아야 한다. 기존의 자바스크립트에서는 배열에 값을 추가할 때 push 메서드를 사용했었다. 예를 들어 <code>arr</code> 배열이 있다고 치자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>기존 자바스크립트에서 배열에 값을 추가할때는 위처럼 하던것처럼 리액트에서도 <code>this.state.arr.push(&#39;value&#39;);</code> 처럼 해도 된다고 생각할 수 있다. 하지만 리액트에서는 state 내부의 값을 직접적으로 수정하면 절대 안된다. 이를 불변성 유지라고 하는데, push, splice, unshift, pop 같은 내장함수는 배열 자체를 수정하므로 적합하지 않다. 대신 기존 배열에 기반하여 새 배열을 만들어내는 <a href="/2018/05/15/javascript-array-method/">concat</a>, slice, <a href="/2020/02/17/javascript-array-map/">map</a>, <a href="/2020/02/18/javascript-array-filter/">filter</a> 같은 함수를 사용해야한다. 리액트에서 불변성 유지가 중요한 이유는 불변성을 유지해야, 리액트에서 모든것들이 필요한 상황에 리렌더링 되도록 설계할 수 있고, 그렇게 해야 나중에도 성능도 최적화 할 수 있기 때문이다.</p><h3 id="배열-추가"><a href="#배열-추가" class="headerlink" title="배열 추가"></a>배열 추가</h3><p>App 컴포넌트의 state에 information 이라는 배열을 만들고, 그 안에 배열의 기본값인 샘플 데이터 두개를 추가 할 것이다. 객체 형식은 아래와 같은 형식으로 작성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">  name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">  phone: <span class="string">&#x27;000-0000-0000&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 id 값은 각 데이터를 식별하기 위함이다. 이 값은 데이터를 추가할 때 마다 숫자를 1씩 더해주겠다. App 컴포넌트는 아래와 같이 작성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  id = <span class="number">2</span>;</span><br><span class="line">  state = &#123;</span><br><span class="line">    information: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&#x27;민수&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCreate = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.concat(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id++, ...data &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm onCreate=&#123;<span class="built_in">this</span>.handleCreate&#125; /&gt;</span><br><span class="line">        &#123;<span class="built_in">JSON</span>.stringify(information)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>id 값의 경우, 컴포넌트의 일반 클래스 내부 변수로 선언하였다. 컴포넌트 내부에서 필요한 값 중에서 렌더링 되는 것과 상관이 없는 것들은 굳이 state에 넣어줄 필요가 없다. 그리고 handleCreate 함수에서 this.state의 information 배열은 비구조화 할당으로 값을 선언하였다. 그러므로 setState 함수의 구문은 아래와 같다고 볼 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  information: <span class="built_in">this</span>.state.information.concat(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id++, ...data &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>render 함수에서도 위와 같이 비구조와 할당으로 information 값을 선언하였으며, <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify()</a>를 이용해 문자열로 변환하여 출력하였다. send 버튼을 클릭하면 배열에 전달된 데이터 객체가 제대로 출력되는 것을 확인할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;id&quot;:0,&quot;name&quot;:&quot;한나&quot;,&quot;phone&quot;:&quot;000-0000-0000&quot;&#125;,&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;민수&quot;,&quot;phone&quot;:&quot;000-0000-0000&quot;&#125;,&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;인성&quot;,&quot;phone&quot;:&quot;000-0000-0000&quot;&#125;]</span><br></pre></td></tr></table></figure><h2 id="데이터-렌더링"><a href="#데이터-렌더링" class="headerlink" title="데이터 렌더링"></a>데이터 렌더링</h2><p>배열의 내장 함수인 <a href="/2020/02/17/javascript-array-map/">map</a>을 이용하여 information을 컴포넌트로 변환하여 출력하도록 하겠다. </p><h3 id="컴포넌트-만들기"><a href="#컴포넌트-만들기" class="headerlink" title="컴포넌트 만들기"></a>컴포넌트 만들기</h3><p>두개의 컴포넌트를 만들 것이다.</p><ul><li>PhoneInfo: 각 전화번호 정보를 보여주는 컴포넌트</li><li>PhoneInfoList: 여러개의 PhoneInfo 컴포넌트를 보여줌</li></ul><h4 id="PhoneInfo-생성"><a href="#PhoneInfo-생성" class="headerlink" title="PhoneInfo 생성"></a>PhoneInfo 생성</h4><p>PhoneInfo.jsx 파일을 만들고 아래처럼 작성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">&#x27;이름&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = &#123;</span><br><span class="line">      margin: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">      border: <span class="string">&#x27;1px solid #ccc&#x27;</span>,</span><br><span class="line">      padding: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, phone &#125; = <span class="built_in">this</span>.props.info;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;b&gt;&#123;name&#125;&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;phone&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfo;</span><br></pre></td></tr></table></figure><p>info 객체를 props으로 받아와서 렌더링을 할 것이다. 여기서 만약 info 객체에 값이 전달 안 될 경우 에러가 뜰 것이다. 위 코드에서 info 객체의 값을 비구조화 할당하고 있는데, info가 undefined 경우 내부의 값을 가져오지 못하기 때문이다. 때문에 위 코드에서 defaultProps를 이용하여 info의 기본값을 설정해준다.</p><h4 id="PhoneInfoList-생성"><a href="#PhoneInfoList-생성" class="headerlink" title="PhoneInfoList 생성"></a>PhoneInfoList 생성</h4><p>다음에 PhoneInfoList 컴포넌트를 생성하고, 아래처럼 코드를 입력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfo <span class="keyword">from</span> <span class="string">&#x27;./PhoneInfo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    data: [],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> list = data.map(<span class="function">(<span class="params">info</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">PhoneInfo</span> <span class="attr">key</span>=<span class="string">&#123;info.id&#125;</span> <span class="attr">info</span>=<span class="string">&#123;info&#125;</span> /&gt;</span></span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfoList;</span><br></pre></td></tr></table></figure><p>이 컴포넌트에서는 data라는 배열을 가져와서 map 함수를 이용하여 JSX로 변환을 해준다. 여기서 컴포넌트에 key라는 값도 설정되었는데, key 값은 리액트에서 배열을 렌더링 할 때 꼭 필요한 값이다. 리액트는 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최적화 한다. 아래 예시를 통해 살펴보겠다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>key 값을 설정하지 않으면 배열의 index 값이 자동으로 key 값으로 설정 된다. 때문에 각 요소마다 따로 키값을 설정하지 않으면 아래처럼 각 index 값이 키값으로 들어갈 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;0&#125;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;1&#125;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;2&#125;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;3&#125;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 요소들 중 B와 C사이에 X를 집어넣는다고 가정을 해보자. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;0&#125;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;1&#125;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;2&#125;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span> C 가 X 로 바뀜</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;3&#125;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span> D 가 C 로 바뀜</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;4&#125;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span> D 는 새로 생성됨</span><br></pre></td></tr></table></figure><p>보면 2 index 값으로 X 요소가 들어가면서 index 값이 밀리고, X 요소 이후 부터 값이 전부 바뀔 것이다. 각 요소를 index 값이 아닌 데이터를 추가 할 때마다 고유 값을 부여하면, 리액트가 변화를 감지하고 업데이트 할때 좀 더 효율적이게 처리를 할 수 있게 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;0&#125;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;1&#125;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;4&#125;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 새로 생성됨</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;2&#125;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 유지됨</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;3&#125;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span> 유지됨</span><br></pre></td></tr></table></figure><p>새로운 요소 하나만 생성되고 나머지는 그대로 유지된다. key 값은 언제나 고유해야 한다. 실제 데이터베이스에도 데이터를 추가하면 해당 데이터를 가리키는 고유 id가 있다. 여기서는 각 요소의 고유 id를 key 값으로 사용하고 있다.</p><h4 id="PhoneInfoList-렌더링"><a href="#PhoneInfoList-렌더링" class="headerlink" title="PhoneInfoList 렌더링"></a>PhoneInfoList 렌더링</h4><p>이제 PhoneInfoList 컴포넌트를 App 컴포넌트에 렌더링을 하고 data 값을 props으로 전달하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfoList <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneInfoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  id = <span class="number">2</span>;</span><br><span class="line">  state = &#123;</span><br><span class="line">    information: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&#x27;민수&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCreate = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.concat(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id++, ...data &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm onCreate=&#123;<span class="built_in">this</span>.handleCreate&#125; /&gt;</span><br><span class="line">        &lt;PhoneInfoList data=&#123;<span class="built_in">this</span>.state.information&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>확인해 보면 기존 데이터 렌더링 및 신규 데이터 추가도 확인해 볼 수 있다. 가끔 데이터에 고유 값이 없을 수도 있다. 그럴 경우에는 렌더링은 되지만 콘솔창에 경고창이 뜰 것이다. 꼭 배열을 렌더링 할 때는 고유의 key 값을 사용하도록 한다.</p><h2 id="데이터-삭제"><a href="#데이터-삭제" class="headerlink" title="데이터 삭제"></a>데이터 삭제</h2><p>이제 전화번호부에 등록된 데이터를 삭제할 코드를 작성하겠다. 배열에서 삭제 방법은 <a href="/2020/02/18/javascript-array-filter/">filter</a> 메서드를 사용할 것이다. App 컴포넌트에 handleRemove 함수를 만들어 준뒤 아래처럼 코드를 수정한다. 삭제할 id 값을 받아와 filter 메서드를 사용하여 id 값이 일치하지 않는 값들을 state에 다시 세팅 할 것이다. 함수를 만들었으면 이것을 하위 컴포넌트인 PhoneInfoList에 전달한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfoList <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneInfoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  id = <span class="number">2</span>;</span><br><span class="line">  state = &#123;</span><br><span class="line">    information: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&#x27;민수&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCreate = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.concat(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id++, ...data &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleRemove = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.filter(<span class="function">(<span class="params">info</span>) =&gt;</span> info.id !== id),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm onCreate=&#123;<span class="built_in">this</span>.handleCreate&#125; /&gt;</span><br><span class="line">        &lt;PhoneInfoList</span><br><span class="line">          data=&#123;<span class="built_in">this</span>.state.information&#125;</span><br><span class="line">          onRemove=&#123;<span class="built_in">this</span>.handleRemove&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>PhoneInfoList 컴포넌트는 props으로 전달받은 onRemove을 그대로 하위 컴포넌트인 PhoneInfo에 전달한다. 이 함수가 전달되지 않을 경우를 대비하여 defaultProps도 설정해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfo <span class="keyword">from</span> <span class="string">&#x27;./PhoneInfo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    data: [],</span><br><span class="line">    onRemove: <span class="function">() =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">&#x27;onRemove not defined&#x27;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, onRemove &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> list = data.map(<span class="function">(<span class="params">info</span>) =&gt;</span> (</span><br><span class="line">      &lt;PhoneInfo key=&#123;info.id&#125; info=&#123;info&#125; onRemove=&#123;onRemove&#125; /&gt;</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfoList;</span><br></pre></td></tr></table></figure><p>삭제 버튼 및 로직은 PhoneInfo 컴포넌트에서 구현하겠다. 우선 버튼을 추가하고 삭제 이벤트를 추가 해 준다. 삭제 버튼을 클릭하면 해당 컴포넌트의 id 값을 onRemove 함수에 인자값으로 넣고 호출한다. 삭제가 정상 작동할 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">&#x27;이름&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// delete 버튼을 킬릭하면 onRemove에 id값을 넣어서 호출</span></span><br><span class="line">    <span class="keyword">const</span> &#123; info, onRemove &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    onRemove(info.id);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = &#123;</span><br><span class="line">      margin: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">      border: <span class="string">&#x27;1px solid #ccc&#x27;</span>,</span><br><span class="line">      padding: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, phone &#125; = <span class="built_in">this</span>.props.info;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;b&gt;&#123;name&#125;&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;phone&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleRemove&#125;&gt;</span><br><span class="line">          <span class="keyword">delete</span></span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfo;</span><br></pre></td></tr></table></figure><h2 id="데이터-수정"><a href="#데이터-수정" class="headerlink" title="데이터 수정"></a>데이터 수정</h2><p>수정할 때도 마찬가지로 불변성을 지켜워야 하며, 기존의 배열과 그 내부에 있는 객체를 직접 수정하지 않도록 한다. 예를 들어 아래와 같은 객체로 이루어진 배열이 있다고 가정해 본다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">    name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&#x27;민수&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>기존의 값은 건들이지 않고, 객체의 id가 1인 객체의 name 값만 수정을 해보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> modifiedArray = array.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.id === <span class="number">1</span> ? &#123; ...item, <span class="attr">name</span>: <span class="string">&#x27;인성&#x27;</span> &#125; : item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(modifiedArray);</span><br><span class="line"><span class="comment">// 0: &#123;id: 0, name: &quot;한나&quot;, phone: &quot;000-0000-0000&quot;&#125;</span></span><br><span class="line"><span class="comment">// 1: &#123;id: 1, name: &quot;인성&quot;, phone: &quot;000-0000-0000&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>현재 객체의 id 값이 1인 경우 새로운 객체를 생성하여 기존 값들을 넣은 뒤 name 값만 변경하여 할당 하였다. id 값이 1 아닌 수정이 필요 없는 객체는 기존 값 그대로 할당하였다. 이 원리를 이용하여 전화번호부 정보를 수정하도록 하겠다.</p><p>App 컴포넌트에 handleUpdate라는 새로운 함수를 만든다. 이 함수는 id와 data라는 파라미터를 받아와서 필요한 정보를 업데이트 해준다. 이 함수는 PhoneInfoList의 onUpdata로 전달해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneForm <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneForm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfoList <span class="keyword">from</span> <span class="string">&#x27;./components/PhoneInfoList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  id = <span class="number">2</span>;</span><br><span class="line">  state = &#123;</span><br><span class="line">    information: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">&#x27;한나&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">&#x27;민수&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCreate = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.concat(&#123; <span class="attr">id</span>: <span class="built_in">this</span>.id++, ...data &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleRemove = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.id !== id),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleUpdate = <span class="function">(<span class="params">id, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; information &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      information: information.map(<span class="function">(<span class="params">info</span>) =&gt;</span></span><br><span class="line">        info.id === id ? &#123; ...info, ...data &#125; : info</span><br><span class="line">      ),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PhoneForm onCreate=&#123;<span class="built_in">this</span>.handleCreate&#125; /&gt;</span><br><span class="line">        &lt;PhoneInfoList</span><br><span class="line">          data=&#123;<span class="built_in">this</span>.state.information&#125;</span><br><span class="line">          onRemove=&#123;<span class="built_in">this</span>.handleRemove&#125;</span><br><span class="line">          onUpdate=&#123;<span class="built_in">this</span>.handleUpdate&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>이제 하위 컴포넌트 PhoneInfoList를 아래와 같이 수정해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PhoneInfo <span class="keyword">from</span> <span class="string">&#x27;./PhoneInfo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    data: [],</span><br><span class="line">    onRemove: <span class="function">() =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">&#x27;onRemove not defined&#x27;</span>),</span><br><span class="line">    onUpdate: <span class="function">() =&gt;</span> <span class="built_in">console</span>.warn(<span class="string">&#x27;onUpdate not defined&#x27;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, onRemove, onUpdate &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> list = data.map(<span class="function">(<span class="params">info</span>) =&gt;</span> (</span><br><span class="line">      &lt;PhoneInfo</span><br><span class="line">        key=&#123;info.id&#125;</span><br><span class="line">        info=&#123;info&#125;</span><br><span class="line">        onRemove=&#123;onRemove&#125;</span><br><span class="line">        onUpdate=&#123;onUpdate&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfoList;</span><br></pre></td></tr></table></figure><p>PhoneInfo 컴포넌트가 렌더링 하는 과정에 onUpdate를 그대로 전달하여 주고, onRemove과 마찬가지로 defaultProps도 설정해 준다.</p><p>이제 PhoneInfo 컴포넌트를 수정해 준다. 이번에 수정될 코드의 양은 꽤 많다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    name: <span class="string">&#x27;이름&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;000-0000-0000&#x27;</span>,</span><br><span class="line">    id: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="comment">// modify 버튼을 클릭했을 때 editing 값은 true로 변경 된다. 이 값이 true 일 때에는, 기존의 텍스트 형태의 값이 input 형태로 변환 되어 수정 할 수 있게 된다.</span></span><br><span class="line">    editing: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input 값은 동적이기 때문에 input 값을 담아야 할 값도 설정 한다.</span></span><br><span class="line">    name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    phone: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleRemove = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// delete 버튼을 킬릭하면 onRemove에 id값을 넣어서 호출</span></span><br><span class="line">    <span class="keyword">const</span> &#123; info, onRemove &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    onRemove(info.id);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 수정 버튼이 클릭 될 때 마다 editing 값이 반전된다.</span></span><br><span class="line">  handleToggleEdit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; editing &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      editing: !editing,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// input 값이 변경될 때 마다 state 값을 현재 값으로 변경해 준다.</span></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      [e.target.name]: e.target.value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// editing 값이 바뀔 때 처리 할 로직이 있는 함수, 수정을 눌렀을 때는 기존 값이 input에 나타나고, apply 버튼을 누르면 input 값들이 부모한테 전달 된다.</span></span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; info, onUpdate &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (!prevState.editing &amp;&amp; <span class="built_in">this</span>.state.editing) &#123;</span><br><span class="line">      <span class="comment">// editing 값이 true로 전활 될 때 info의 값을 state에 넣어준다.</span></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        name: info.name,</span><br><span class="line">        phone: info.phone,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prevState.editing &amp;&amp; !<span class="built_in">this</span>.state.editing) &#123;</span><br><span class="line">      <span class="comment">// editing 값이 false로 전환 될 때 현재 수정하고 있는 객체의 변경된 값을 onUpdate 함수에 태워 보낸다.</span></span><br><span class="line">      onUpdate(info.id, &#123;</span><br><span class="line">        name: <span class="built_in">this</span>.state.name,</span><br><span class="line">        phone: <span class="built_in">this</span>.state.phone,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = &#123;</span><br><span class="line">      margin: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">      border: <span class="string">&#x27;1px solid #ccc&#x27;</span>,</span><br><span class="line">      padding: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; editing &#125; = <span class="built_in">this</span>.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 수정모드</span></span><br><span class="line">    <span class="keyword">if</span> (editing) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type=<span class="string">&quot;text&quot;</span></span><br><span class="line">              name=<span class="string">&quot;name&quot;</span></span><br><span class="line">              value=&#123;<span class="built_in">this</span>.state.name&#125;</span><br><span class="line">              onChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;input</span><br><span class="line">              type=<span class="string">&quot;text&quot;</span></span><br><span class="line">              name=<span class="string">&quot;phone&quot;</span></span><br><span class="line">              value=&#123;<span class="built_in">this</span>.state.phone&#125;</span><br><span class="line">              onChange=&#123;<span class="built_in">this</span>.handleChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="built_in">this</span>.handleRemove&#125;&gt;<span class="keyword">delete</span>&lt;/button&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="built_in">this</span>.handleToggleEdit&#125;&gt;apply&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 일반모드</span></span><br><span class="line">    <span class="keyword">const</span> &#123; name, phone &#125; = <span class="built_in">this</span>.props.info;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;b&gt;&#123;name&#125;&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;phone&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleRemove&#125;&gt;</span><br><span class="line">          <span class="keyword">delete</span></span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleToggleEdit&#125;&gt;</span><br><span class="line">          modify</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> PhoneInfo;</span><br></pre></td></tr></table></figure><p>결과물을 확인해 보면 수정이 잘 되는 것을 확인해 볼 수 있다. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velopert.com/3634">누구든지 하는 리액트 6편: input 상태 관리하기</a><br><a href="https://velopert.com/3636">누구든지 하는 리액트 7편: 배열 다루기 (1) 생성과 렌더링</a><br><a href="https://velopert.com/3638">누구든지 하는 리액트 8편: 배열 다루기 (2) 제거와 수정</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/react/">react</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      <category domain="https://recordboy.github.io/tags/jsx/">jsx</category>
      
      
      <comments>https://recordboy.github.io/2020/03/27/react-phone-book/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트 데이터 관리(Props, State)</title>
      <link>https://recordboy.github.io/2020/03/08/react-props-state/</link>
      <guid>https://recordboy.github.io/2020/03/08/react-props-state/</guid>
      <pubDate>Sun, 08 Mar 2020 10:59:22 GMT</pubDate>
      
      <description>&lt;p&gt;리액트에서 다루는 데이터는 두개로 나뉜다. 바로 props와 state인데, 요약하자면 props는 부모 컴포넌트가 자식 컴포넌트에게 주는 값이다. 자식 컴포넌트에서는 props를 받아오기만 하고, 받아온 props를 직접 수정할 수는 없다. 자식 입장에서 읽기 전용인 데이터이다. 반면에 state는 컴포넌트 내부에서 선언하며, 내부에서 값을 변경할 수 있다. 자신이 들고있는 값이며 props와 비교한다면, 쓰기 전용이라고 볼 수 있다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트에서 다루는 데이터는 두개로 나뉜다. 바로 props와 state인데, 요약하자면 props는 부모 컴포넌트가 자식 컴포넌트에게 주는 값이다. 자식 컴포넌트에서는 props를 받아오기만 하고, 받아온 props를 직접 수정할 수는 없다. 자식 입장에서 읽기 전용인 데이터이다. 반면에 state는 컴포넌트 내부에서 선언하며, 내부에서 값을 변경할 수 있다. 자신이 들고있는 값이며 props와 비교한다면, 쓰기 전용이라고 볼 수 있다. </p><a id="more"></a><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>예제를 통해 props과 state를 알아보겠다. <code>src</code>디렉토리에 <code>components</code>디렉토리를 생성한 뒤 컴포넌트를 <code>MyNmae.js</code>파일을 만든 후 <code>MyName</code>컴포넌트를 추가하도록 하겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;span&gt;&#123;<span class="built_in">this</span>.props.name&#125;&lt;/span&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyName;</span><br></pre></td></tr></table></figure><p>자신이 받아온 props의 값은 <code>this</code> 키워드를 통해 조회할 수 있다. <code>App.js</code>파일을 아래와 같이 수정하겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> MyName <span class="keyword">from</span> <span class="string">&#x27;./components/MyName&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="built_in">this</span> is &lt;MyName name=<span class="string">&quot;my-app&quot;</span> /&gt; &#123;<span class="comment">/* this is my-app */</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>화면에 this is my-app라고 출력되는 것을 확인할 수 있다. <code>MyName</code>컴포넌트는 부모 컴포넌트인 <code>App</code>컴포넌트안의 <code>MyName</code>에서 선언한 <code>name</code>값을 <code>this.props.name</code>구문을 이용하여 값을 가져오고 있다.</p><h3 id="defaultProps"><a href="#defaultProps" class="headerlink" title="defaultProps"></a>defaultProps</h3><p>특정한 상황에 props를 일부러 비워야 할 때가 있다. 그러한 경우에 props의 기본 값을 설정해 줄 수 있는데, 그것이 defaultProps이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        name: <span class="string">&#x27;basic-app&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;span&gt;&#123;<span class="built_in">this</span>.props.name&#125;&lt;/span&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyName;</span><br></pre></td></tr></table></figure><p><code>MyName</code>컴포넌트의 render함수 위에 defaultProps를 이용해 기본값을 선언해 준 뒤 <code>App</code>컴포넌트의 <code>MyName</code>의 <code>name</code>값을 지워주면 결과가 <code>name</code>의 기본 값인 <code>this is basic-app</code>로 보여진다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> MyName <span class="keyword">from</span> <span class="string">&#x27;./components/MyName&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="built_in">this</span> is &lt;MyName /&gt; &#123;<span class="comment">/* this is basic-app */</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>state는 위에서 쓰기 전용이라고 말한 것처럼 동적인 데이터를 다룰 때 사용된다. <code>Counter</code>라는 새로운 컴포넌트를 만들어 대략적으로 데이터를 어떻게 다루는지 알아보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    number: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleIncrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      number: <span class="built_in">this</span>.state.number + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDecrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      number: <span class="built_in">this</span>.state.number - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;값: &#123;<span class="built_in">this</span>.state.number&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleIncrease&#125;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleDecrease&#125;&gt;-&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure><p>위 코드를 보면 state 정의는 <a href="https://babeljs.io/docs/en/babel-plugin-proposal-class-properties">class fields</a>문법으로 정의되었으며, class fields문법을 사용하지 않는다면 아래와 같이 사용하면 된다. class fields를 사용하는 이유는 편의를 위함이다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      number: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// state = &#123;</span></span><br><span class="line">  <span class="comment">//   number: 0</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="컴포넌트에서-메서드-작성"><a href="#컴포넌트에서-메서드-작성" class="headerlink" title="컴포넌트에서 메서드 작성"></a>컴포넌트에서 메서드 작성</h2><p>컴포넌트에서 메서드를 작성할 때 아래와 같이 화살표 함수로 작성된 것을 확인할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleIncrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    number: <span class="built_in">this</span>.state.number + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Counter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 화살표 함수로 작성된 메서드는 컴포넌트 안에서 아래와 같은 형식으로도 작성할 수 있는데, 이렇게 하면, 이벤트가 발생했을 때, this가 undefined로 나타나서 제대로 처리가 되지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">handleIncrease</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      number: <span class="built_in">this</span>.state.number + <span class="number">1</span> <span class="comment">// TypeError</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이는 함수가 버튼의 클릭이벤트로 전달이 되는 과정에서 this와의 연결이 끊켜버리기 때문인데, 이를 고쳐주려면 constructor에서 아래처럼 추가해주거나 화살표 함수 형태로 하면 this가 풀리는 것을 해결할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">super</span>(props);</span><br><span class="line">  <span class="built_in">this</span>.handleIncrease = <span class="built_in">this</span>.handleIncrease.bind(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">this</span>.handleDecrease = <span class="built_in">this</span>.handleDecrease.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="값-업데이트-setState"><a href="#값-업데이트-setState" class="headerlink" title="값 업데이트(setState)"></a>값 업데이트(setState)</h2><p>각 메서드에 들어있는 <code>this.setState</code>는 <code>state</code>값을 바꾸기 위해서 받드시 사용해야 하는데, 리액트에서는 이 함수가 호출되면 컴포넌트가 리렌더링 되도록 설계되어 있기 때문이다. <code>setState</code>의 몇가지 특징을 알아보겠다.</p><h3 id="setState는-객체로-전달되는-값만-업데이트를-해준다"><a href="#setState는-객체로-전달되는-값만-업데이트를-해준다" class="headerlink" title="setState는, 객체로 전달되는 값만 업데이트를 해준다."></a>setState는, 객체로 전달되는 값만 업데이트를 해준다.</h3><p>지금은 state에 number값만 있지만 만약 다음과 같은 값이 있다고 가정을 해본다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  number: <span class="number">0</span>,</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이벤트에 <code>this.setState(&#123; number: 1 &#125;);</code>을 전달해주면, foo는 그대로 남고, number값만 업데이트가 된다.</p><h3 id="setState는-객체의-깊숙한곳-까지-확인하지-못한다"><a href="#setState는-객체의-깊숙한곳-까지-확인하지-못한다" class="headerlink" title="setState는 객체의 깊숙한곳 까지 확인하지 못한다."></a>setState는 객체의 깊숙한곳 까지 확인하지 못한다.</h3><p>예를 들어, state가 다음과 같이 설정되어 있다고 보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  number: <span class="number">0</span>,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: <span class="number">0</span>,</span><br><span class="line">    foobar: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래와 같이 전달한다고 해서 foobar값이 2로 바뀌지 않는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    foobar: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위처럼 하면 foobar값이 2로 바뀌지 않고 기존의 foo객체 자체가 바뀌어버린다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  number: <span class="number">0</span>,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    <span class="comment">// bar 값이 없다. foo 객체 자체가 바뀌었기 때문이다.</span></span><br><span class="line">    foobar: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 상황에서는 아래처럼 작성해 줘야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  number: <span class="number">0</span>,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    ...this.state.foo,</span><br><span class="line">    foobar: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위 구문중 <code>...</code>는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">전개연산자</a>이다. 기존의 객체안에 있는 내용을 해당 위치에 풀어준다는 의미다. 그 다음에 설정하고 싶은 값을 넣어주면 해당 값을 덮어 쓰게 된다.</p><h3 id="setState에-객체-대신-함수-전달하기"><a href="#setState에-객체-대신-함수-전달하기" class="headerlink" title="setState에 객체 대신 함수 전달하기"></a>setState에 객체 대신 함수 전달하기</h3><p>setState로 값을 업데이트 할 때, 기존은 객체를 전달하여 값을 업데이트한다면 함수를 전달하는 방법도 있다. 기존 코드는 아래와 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  number: <span class="built_in">this</span>.state.number + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>큰 문제는 아니지만, 굳이 또 <code>this.state</code>를 조회해야 하는데, 아래 처럼 함수를 전달하여 값을 바꿀수도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(</span><br><span class="line">  (state) =&gt; (&#123;</span><br><span class="line">    number: state.number + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>이 방법 말고 더 나아가 아래처럼 작성할 수도 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(</span><br><span class="line">  (&#123; number &#125;) =&gt; (&#123;</span><br><span class="line">    number: number + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>보면 <code>(state)</code>가 <code>(&#123; number &#125;)</code>가 되었는데, 이는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">비구조화 할당</a>이라는 문법이다. 이 문법은 아래와 같은 방식으로도 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = &#123; number &#125; = <span class="built_in">this</span>.state</span><br></pre></td></tr></table></figure><p>결국 코드를 조금 사용하고 싶다면 아래처럼 작성하면 된다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; number &#125; = <span class="built_in">this</span>.state;</span><br><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">  number: number + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="이벤트-설정"><a href="#이벤트-설정" class="headerlink" title="이벤트 설정"></a>이벤트 설정</h2><p><code>render</code>함수에서 이벤트 설정한 부분을 확인해 보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;값: &#123;<span class="built_in">this</span>.state.number&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleIncrease&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleDecrease&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>버튼이 클릭되면 등록된 함수가 각각 호출되도록 설정되었다. 기존에 자바스크립트로 버튼에 이벤트를 걸어줄 때는 아래처럼 설정을 했을 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> onclick=<span class="string">&quot;alert(&#x27;hello world&#x27;)&quot;</span>&gt;click&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>기존 html로 작성된 코드는 onclick 속성에 자바스크립트를 문자열 형태로 넣어줬지만, jsx로 작성된 코드는 약간 다르다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="built_in">this</span>.handleIncrease&#125;&gt;+&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>몇가지 다른 사항은 아래와 같다.</p><ul><li>이벤트 이름을 설정할 때는 camelCase로 설정해주어야 한다. 예를들어 <code>onclick</code>은 <code>onClick</code>으로 설정 한다.</li><li>이벤트에 전달되는 값은 함수여야 한다. 주의사항이 있는데 함수를 <code>onClick=&#123;this.handleIncrease()&#125;</code>라고 함수 호출식으로 작성하게 된다면 렌더링 할 때 마다 해당 함수가 호출되어 무한반복이 되버린다. 렌더링 함수에서 이벤트를 설정할 때는 꼭 메서드를 호출하지 말도록 한다.</li></ul><h2 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h2><p><code>App.js</code>파일도 아래처럼 수정해 준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&#x27;./components/Counter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;Counter /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App; </span><br></pre></td></tr></table></figure><p>이제 <code>+</code>, <code>-</code>버튼을 클릭해보면 값이 정상적으로 증가, 감소하는 것을 확인할 수 있다. </p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velopert.com/3629">누구든지 하는 리액트 4편: props 와 state</a><br><a href="https://trustyoo86.github.io/react/2017/11/18/props-state-react.html">React 기억법(4) - React 필수요소 props, state</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/react/">react</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      <category domain="https://recordboy.github.io/tags/jsx/">jsx</category>
      
      
      <comments>https://recordboy.github.io/2020/03/08/react-props-state/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트 JSX</title>
      <link>https://recordboy.github.io/2020/03/07/react-jsx/</link>
      <guid>https://recordboy.github.io/2020/03/07/react-jsx/</guid>
      <pubDate>Sat, 07 Mar 2020 10:57:39 GMT</pubDate>
      
      <description>&lt;p&gt;JSX란 자바스크립트를 확장한 문법이다. 얼핏 보면 HTML과 비슷하여 템플릿 언어가 떠오를 수도 있지만, 자바스크립트의 모든 기능이 포함되어 있다. JSX를 제대로 사용하기 위해서 몇가지 규칙을 준수해줘야 한다. 이전 포스팅 &lt;a href=&quot;https://recordboy.github.io/react-component/&quot;&gt;[React] React 시작하기&lt;/a&gt;에 나온 &lt;code&gt;App.js&lt;/code&gt;파일에 예제를 작성하여 진행하겠다. 기존의 코드는 지우고 클래스 방식으로 컴포넌트를 만들어준 뒤 아래 예제들을 살펴보겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>JSX란 자바스크립트를 확장한 문법이다. 얼핏 보면 HTML과 비슷하여 템플릿 언어가 떠오를 수도 있지만, 자바스크립트의 모든 기능이 포함되어 있다. JSX를 제대로 사용하기 위해서 몇가지 규칙을 준수해줘야 한다. 이전 포스팅 <a href="https://recordboy.github.io/react-component/">[React] React 시작하기</a>에 나온 <code>App.js</code>파일에 예제를 작성하여 진행하겠다. 기존의 코드는 지우고 클래스 방식으로 컴포넌트를 만들어준 뒤 아래 예제들을 살펴보겠다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="JSX-엘리먼트-규칙"><a href="#JSX-엘리먼트-규칙" class="headerlink" title="JSX 엘리먼트 규칙"></a>JSX 엘리먼트 규칙</h2><h3 id="태그는-꼭-닫혀줘야-된다"><a href="#태그는-꼭-닫혀줘야-된다" class="headerlink" title="태그는 꼭 닫혀줘야 된다."></a>태그는 꼭 닫혀줘야 된다.</h3><p><code>&lt;div&gt;</code>를 열었으면 꼭<code>&lt;/div&gt;</code>로 태그를 닫아주도록 한다. 또한 input이나 br태그 같은 단일 태그들은 HTML5에서 안닫아도 상관 없었지만, 리액트에서는 오류를 출력하므로 꼭 태그를 닫아주도록 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span>&gt; <span class="comment">// error</span></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="하나의-엘리먼트로-감싸줘야-한다"><a href="#하나의-엘리먼트로-감싸줘야-한다" class="headerlink" title="하나의 엘리먼트로 감싸줘야 한다."></a>하나의 엘리먼트로 감싸줘야 한다.</h3><p>리턴값이 두개의 엘리먼트로 되어있으면 오류를 출력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt; <span class="comment">// error</span></span><br><span class="line">        my</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        app</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>위 문제를 해결하기 위해서 두개의 엘리먼트를 하나의 엘리먼트로 감싸야 한다.</p><h3 id="하나의-엘리먼트로-감싸기-까다로운-경우"><a href="#하나의-엘리먼트로-감싸기-까다로운-경우" class="headerlink" title="하나의 엘리먼트로 감싸기 까다로운 경우"></a>하나의 엘리먼트로 감싸기 까다로운 경우</h3><p>하지만 위처럼 하나의 엘리먼트로 감싸기엔 까다로운 경우가 있다. CSS로 인한 스타일 관련 문제나 table관련 태그를 작성할 때 번거로운 경우이다. 이럴때는 아래처럼 <code>Fragment</code>을 사용하면 된다.(이 기능은 v.16.2에 도입되었다.)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          my</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          app</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/Fragment&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>나눠진 엘리먼트를 <code>Fragment</code>로 감싼뒤 <code>import</code>의 <code>&#123; Component &#125;</code>에 <code>Fragment</code>을 추가하면 된다.</p><h2 id="JSX-자바스크립트-사용하기"><a href="#JSX-자바스크립트-사용하기" class="headerlink" title="JSX 자바스크립트 사용하기"></a>JSX 자바스크립트 사용하기</h2><h3 id="변수-사용하기"><a href="#변수-사용하기" class="headerlink" title="변수 사용하기"></a>변수 사용하기</h3><p>JSX 내부에서 변수를 사용 할 땐 아래처럼 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;my-app&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        hello &#123;name&#125; <span class="comment">// hello my-app</span></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>JSX 내부에 <code>&#123;&#125;</code>(중괄호)안에 자바스크립트 구문을 넣어 주면 된다. </p><h3 id="조건부-렌더링"><a href="#조건부-렌더링" class="headerlink" title="조건부 렌더링"></a>조건부 렌더링</h3><p>JSX 내부에서 조건부 렌더링을 할 때는 보통 삼항 연산자를 사용하거나, AND연산자(&amp;&amp;)를 사용한다. 반면에 if문은 사용할 수 없으며, 사용하려면 즉시함수를 실행해야 한다.</p><h4 id="삼항연산자"><a href="#삼항연산자" class="headerlink" title="삼항연산자"></a>삼항연산자</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span> <span class="comment">// 참</span></span><br><span class="line">          ? <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>참<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          : <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>거짓<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="AND연산자"><a href="#AND연산자" class="headerlink" title="AND연산자"></a>AND연산자</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span> <span class="comment">// 참</span></span><br><span class="line">          &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>참<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>참고로 AND연산자의 경우 <code>true</code>일때만 값을 보여주고, <code>false</code>일때는 아무것도 보여주지 않는다.</p><h4 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span>) &#123; <span class="comment">// 참</span></span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>참<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>거짓<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)()</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>위처럼 JSX 내부에서 로직을 작성할 수 있지만 복잡한 로직을 작성해야 할 때는 JSX 밖에서 로직을 작성하는 것이 좋다. 하지만 꼭 JSX 내부에서 작성해야 한다면 위처럼 즉시실행함수를 사용하면 된다.</p><h2 id="style과-className"><a href="#style과-className" class="headerlink" title="style과 className"></a>style과 className</h2><p>JSX에서 CSS와 class명은 HTML에서 작성하는 방법과 약간 다르다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = &#123;</span><br><span class="line">      padding: <span class="string">&#x27;10px&#x27;</span>,</span><br><span class="line">      fontSize: <span class="string">&#x27;15px&#x27;</span>,</span><br><span class="line">      fontWeight: <span class="string">&#x27;bold&#x27;</span>,</span><br><span class="line">      backgroundColor: <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;style&#125;&gt;</span><br><span class="line">        my-app</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>HTML에서는 그냥 텍스트 형태로 <code>=&quot;padding: 10px; font-size: 15px;&quot;</code> 이런 형태로 작성하였다면 리액트에서는 객체 형태로 작성해줘야 한다. 그리고 class는 <code>class</code>대신에 <code>className</code>을 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">        my-app</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><p>주석은 아래처럼 <code>&#123;/* 내용 */&#125;</code> 사이에 넣거나, 태그 사이에 넣을 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="comment">/* 주석 내용 */</span>&#125;</span><br><span class="line">        &lt;div</span><br><span class="line">        <span class="comment">// 태그 사이에 주석 내용</span></span><br><span class="line">        &gt;my-app</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velopert.com/3626">누구든지 하는 리액트 3편: JSX</a><br><a href="https://ko.reactjs.org/docs/introducing-jsx.html">JSX 소개</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/react/">react</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      <category domain="https://recordboy.github.io/tags/jsx/">jsx</category>
      
      
      <comments>https://recordboy.github.io/2020/03/07/react-jsx/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트 초기 세팅 및 컴포넌트</title>
      <link>https://recordboy.github.io/2020/03/06/react-component/</link>
      <guid>https://recordboy.github.io/2020/03/06/react-component/</guid>
      <pubDate>Fri, 06 Mar 2020 10:55:52 GMT</pubDate>
      
      <description>&lt;p&gt;리액트는 제이쿼리처럼 단순히 &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;script&amp;gt;&lt;/code&gt;의 형태로 사용했던 것처럼 사용하지 않는다. 이렇게 하려면 가능은 하지만 굉장히 제한적이다. 리액트를 제대로 작업하려면 로컬에 Node, Npm, Webpack, Babel 등의 도구를 설치하여 프로젝트를 설정해주어야 한다. 리액트 프로젝트를 바닥부터 설정하는 것은 꽤나 복잡하지만, 페이스북에서 제공해주는 &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;도구 를 통하여 간단히 리액트 프로젝트를 준비할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트는 제이쿼리처럼 단순히 <code>&lt;script src=&quot;...&quot;&gt;&lt;script&gt;</code>의 형태로 사용했던 것처럼 사용하지 않는다. 이렇게 하려면 가능은 하지만 굉장히 제한적이다. 리액트를 제대로 작업하려면 로컬에 Node, Npm, Webpack, Babel 등의 도구를 설치하여 프로젝트를 설정해주어야 한다. 리액트 프로젝트를 바닥부터 설정하는 것은 꽤나 복잡하지만, 페이스북에서 제공해주는 <a href="https://github.com/facebook/create-react-app">create-react-app</a>도구 를 통하여 간단히 리액트 프로젝트를 준비할 수 있다.</p><a id="more"></a><h2 id="프로젝트-시작하기"><a href="#프로젝트-시작하기" class="headerlink" title="프로젝트 시작하기"></a>프로젝트 시작하기</h2><h3 id="설치-환경"><a href="#설치-환경" class="headerlink" title="설치 환경"></a>설치 환경</h3><ul><li>node.js</li><li>npm</li></ul><h3 id="전역에-create-react-app-설치"><a href="#전역에-create-react-app-설치" class="headerlink" title="전역에 create-react-app 설치"></a>전역에 create-react-app 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g create-react-app</span><br></pre></td></tr></table></figure><h3 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 자바스크립트를 사용</span><br><span class="line">$ create-react-app 프로젝트명 --use-npm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 타입스크립트 사용</span><br><span class="line">$ create-react-app 프로젝트명 --use-npm --template typescript</span><br></pre></td></tr></table></figure><h3 id="프로젝트-실행"><a href="#프로젝트-실행" class="headerlink" title="프로젝트 실행"></a>프로젝트 실행</h3><p>해당 디렉토리로 이송해서 명령어를 실행하면 리액트 앱이 <code>localhost:3000</code>에 실행된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 프로젝트명</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><h2 id="디렉토리-구조"><a href="#디렉토리-구조" class="headerlink" title="디렉토리 구조"></a>디렉토리 구조</h2><p>기본적인 디렉토리 구조는 아래와 같다. 프로젝트마다 디렉토리 구조는 약간씩 다르기 때문에 정확히 어느 구조가 맞다고 정의하긴 힘들다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└── project</span><br><span class="line">    ├── build &#x2F;&#x2F; npm run build 커맨드를 통해 생성된 react 배포 폴더</span><br><span class="line">    │   └── static</span><br><span class="line">    │       ├── css</span><br><span class="line">    │       ├── js</span><br><span class="line">    │       └── media</span><br><span class="line">    ├── node_modules &#x2F;&#x2F; npm install 을 통해 설치된 모듈들이 위치하는 폴더</span><br><span class="line">    ├── public &#x2F;&#x2F; 서버 root</span><br><span class="line">    ├── src &#x2F;&#x2F; components &#x2F; containers &#x2F; pages &#x2F; store 등이 위치하는 폴더</span><br><span class="line">    │   ├── components &#x2F;&#x2F; 컴포넌트 파일들이 위치하는 폴더</span><br><span class="line">    │   ├── containers &#x2F;&#x2F; 컨테이너 파일들이 위치하는 폴더</span><br><span class="line">    │   ├── pages &#x2F;&#x2F; routing을 위한 페이지 파일들이 위치하는 폴더</span><br><span class="line">    │   ├── store &#x2F;&#x2F; redux 작업을 위한 폴더, 내부에 actions, reducers 폴더 존재</span><br><span class="line">    │   └── ..</span><br><span class="line">    └── package .. &#x2F;&#x2F; version, dependencies, proxy 등의 정보가 들어있는 파일</span><br></pre></td></tr></table></figure><h2 id="컴포넌트-파일-살펴보기"><a href="#컴포넌트-파일-살펴보기" class="headerlink" title="컴포넌트 파일 살펴보기"></a>컴포넌트 파일 살펴보기</h2><p><code>src</code> 폴더의 <code>App.js</code>파일을 열어본다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span> /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          className=<span class="string">&quot;App-link&quot;</span></span><br><span class="line">          href=<span class="string">&quot;https://reactjs.org&quot;</span></span><br><span class="line">          target=<span class="string">&quot;_blank&quot;</span></span><br><span class="line">          rel=<span class="string">&quot;noopener noreferrer&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">          Learn React</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><code>App.js</code>파일의 코드가 무엇을 의미하는지 위에서부터 알아보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>import</code>는 파일을 불러오겠다는 것이다. 첫번째 코드는 리액트와 그 내부의 <code>Component</code>를 불러온다. 파일에서 <code>JSX</code>를 사용하려면, 꼭 <code>React</code>를 <code>import</code>해주어야 한다. 그 아래에는 같은 디렉토리의 <code>logo.svg</code>와 <code>App.css</code>를 불러온다는 것이다.</p><h3 id="함수를-이용한-컴포넌트-생성"><a href="#함수를-이용한-컴포넌트-생성" class="headerlink" title="함수를 이용한 컴포넌트 생성"></a>함수를 이용한 컴포넌트 생성</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 여기서부터 JSX</span></span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span> /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          className=<span class="string">&quot;App-link&quot;</span></span><br><span class="line">          href=<span class="string">&quot;https://reactjs.org&quot;</span></span><br><span class="line">          target=<span class="string">&quot;_blank&quot;</span></span><br><span class="line">          rel=<span class="string">&quot;noopener noreferrer&quot;</span></span><br><span class="line">        &gt;</span><br><span class="line">          Learn React</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="comment">// 여기서까지 JSX</span></span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>App</code>함수를 생성하여 컴포넌트를 만들었다. 리액트에서 컴포넌트를 만드는 방법은 두가지가 있으며 위처럼 함수를 이용하여 만드는 방법과, 클래스를 이용하여 만드는 방법이 있다. 함수형 컴포넌트와 클래스형 컴포넌트의 주요 차이점은 함수형 클래스는 state와 life cycle이 빠져있다는 점이다. 그래서 컴포넌트 초기 마운트가 아주 미세하게 빠르고, 메모리 자원을 덜 사용하지만 컴포넌트를 무수히 많이 랜더링하는게 아니라면 성능에 큰 차이는 없다. state와 life cycle는 추후에 알아보도록 하고, 지금부터는 클래스형 컴포넌트로 작성하도록 하겠다. </p><h3 id="클래스를-이용한-컴포넌트-생성"><a href="#클래스를-이용한-컴포넌트-생성" class="headerlink" title="클래스를 이용한 컴포넌트 생성"></a>클래스를 이용한 컴포넌트 생성</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 여기서부터 JSX</span></span><br><span class="line">      &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span> /&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">          &lt;a</span><br><span class="line">            className=<span class="string">&quot;App-link&quot;</span></span><br><span class="line">            href=<span class="string">&quot;https://reactjs.org&quot;</span></span><br><span class="line">            target=<span class="string">&quot;_blank&quot;</span></span><br><span class="line">            rel=<span class="string">&quot;noopener noreferrer&quot;</span></span><br><span class="line">          &gt;</span><br><span class="line">            Learn React</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      <span class="comment">// 여기서까지 JSX</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 형태로 만들어진 컴포넌트에는 꼭, <code>render</code>함수가 있어야 하며, 그 내부에서는 JSX를 리턴해줘야 한다. 위에 보이는 HTML같은 코드가 JSX이다. 또 하나, 클래스형 컴포넌트를 작성하기위해선 <code>import</code>에 아래처럼 <code>&#123; Component &#125;</code>를 추가하여 작성해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>App.js</code>의 마지막줄은 생성된 컴포넌트를 내보내고 있으며, 다른곳에서 사용할 수 있도록 해준다. 아래처럼 작성하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>이제 컴포넌트를 생성하고 내보냈으니, 이 컴포넌트를 불러오는 <code>index.js</code>파일을 열어보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">&#x27;./serviceWorker&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want your app to work offline and load faster, you can change</span></span><br><span class="line"><span class="comment">// unregister() to register() below. Note this comes with some pitfalls.</span></span><br><span class="line"><span class="comment">// Learn more about service workers: https://bit.ly/CRA-PWA</span></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure><p>우리가 만든 컴포넌트를 아래처럼 <code>import</code>로 불러오고 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br></pre></td></tr></table></figure><p>받은 컴포넌트를 브라우저상에 보여주려면 <code>ReactDOM.render</code>함수를 사용한다. 첫번째 파라미터는 렌더링 할 결과물이고, 두번째 파라미터는 컴포넌트를 어떤 DOM에 그릴지 정해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;React.StrictMode&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/React.StrictMode&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>위처럼 첫번째 파라미터로 랜더링할 컴포넌트를 받고 있으며(<code>&lt;React.StrictMode&gt;</code>는 리액트의 엄격한 모드이다.), 두번째 파라미터로 <code>document.getElementById(&#39;root&#39;)</code>를 받고있다. <code>id</code>가 <code>root</code>인 돔을 찾아 그리도록 설정이 되어있으며, 해당 DOM은 <code>public/index.html</code>파일 안의 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>를 찾아서 랜더링을 하게 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velopert.com/3621">누구든지 하는 리액트 2편: 리액트 프로젝트 시작하기</a><br><a href="https://uhou.tistory.com/168">[React] 프로젝트 디렉토리 구조 파악하기</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/react/">react</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      
      <comments>https://recordboy.github.io/2020/03/06/react-component/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[React] 리액트 소개</title>
      <link>https://recordboy.github.io/2020/03/05/react-introduce/</link>
      <guid>https://recordboy.github.io/2020/03/05/react-introduce/</guid>
      <pubDate>Thu, 05 Mar 2020 10:54:10 GMT</pubDate>
      
      <description>&lt;p&gt;리액트는 페이스북이 제작한 프론트엔드 라이브러리이다. 프론트엔드 프레임워크/라이브러리는 대표적으로 React, Angular, Vue 이렇게 세가지가 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트는 페이스북이 제작한 프론트엔드 라이브러리이다. 프론트엔드 프레임워크/라이브러리는 대표적으로 React, Angular, Vue 이렇게 세가지가 있다.</p><a id="more"></a><h2 id="종류"><a href="#종류" class="headerlink" title="종류"></a>종류</h2><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><ul><li>UI를 구현하게 되면서, 앵귤러만의 문법같은 것들이 다양하게 존재</li><li>라우터, HTTP 클라이언트 등 웹 프로젝트에서 필요한 대부분의 도구들이 프레임워크 안에 내장되어 있음</li><li>앵귤러1의 경우 만들어진지 꽤 오래 되었고, 기업에서 많이 사용해서, 유지보수하고 있는 프로젝트가 많음</li><li>앵귤러2의 경우 매우 성숙하지만, 인지도 측면에서는 아직 성장하는중이며, 주로 타입스크립트랑 함께 사용됨</li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>컴포넌트(UI를 조립해서 보여줌)라는 개념에 집중이 되어있는 라이브러리</li><li>생테계가 넒고 사용하는 곳도 많음</li><li>HTTP 클라이언트, 라우터, 심화적 상태 관리등의 기능들은 내장되어있지 않음, 따로 공식 라이브러리가 있는 것도 아니여서, 개발자가 원하는 스택을 마음대로 골라서 사용할 수 있음(혹은 직접 라이브러리를 만들어서 쓸 수도 있음)</li><li>큰 규모의 앱을 만든다면 React</li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li>입문자가 사용하기에 적합함</li><li>대부분 웹팩같은 모듈 번들러를 사용하여 프로젝트를 구성해야하는 앵귤러와 리액트와는 달리, 다순히 CDN에 있는 파일을 로딩하는 형태로 스크립트를 불러와서 사용하기 편리(물론 CLI로 프로젝트를 구성할 수 있음)</li><li>HTML을 템플릿처럼 그대로 사용할 수 있어 마크업을 만들어주는 디자이너/퍼블리셔가 있는 경우 작업 환경이 매끄러움(Templates 형식으로 앱 제작)</li><li>공식 라우터, 상태관리 라이브러리가 존재</li><li>빠르고 경량의 앱을 제작하고 싶다면 Vue</li></ul><h2 id="쓰는-이유"><a href="#쓰는-이유" class="headerlink" title="쓰는 이유"></a>쓰는 이유</h2><p>웹사이트를 만들기 위해선 굳이 프로트엔드 라이브러리의 도움 없이 만들 수 있다. 더군다나 정직인 웹사이트는 HTML, CSS만 사용하여 제작이 가능하다. 거기에 자바스크립트를 더해주면, 유저의 행동에 따라 동적으로 화면을 보여주게 될 것이다.</p><p>하지만 프로젝트 규모가 커지고, 다양한 유저 인터페이스를 제공하게 된다면, 그 많은 DOM 요소들을 직접 관리하고 코드 정리하는건 갈수록 정말 힘든 일이 될 것이다. 귀찮은 DOM 관리와 상태값 업데이트를 최소화하고, 오직 개발, 그리고 사용자 인터페이스를 구현하는 것에 집중할 수 있다록 하기 위하여 여러개의 라이브러리/프레임워크들이 만들어 졌다.</p><h2 id="무엇을-써야-하나"><a href="#무엇을-써야-하나" class="headerlink" title="무엇을 써야 하나"></a>무엇을 써야 하나</h2><p>답은 정해져 있지 않다. 어떠한 프로젝트를 하냐에 따라 알맞은 프레임워크/라이브러리를 선택하면 된다. 이 포스팅에서는 리액트에 대해 알아 볼 것이다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://velopert.com/3612">누구든지 하는 리액트 1편: 리액트는 무엇인가</a><br><a href="https://joshua1988.github.io/web_dev/vue-or-react/">React 인가 Vue 인가?</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/react/">react</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/react/">react</category>
      
      
      <comments>https://recordboy.github.io/2020/03/05/react-introduce/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES6 클래스(Class)</title>
      <link>https://recordboy.github.io/2020/03/04/javascript-es6-class/</link>
      <guid>https://recordboy.github.io/2020/03/04/javascript-es6-class/</guid>
      <pubDate>Wed, 04 Mar 2020 10:53:03 GMT</pubDate>
      
      <description>&lt;p&gt;ES6에서 &lt;code&gt;class&lt;/code&gt;라는 문법이 추가되었고, 기존의 prototype 기반으로 클래스를 선언하는 것보다 명료하게 클래스를 선언할 수 있게 되었다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>ES6에서 <code>class</code>라는 문법이 추가되었고, 기존의 prototype 기반으로 클래스를 선언하는 것보다 명료하게 클래스를 선언할 수 있게 되었다. </p><a id="more"></a><h2 id="기존-ES5-클래스-생성자"><a href="#기존-ES5-클래스-생성자" class="headerlink" title="기존(ES5) 클래스(생성자)"></a>기존(ES5) 클래스(생성자)</h2><p>함수를 만들 때는 함수 표현식과 선언식이 있으며, 선언식으로 작성한 클래스는 호이스팅이 일어난다. 여기서 호이스팅이란 함수를 선언했을 때 값들이 유효범위 최상단에 선언되는 것을 말한다.</p><h3 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h3><p>클래스가 선언되기 전에 인스턴스를 생성하여 에러가 뜬다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">&#x27;한나&#x27;</span>);</span><br><span class="line">obj.getName(); <span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="함수-선언식"><a href="#함수-선언식" class="headerlink" title="함수 선언식"></a>함수 선언식</h3><p>인스턴스를 함수 선언 전에 생성해도 오류가 나지 않는다. 클래스를 선언식으로 작성하여 호이스팅되었기 때문이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">&#x27;한나&#x27;</span>);</span><br><span class="line">obj.getName(); <span class="comment">// 한나</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="새로운-ES6-클래스-생성자"><a href="#새로운-ES6-클래스-생성자" class="headerlink" title="새로운(ES6) 클래스(생성자)"></a>새로운(ES6) 클래스(생성자)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Person(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line">obj.getName(); <span class="comment">// 민수</span></span><br></pre></td></tr></table></figure><p>위 코드는 새로운 클래스 키워드로 클래스를 선언하고 인스턴스를 만든 것이다. 함수 선언이 표현식과 선언식이 있듯이 클래스 키워드도 선언식과 표현식 두가지 방법으로 정의가 가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Person(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line">obj.getName(); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 에러를 출력하고 있다. 이유는 새로운 클래스는 호이스팅이 일어나지 않는다. 아니 엄밀히 말해 호이스팅이 발생하지 않는 것처럼 동작하는건데 이거는 추후에 알아보도록 하겠다.</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p><code>constructor</code>는 인스턴스를 생성하고 <em>클래스 필드</em>를 초기화하기 위한 특수한 메서드이다.</p><blockquote><p><em>클래스 필드(class field)</em><br>클래스 내부의 캡슐화된 변수를 말하며, 데이터 혹은 멤버 변수라고 부른다. 자바스크립트의 생성자 함수에서 this에 추가한 프로퍼티를 클래스 기반 객체지향 언어에서는 클래스 필드라고 부른다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 여기서 this는 생성될 인스턴스를 바라보고 있다.</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>constructor</code>는 클래스 내에 한 개만 존재할 수 있으며 이 함수 안에 프로퍼티를 작성하면 되며, 이 안에서 <code>this</code>는 생성될 인스턴스를 바라보고 있다.</p><h3 id="메서드-정의"><a href="#메서드-정의" class="headerlink" title="메서드 정의"></a>메서드 정의</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 클래스 몸체에는 메서드만 선언할 수 있다.</span></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스 몸체 안에는 메서드만 선언할 수 있다. 클래스 몸체 안에 프로퍼티를 선언하면 오류를 출력한다.</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>ES6 클래스는 <code>extends</code>키워드로 상속을 구현한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 슈퍼&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">Wrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getName()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 상속 받은 클래스&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Inner(<span class="string">&#x27;안녕&#x27;</span>);</span><br><span class="line">obj.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 결과</span></span><br><span class="line"><span class="comment">// 안녕 슈퍼</span></span><br><span class="line"><span class="comment">// 안녕 상속 받은 클래스</span></span><br></pre></td></tr></table></figure><p>위 코드를 보면 <code>Inner</code>는 <code>Wrap</code>를 상속 받았으며, <code>new Inner(&#39;안녕&#39;)</code>를 실행하면 아래의 과정을 거치게 된다.</p><ol><li><code>Inner</code>클래스의 <code>constructor</code>를 호출</li><li><code>Inner</code>클래스의 <code>constructor</code>를 작성하지 않았기 때문에 <code>super</code>클래스(<code>Wrap</code>)의 <code>constructor</code>가 호출됨(내부적으로 프로토타입 체인으로 인해)</li><li><code>super</code>클래스의 <code>constructor</code>에서 this는 현재의 인스턴스를 참조하므로 인스턴스의 name프로퍼티로 전달받은 값을 설정</li><li>생성한 인스턴스를 <code>Inner</code>에 할당</li></ol><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>위에 코드에서도 잠깐 나왔지만 <code>super</code>키워드는 슈퍼 클래스의 메서드를 호출할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;안녕&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">Wrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 슈퍼 클래스의 msg메서드를 실행한다.</span></span><br><span class="line">        <span class="built_in">super</span>.msg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Inner();</span><br><span class="line">obj.msg();</span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p><code>static</code>키워드는 클래스를 위한 정적(static) 메서드를 정의한다. 정적 메서드는 prototype에 연결되지 않고 클래스에 직접 연결되기 때문에 클래스의 인스턴스 없이 호출되며, 클래스의 인스턴스에서는 호출할 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 인스턴스 없이 클래스에 바로 메서드를 선언해줌</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;안녕&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inner.msg(); <span class="comment">// 안녕</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Inner();</span><br><span class="line">obj.msg(); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>동일한 클래스 내의 다른 정적 메서드 내에서 정적 메서드를 호출하는 경우 키워드 this를 사용할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">msg</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;안녕&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">msg2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inner.msg2(); <span class="comment">// 안녕</span></span><br></pre></td></tr></table></figure><p>정적 메서드는 어플리케이션을 위한 유틸리티 함수를 생성하는데 주로 사용된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/super">super</a><br><a href="https://velog.io/@hytenic/Javascript-javascript-OOP-Class-Super">[JS] javascript - OOP Class, Super</a><br><a href="https://jongmin92.github.io/2017/06/18/JavaScript/class/#index">ES6 Class 파헤치기</a><br><a href="https://poiemaweb.com/es6-class">클래스</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es6/">es6</category>
      
      
      <comments>https://recordboy.github.io/2020/03/04/javascript-es6-class/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Github] 깃허브 호스팅 페이지에서 404 오류 나올 경우</title>
      <link>https://recordboy.github.io/2020/03/03/github-page-404-error/</link>
      <guid>https://recordboy.github.io/2020/03/03/github-page-404-error/</guid>
      <pubDate>Tue, 03 Mar 2020 10:50:48 GMT</pubDate>
      
      <description>&lt;p&gt;깃허브 호스팅 페이지가 404에러가 뜰 경우 아래 명령어를 실행하자, 설명은 아래 레퍼런스 참조&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>깃허브 호스팅 페이지가 404에러가 뜰 경우 아래 명령어를 실행하자, 설명은 아래 레퍼런스 참조</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --allow-empty -m &#39;Trigger rebuild&#39;</span><br><span class="line">$ git push origin</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages/45907768#45907768">How to fix HTTP 404 on Github Pages?</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/git/">git</category>
      
      <category domain="https://recordboy.github.io/categories/git/github/">github</category>
      
      
      <category domain="https://recordboy.github.io/tags/git/">git</category>
      
      <category domain="https://recordboy.github.io/tags/github/">github</category>
      
      
      <comments>https://recordboy.github.io/2020/03/03/github-page-404-error/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 이벤트 위임(Event Delegation)</title>
      <link>https://recordboy.github.io/2020/03/02/javascript-event-delegation/</link>
      <guid>https://recordboy.github.io/2020/03/02/javascript-event-delegation/</guid>
      <pubDate>Mon, 02 Mar 2020 10:05:42 GMT</pubDate>
      
      <description>&lt;p&gt;어플리케이션을 제작할 때 사용자가 페이지 요소들을 조작할 수 있도록 페이지의 버튼, 텍스트 등에 이벤트를 붙여야 할 때가 있다. 아래 리스트의 각 요소를 클릭하면 경고창이 뜨는 이벤트를 걸어줘야 된다고 가정해보면 아래처럼 구현할 것이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>어플리케이션을 제작할 때 사용자가 페이지 요소들을 조작할 수 있도록 페이지의 버튼, 텍스트 등에 이벤트를 붙여야 할 때가 있다. 아래 리스트의 각 요소를 클릭하면 경고창이 뜨는 이벤트를 걸어줘야 된다고 가정해보면 아래처럼 구현할 것이다.</p><a id="more"></a><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list05<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>javascript</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>).getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; item.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 각 li에 이벤트 리스너를 등록한다.</span></span><br><span class="line">    item[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(e.target.innerText);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>결과</strong></p><ul id="list">    <li>list01</li>    <li>list02</li>    <li>list03</li>    <li>list04</li>    <li>list05</li></ul><script>var item = document.getElementById('list').getElementsByTagName('li');for (var i = 0; i < item.length; i++) {    // 각 li에 이벤트 리스너를 등록한다.    item[i].addEventListener('click', function(e) {        alert(e.target.innerText);    })}</script><p>리스트 요소가 많이 없는 경우 위 코드는 별 문제가 되지 않는다. 하지만 리스트 요소가 천개, 만개라면 일일히 분리된 이벤트 리스너를 생성하고, 그걸 각각 요소에 등록할 것이다. 이는 매우 비효율적인 방법이다. 아이템 갯수마다 이벤트 리스너를 생성, 등록하는 것보다는 감싸고 있는 리스트에 한개의 이벤트를 등록하고, 조건을 달아줘서 리스트의 요소를 클릭했을시에만 경고창을 출력하도록 구현하면 된다.</p><p><strong>javascript</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> item = list.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리스트에 이벤트를 등록</span></span><br><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 리스트 요소일 때 경고창 출력</span></span><br><span class="line">    <span class="keyword">if</span> (e.target.nodeName === <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">        alert(e.target.innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://joshua1988.github.io/web-development/javascript/javascript-interview-3questions/">자바스크립트 코딩 면접에서 알고 있어야 할 3가지 질문</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/03/02/javascript-event-delegation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[CSS] 수정, 배포 CSS파일 캐시 방지</title>
      <link>https://recordboy.github.io/2020/03/01/cache-css/</link>
      <guid>https://recordboy.github.io/2020/03/01/cache-css/</guid>
      <pubDate>Sun, 01 Mar 2020 09:58:52 GMT</pubDate>
      
      <description>&lt;p&gt;웹사이트를 운영중 이미지 및 css 또는 js를 수정해도 반영이 안되어있을 때가 있다. 브라우저 내에 저장되어 있는 캐시 때문인데, 이를 해결하려면 사용자가 직접 캐시를 지우거나 강력 새로고침을 해야하는 번거로운 상황이 있다. 이를 방지하려면 작업자가 수정된 파일의 url 뒤에 &lt;code&gt;?ver=1&lt;/code&gt;라고 쿼리스트링을 붙여주면버전 정보를 적어주면 브라우저가 새로운 파일로 인식하고 파일들을 다시 다운로드 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>웹사이트를 운영중 이미지 및 css 또는 js를 수정해도 반영이 안되어있을 때가 있다. 브라우저 내에 저장되어 있는 캐시 때문인데, 이를 해결하려면 사용자가 직접 캐시를 지우거나 강력 새로고침을 해야하는 번거로운 상황이 있다. 이를 방지하려면 작업자가 수정된 파일의 url 뒤에 <code>?ver=1</code>라고 쿼리스트링을 붙여주면버전 정보를 적어주면 브라우저가 새로운 파일로 인식하고 파일들을 다시 다운로드 한다.</p><a id="more"></a><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./common.css?ver=1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>위 방법은 수정될 때 마다 쿼리스트링을 변경해줘야되는데, 이것도 번거롭다면 자바스크립트를 이용하여 동적으로 랜덤한 쿼리스트링을 생성하여 붙여주는 방법이 있다.</p><p><strong>javascript</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bust = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">1000</span>));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;link type=&quot;text/css&quot; href=&quot;./common.css?bust=&#x27;</span> + bust + <span class="string">&#x27;&quot; /&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>이 방법은 브라우저가 로딩될 때 마다 쿼리스트링 값이 다르기 때문에 항상 파일을 새로 불러오게 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://www.letmecompile.com/css-js-%ED%8C%8C%EC%9D%BC-%EC%BA%90%EC%8B%9C-%EB%B0%A9%EC%A7%80/">수정배포된 CSS/JS 파일 캐시 방지</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/css/">css</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/css/">css</category>
      
      
      <comments>https://recordboy.github.io/2020/03/01/cache-css/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.reduce</title>
      <link>https://recordboy.github.io/2020/02/21/javascript-array-reduce/</link>
      <guid>https://recordboy.github.io/2020/02/21/javascript-array-reduce/</guid>
      <pubDate>Fri, 21 Feb 2020 09:57:42 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.reduce&lt;/code&gt;메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 이전 리턴값을 넘겨 받는다. 이전 값을 넘겨 받아 현재 값과 어떠한 작업을 수행하고 싶을 때 적합한 메서드이다. 인자 값이 다른 메서드와 약간 다르며, 콜백 함수 뒤에 인자를 하나 더 줄 수 있다. 이 인자는 첫 콜백함수의 이전 값으로 주입된다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.reduce</code>메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 이전 리턴값을 넘겨 받는다. 이전 값을 넘겨 받아 현재 값과 어떠한 작업을 수행하고 싶을 때 적합한 메서드이다. 인자 값이 다른 메서드와 약간 다르며, 콜백 함수 뒤에 인자를 하나 더 줄 수 있다. 이 인자는 첫 콜백함수의 이전 값으로 주입된다.</p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>이전 콜백 함수에서 리턴한 값</li><li>현배 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 각 콜백 마다 리턴값을 previousItem로 넘겨받아 어떤 작업을 수행</span></span><br><span class="line"><span class="keyword">var</span> val = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousItem, currentItem, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 콜백의 리턴 값을 받아 현재의 값과 더하려 다시 리턴</span></span><br><span class="line">    <span class="keyword">return</span> previousItem + currentItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 첫번째 콜백의 previousItem값</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"><span class="comment">// 위 결과를 수식으로 나타내면 0 + 1 + 2 + 3 + 4 + 5 이다.(0부터 5까지의 합)</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">Array.prototype.reduce()</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/21/javascript-array-reduce/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.every</title>
      <link>https://recordboy.github.io/2020/02/20/javascript-array-every/</link>
      <guid>https://recordboy.github.io/2020/02/20/javascript-array-every/</guid>
      <pubDate>Thu, 20 Feb 2020 09:56:51 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.every&lt;/code&gt;메서드는 &lt;code&gt;Array.some&lt;/code&gt;와 비슷하지만 모든 요소가 조건을 만족해야 &lt;code&gt;true&lt;/code&gt;를 반환한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.every</code>메서드는 <code>Array.some</code>와 비슷하지만 모든 요소가 조건을 만족해야 <code>true</code>를 반환한다.</p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>현재 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열의 모든 요소가 10보다 작아야 true를 리턴</span></span><br><span class="line"><span class="keyword">var</span> val = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/every">Array.prototype.every()</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/20/javascript-array-every/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.some</title>
      <link>https://recordboy.github.io/2020/02/19/javascript-array-some/</link>
      <guid>https://recordboy.github.io/2020/02/19/javascript-array-some/</guid>
      <pubDate>Wed, 19 Feb 2020 09:55:20 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.some&lt;/code&gt;메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 하나의 요소라도 조건을 만족할 때 &lt;code&gt;true&lt;/code&gt;를 반환하며, 만족하지 않을 때 &lt;code&gt;false&lt;/code&gt;를 반환한다. 특정 조건을 만족하는지 알고 싶을 때 적합한 메서드다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.some</code>메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 하나의 요소라도 조건을 만족할 때 <code>true</code>를 반환하며, 만족하지 않을 때 <code>false</code>를 반환한다. 특정 조건을 만족하는지 알고 싶을 때 적합한 메서드다.</p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>현재 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 요소중에서 짝수가 있으면 메서드 수행을 중단하고 true를 리턴</span></span><br><span class="line"><span class="keyword">var</span> val = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line"><span class="comment">// ture</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some">Array.prototype.some()</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/19/javascript-array-some/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.filter</title>
      <link>https://recordboy.github.io/2020/02/18/javascript-array-filter/</link>
      <guid>https://recordboy.github.io/2020/02/18/javascript-array-filter/</guid>
      <pubDate>Tue, 18 Feb 2020 09:53:36 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.filter&lt;/code&gt;메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 특정 조건에 맞는 요소만 모아 배열로 리턴한다. 특정 케이스만 필터링해서 추출할 때 유용하다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.filter</code>메서드는 배열의 각 요소를 순회하며 콜백 함수를 실행하며 특정 조건에 맞는 요소만 모아 배열로 리턴한다. 특정 케이스만 필터링해서 추출할 때 유용하다. </p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>현재 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 요소중에서 모두 7보다 작은 요소만 모아 배열로 리턴</span></span><br><span class="line"><span class="keyword">var</span> val = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &lt; <span class="number">7</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(val);</span><br><span class="line"><span class="comment">// [1, 3, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a><br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/18/javascript-array-filter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.map</title>
      <link>https://recordboy.github.io/2020/02/17/javascript-array-map/</link>
      <guid>https://recordboy.github.io/2020/02/17/javascript-array-map/</guid>
      <pubDate>Mon, 17 Feb 2020 09:49:45 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.map&lt;/code&gt; 메서드는 &lt;code&gt;Array.forEach&lt;/code&gt;와 마찬가지로 배열의 각 요소를 순회하며 콜백 함수를 실행한다. 다만, 콜백에서 리턴되는 값을 배열로 만들어낸다. 원본 배열은 건들지 않고 그 요소들을 사용해서 혹은 약간 변형해서 새로운 배열을 만들어야 할 때 유용하다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.map</code> 메서드는 <code>Array.forEach</code>와 마찬가지로 배열의 각 요소를 순회하며 콜백 함수를 실행한다. 다만, 콜백에서 리턴되는 값을 배열로 만들어낸다. 원본 배열은 건들지 않고 그 요소들을 사용해서 혹은 약간 변형해서 새로운 배열을 만들어야 할 때 유용하다.</p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>현재 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//배열의 모든 요소에 NEW라는 문자열을 더하기</span></span><br><span class="line"><span class="comment">//메서드 수행 후 리턴값은 새로운 배열</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="string">&#x27;NEW&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 수행 후 원본 배열</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//메서드 수행 후 생성된 배열</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// [&quot;aNEW&quot;, &quot;bNEW&quot;, &quot;cNEW&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="실용적인-예제"><a href="#실용적인-예제" class="headerlink" title="실용적인 예제"></a>실용적인 예제</h2><p><code>Array.map</code> 메서드는 아래와 같이 쓰일 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;click&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;render()&quot;</span>&gt;</span>데이터 얻기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;tbl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>전화번호<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax를 통해 가져온 데이터라고 가정</span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;010-1000-2000&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;010-3000-4000&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        phone: <span class="string">&#x27;010-5000-6000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.map 메서드를 사용하여 배열 요소의 데이터를 html로 변경</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom = data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.name + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.phone + <span class="string">&#x27;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열을 하나의 값으로 만든 후 테이블에 html 추가</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTbl</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tblList = dom.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tbl&#x27;</span>).getElementsByTagName(<span class="string">&#x27;tbody&#x27;</span>)[<span class="number">0</span>].innerHTML = tblList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 로직을 실행</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = makeDom();</span><br><span class="line">    addTbl(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><button type="button" id="click" onclick="render()">데이터 얻기</button></p><table id="tbl">    <thead>        <th>이름</th>        <th>전화번호</th>    </thead>    <tbody></tbody></table><script>// ajax를 통해 가져온 데이터라고 가정var data = [    {        name: 'a',        phone: '010-1000-2000'    },    {        name: 'b',        phone: '010-3000-4000'    },    {        name: 'c',        phone: '010-5000-6000'    }];// Array.map 메서드를 사용하여 배열 요소의 데이터를 html로 변경function makeDom() {    var dom = data.map(function (item, index) {        return '<tr><td>' + item.name + '</td><td>' + item.phone + '</td></tr>';    });    return dom;}// 배열을 하나의 값으로 만든 후 테이블에 html 추가function addTbl(dom) {    var tblList = dom.join('');    document.getElementById('tbl').getElementsByTagName('tbody')[0].innerHTML = tblList;}// 위 로직을 실행function render() {    var list = makeDom();    addTbl(list);}</script><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a><br><a href="https://yuddomack.tistory.com/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Array-map">자바스크립트 Array map</a>  </p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/17/javascript-array-map/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5 Array.forEach</title>
      <link>https://recordboy.github.io/2020/02/16/javascript-array-foreach/</link>
      <guid>https://recordboy.github.io/2020/02/16/javascript-array-foreach/</guid>
      <pubDate>Sun, 16 Feb 2020 09:46:41 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;code&gt;Array.forEach&lt;/code&gt; 매서드는 배열 전체를 돌때, 요소마다 콜백 함수를 실행한다. 배열의 요소에 직접 어떠한 작업을 수행하고 싶을 때 적합한 메서드이다. &lt;code&gt;Array.forEach&lt;/code&gt; 메서드는 리턴 값이 없다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><code>Array.forEach</code> 매서드는 배열 전체를 돌때, 요소마다 콜백 함수를 실행한다. 배열의 요소에 직접 어떠한 작업을 수행하고 싶을 때 적합한 메서드이다. <code>Array.forEach</code> 메서드는 리턴 값이 없다.</p><a id="more"></a><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><ol><li>현재 배열 요소의 값</li><li>현재 배열 요소의 index</li><li>현재 돌고 있는 배열 자체</li></ol><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열의 모든 요소에 EDIT라는 문자열을 더하기</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  array[index] = item + <span class="string">&quot;EDIT&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://programmingsummaries.tistory.com/357">[JavaScript] Array 객체에서 놓치기 쉬운 6개의 메서드</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/16/javascript-array-foreach/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] ES5(ECMAScript 5)</title>
      <link>https://recordboy.github.io/2020/02/13/javascript-es5/</link>
      <guid>https://recordboy.github.io/2020/02/13/javascript-es5/</guid>
      <pubDate>Thu, 13 Feb 2020 06:12:44 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;ECMAScript-ES-의-정의&quot;&gt;&lt;a href=&quot;#ECMAScript-ES-의-정의&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript(ES)의 정의&quot;&gt;&lt;/a&gt;ECMAScript(ES)의 정의&lt;/h2&gt;&lt;p&gt;ECMAScript(ES)는 Ecma 인터내셔널의 ECMA-262 기술 규격에 정의된 표준화된 스크립트 프로그래밍 언어이다. 자바스크립트를 표준화하기 위해 만들어졌고 지금도 자바스크립트가 제일 잘 알려져 있지만, 액션스크립트와 J스크립트 등 다른 구현체도 포함하고 있다. ECMA스크립트는 웹의 클라이언트 사이드 스크립트로 많이 사용되며 Node.js를 사용한 서버 응용 프로그램 및 서비스에도 점차 많이 쓰이고 있다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="ECMAScript-ES-의-정의"><a href="#ECMAScript-ES-의-정의" class="headerlink" title="ECMAScript(ES)의 정의"></a>ECMAScript(ES)의 정의</h2><p>ECMAScript(ES)는 Ecma 인터내셔널의 ECMA-262 기술 규격에 정의된 표준화된 스크립트 프로그래밍 언어이다. 자바스크립트를 표준화하기 위해 만들어졌고 지금도 자바스크립트가 제일 잘 알려져 있지만, 액션스크립트와 J스크립트 등 다른 구현체도 포함하고 있다. ECMA스크립트는 웹의 클라이언트 사이드 스크립트로 많이 사용되며 Node.js를 사용한 서버 응용 프로그램 및 서비스에도 점차 많이 쓰이고 있다. </p><a id="more"></a><h2 id="ES5-ECMAScript-5"><a href="#ES5-ECMAScript-5" class="headerlink" title="ES5(ECMAScript 5)"></a>ES5(ECMAScript 5)</h2><p>자바스크립트는 계속해서 발전하며 기술이 추가되었고, 새로운 표준이 발표될 때 마다 ECMAScript 1, 2, 3, 4, 5, 6 … 뒤에 숫자를 붙여서 명명하였다. 우리가 기존에 쓰고 있는 JavaScript는 2009년에 발표된 ECMAScript 5(ES5)라고 생각하면 된다. ES5는 IE9에서 <code>use strict</code>를 지원하지 않는 것 빼고는 대부분의 브라우저 버전에서 ES5 문법을 지원한다.</p><h2 id="ES5에서-추가된-메서드-및-키워드"><a href="#ES5에서-추가된-메서드-및-키워드" class="headerlink" title="ES5에서 추가된 메서드 및 키워드"></a>ES5에서 추가된 메서드 및 키워드</h2><ul><li>use strict</li><li>String.trim()</li><li>Array.isArray()</li><li><a href="/2020/02/16/javascript-array-foreach/">Array.forEach()</a></li><li><a href="/2020/02/17/javascript-array-map/">Array.map()</a></li><li><a href="/2020/02/18/javascript-array-filter/">Array.filter()</a></li><li><a href="/2020/02/21/javascript-array-reduce/">Array.reduce()</a></li><li>Array.reduceRight()</li><li><a href="/2020/02/20/javascript-array-every/">Array.every()</a></li><li><a href="/2020/02/19/javascript-array-some/">Array.some()</a></li><li><a href="/2018/05/15/javascript-array-method/">Array.indexOf()</a></li><li>Array.lastIndexOf()</li><li>JSON.parse()</li><li>JSON.stringify()</li><li>Date.now()</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://k39335.tistory.com/81">[Javascript] ES5 (ECMAScript 5)</a><br><a href="https://yuddomack.tistory.com/entry/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Array-forEach?category=754152">자바스크립트 Array forEach</a><br><a href="https://ko.wikipedia.org/wiki/ECMA%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8">ECMA스크립트</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/es5/">es5</category>
      
      
      <comments>https://recordboy.github.io/2020/02/13/javascript-es5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SASS] SASS 연산(Operations)</title>
      <link>https://recordboy.github.io/2020/02/10/sass-operations/</link>
      <guid>https://recordboy.github.io/2020/02/10/sass-operations/</guid>
      <pubDate>Mon, 10 Feb 2020 06:11:16 GMT</pubDate>
      
      <description>&lt;p&gt;SASS는 기본적인 연산 기능을 지원한다. 레이아웃 작업시 상황에 맞게 크기를 계산하거나 정해진 값을 나눠서 작성할 경우 유용하다. 아래는 SASS에서 사용 가능한 연산자 종류이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>SASS는 기본적인 연산 기능을 지원한다. 레이아웃 작업시 상황에 맞게 크기를 계산하거나 정해진 값을 나눠서 작성할 경우 유용하다. 아래는 SASS에서 사용 가능한 연산자 종류이다.</p><a id="more"></a><h2 id="산술-연산자"><a href="#산술-연산자" class="headerlink" title="산술 연산자"></a>산술 연산자</h2><table><thead><tr><th align="center">종류</th><th align="center">설명</th><th align="left">주의사항</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">더하기</td><td align="left"></td></tr><tr><td align="center">-</td><td align="center">빼기</td><td align="left"></td></tr><tr><td align="center">*</td><td align="center">곱하기</td><td align="left">하나 이상의 값이 반드시 숫자(Number)</td></tr><tr><td align="center">/</td><td align="center">나누기</td><td align="left">오른쪽 값이 반드시 숫자(Number)</td></tr><tr><td align="center">%</td><td align="center">나머지</td><td align="left"></td></tr></tbody></table><h2 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h2><table><thead><tr><th align="center">종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="center">==</td><td align="left">동등</td></tr><tr><td align="center">!=</td><td align="left">부등</td></tr><tr><td align="center">&lt;</td><td align="left">대소 / 보다 작은</td></tr><tr><td align="center">&gt;</td><td align="left">대소 / 보다 큰</td></tr><tr><td align="center">&lt;=</td><td align="left">대소 및 동등 / 보다 작거나 같은</td></tr><tr><td align="center">&gt;=</td><td align="left">대소 및 동등 / 보다 크거나 같은</td></tr></tbody></table><h2 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h2><table><thead><tr><th align="center">종류</th><th align="left">설명</th></tr></thead><tbody><tr><td align="center">and</td><td align="left">그리고</td></tr><tr><td align="center">or</td><td align="left">또는</td></tr><tr><td align="center">not</td><td align="left">부정(반대)</td></tr></tbody></table><h2 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h2><p>일반적으로 절대값을 나타내는 px단위로 연산을 하지만, 상대적 단위(%, em, vw 등)의 연산의 경우 <code>calc()</code>로 연산 해야 한다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">50%</span> - <span class="number">20px</span>;  <span class="comment">// 단위 모순 에러(Incompatible units error)</span></span><br><span class="line"><span class="attribute">width</span>: calc(<span class="number">50%</span> - <span class="number">20px</span>);  <span class="comment">// 연산 가능</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>나누기 연산의 주의사항</strong><br>CSS는 속성 값의 숫자를 분리하는 방법으로 <code>/</code>를 허용하기 때문에 <code>/</code>가 나누기 연산으로 사용되지 않을 수 있다. 아래 예제를 보면 나누기 연산자만 연산 되지 않고 그대로 컴파일된다.</p></blockquote><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span> + <span class="number">20px</span>;  <span class="comment">// 더하기</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span> - <span class="number">10px</span>;  <span class="comment">// 빼기</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span> * <span class="number">2</span>;  <span class="comment">// 곱하기</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> / <span class="number">2</span>;  <span class="comment">// 나누기</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>/<span class="number">2</span>; <span class="comment">// Error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>따라서 <code>/</code>를 나누기 연산 기능으로 사용하려면 다음과 같은 조건을 충족해야 한다.</p><ul><li>값 또는 그 일부가 변수에 저장되거나 함수에 의해 반환되는 경우</li><li>값이 <code>()</code>로 묶여있는 경우</li><li>값이 다른 산술 표현식의 일부로 사용되는 경우</li></ul><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="variable">$x</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$x</span> / <span class="number">2</span>; <span class="comment">// 변수에 저장된 값을 나누기</span></span><br><span class="line">    <span class="attribute">height</span>: (<span class="number">100px</span> / <span class="number">2</span>); <span class="comment">// 괄호로 묶여있는 경우</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span> + <span class="number">12px</span> / <span class="number">3</span>; <span class="comment">// 더하기 연산자와 같이 사용</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="문자"><a href="#문자" class="headerlink" title="문자"></a>문자</h2><p>문자 연산에는 <code>+</code>가 사용된다. 문자 연산의 결과는 첫번째 피연산자를 기준으로 한다. 첫번째 피연산자에 따옴표가 붙어있다면 연산 결과를 따옴표로 묶는다. 반대로 첫번째 피연산자에 따옴표가 붙어있지 않으면 연산 결과도 따옴표를 처리하지 않는다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;hello&quot;</span> + world;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: hello + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: helloworld;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="색상"><a href="#색상" class="headerlink" title="색상"></a>색상</h2><p>색상도 연산이 가능하다.</p><h2 id="논리"><a href="#논리" class="headerlink" title="논리"></a>논리</h2><p>SASS의 <code>@if</code>조건문에서 사용되는 논리 연삭에는 <code>그리고</code>, <code>또는</code>, <code>부정</code>이 있다. 자바스크립트의 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code>와 같은 기능이라 보면 된다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">90px</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="keyword">not</span> (<span class="variable">$width</span> &gt; <span class="number">100px</span>) &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://heropy.blog/2018/01/31/sass/">Sass(SCSS) 완전 정복!</a><br><a href="http://hwangsunsoo.org/lecture/src/sass_article_seminar_2017_2nd_half.html">Sass 기초와 활용</a><br><a href="https://recoveryman.tistory.com/277">[사스(Sass)] 2. Sass 사용법</a><br><a href="https://developer.mozilla.org/ko/docs/Glossary/CSS_preprocessor">CSS 전처리기</a><br><a href="https://designmeme.github.io/ko/blog/write-sass-with-scss/">Sass는 SCSS로 쓰세요</a><br><a href="https://i-fiction.tistory.com/9">[사스(Sass)] Sass 기본 사용법 (컴파일 및 명령어)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/sass/">sass</category>
      
      
      <category domain="https://recordboy.github.io/tags/css/">css</category>
      
      <category domain="https://recordboy.github.io/tags/sass/">sass</category>
      
      
      <comments>https://recordboy.github.io/2020/02/10/sass-operations/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SASS] SASS 중첩(Nesting), 변수(Variables), 가져오기(Import)</title>
      <link>https://recordboy.github.io/2020/02/09/sass-nesting-variables-import/</link>
      <guid>https://recordboy.github.io/2020/02/09/sass-nesting-variables-import/</guid>
      <pubDate>Sun, 09 Feb 2020 06:08:04 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;중첩-Nesting&quot;&gt;&lt;a href=&quot;#중첩-Nesting&quot; class=&quot;headerlink&quot; title=&quot;중첩(Nesting)&quot;&gt;&lt;/a&gt;중첩(Nesting)&lt;/h2&gt;&lt;p&gt;SASS는 중첩기능을 사용할 수 있다. 상위 선택자의 반복을 피할수 있어 좀 더 편리하게 복잡한 구조를 작성할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="중첩-Nesting"><a href="#중첩-Nesting" class="headerlink" title="중첩(Nesting)"></a>중첩(Nesting)</h2><p>SASS는 중첩기능을 사용할 수 있다. 상위 선택자의 반복을 피할수 있어 좀 더 편리하게 복잡한 구조를 작성할 수 있다.</p><a id="more"></a><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="selector-class">.list</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상위-선책자-참조"><a href="#상위-선책자-참조" class="headerlink" title="상위 선책자 참조"></a>상위 선책자 참조</h2><p>중첩 안에서 <code>&amp;</code>키워드는 상위(부모) 선택자를 참조한다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&amp;</code> 키워드는 상위 선택자를 참조했기 때문에 아래와 같이 응용이 가능하다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &amp;-<span class="selector-tag">small</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125;</span><br><span class="line">    &amp;-medium &#123; <span class="attribute">font-size</span>: <span class="number">14px</span>; &#125;</span><br><span class="line">    &amp;-large &#123; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-medium</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-large</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="중첩-벗어나기"><a href="#중첩-벗어나기" class="headerlink" title="중첩 벗어나기"></a>중첩 벗어나기</h2><p>중첩에서 벗어나고 싶을 때 <code>@at-root</code>키워드를 사용한다. 중첩 안에서 생성하되 중첩 밖에서 사용해야 하는 경우에 유용하다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="keyword">@at-root</span> .box &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="중첩된-속성"><a href="#중첩된-속성" class="headerlink" title="중첩된 속성"></a>중첩된 속성</h2><p><code>font-</code>, <code>margin-</code> 등과 같이 동일한 네임 스페이스를 가지는 속성들은 아래와 같이 사용할 수 있다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: &#123;</span><br><span class="line">        weight: bold;</span><br><span class="line">        size: <span class="number">12px</span>;</span><br><span class="line">        family: sans-serif;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="attribute">margin</span>: &#123;</span><br><span class="line">        top: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="attribute">padding</span>: &#123;</span><br><span class="line">        bottom: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="변수-Variables"><a href="#변수-Variables" class="headerlink" title="변수(Variables)"></a>변수(Variables)</h2><p>반복적으로 사용되는 값을 변수로 지정할 수 있다. 변수 이름 앞에는 항상 <code>$</code>를 붙인다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$변수이름: 속성값;</span><br></pre></td></tr></table></figure><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color-code</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="variable">$url</span>: <span class="string">&quot;/common/images/&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color-code</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="variable">$url</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="string">&quot;/common/images/&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="변수의-유효범위"><a href="#변수의-유효범위" class="headerlink" title="변수의 유효범위"></a>변수의 유효범위</h2><p>변수는 사용 가능한 유효범위가 있다. 선언된 블록({}) 내에서만 유효범위를 가진다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>변수 <code>$w</code>는 <code>.wrap</code>의 블록 안에서 설정되었기 때문에, 블록 밖의 <code>.box2</code>에서 사용할 수 없다.</p><h2 id="변수-재-할당"><a href="#변수-재-할당" class="headerlink" title="변수 재 할당"></a>변수 재 할당</h2><p>아래처럼 변수에 변수를 할당할 수 있다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$red</span>: <span class="number">#FF0000</span>;</span><br><span class="line"><span class="variable">$color-code</span>: <span class="variable">$red</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color-code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="전역-설정"><a href="#전역-설정" class="headerlink" title="전역 설정"></a>전역 설정</h2><p><code>!global</code> 플래그를 사용하면 변수의 유효범위를 전역(Global)로 설정할 수 있다. 대신 기존에 사용하던 같은 이름의 변수가 있을 경우 값이 덮어져 사용된다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="variable">$w</span>: <span class="number">100px</span> !global;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="variable">$w</span>: <span class="number">200px</span> !global;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="초기값-설정"><a href="#초기값-설정" class="headerlink" title="초기값 설정"></a>초기값 설정</h2><p><code>!default</code> 플래그는 할당되지 않은 변수의 초깃값을 설정한다. 즉, 할당되어있는 변수가 있다면 변수가 기존 할당 값을 사용한다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="variable">$w</span>: <span class="number">200px</span> !default;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>변수와 값을 설정하겠지만, 혹시 기존 변수가 있을 경우 현재 설정하는 값은 사용하지 않겠다는 의미로 쓸 수 있다.</p><h2 id="문자-보간"><a href="#문자-보간" class="headerlink" title="문자 보간"></a>문자 보간</h2><p><code>#&#123;&#125;</code>를 이용하여 코드의 어디든지 변수 값을 넣을 수 있다.</p><p><strong>SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$family</span>: unquote(<span class="string">&quot;Droid+Sans&quot;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=#&#123;$family&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Compiled to</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="가져오기-Import"><a href="#가져오기-Import" class="headerlink" title="가져오기(Import)"></a>가져오기(Import)</h2><p>CSS에는 현재 파일에 다른 CSS를 불러오는 <code>@import</code>라는 속성이 있다. 이 속성을 사용하면 의도에 따라 코드를 잘게 쪼개어 효율적으로 유지 보수할 수 있지만, <code>@import</code>로 선언되어 있는 CSS마다 http 요청을 발생하므로 웹페이지 성능 저하의 원인이 된다 하여 사용을 지양하고 있다. SASS에서도 다른 파일을 불러올 수 있는 <code>@import</code>가 있다. CSS의 <code>@import</code>와 다른 점은 여러개의 SASS파일은 <code>@import</code>해도 최종적으로 하나의 CSS로 컴파일해주기 때문에 성능에 영향을 주지 않고 코드를 여러 파일로 나누어 관리할 수 있다. 물론 <code>@import</code>된 파일에서 정의된 내용은 부모 SASS 파일에서도 사용할 수 있다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 작성 방법 : @import &quot;파일명.scss&quot; 또는 @import &quot;파일명&quot;;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;reset&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;reset.scss&quot;</span>;</span><br></pre></td></tr></table></figure><p>참고로 <code>.scss</code>파일을 <code>@import</code>할 경우, <code>.scss</code> 확장자를 써주지 않아도 된다.</p><h2 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h2><p>만약 <code>.scss</code>파일 앞에 언더바(_)로 시작하면 CSS파일로 따로 컴파일 되지 않는다. html에서 해당 CSS파일을 불러올일이 없고, <code>@import</code>만 필요한 경우에는 이 기능을 사용하면 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://heropy.blog/2018/01/31/sass/">Sass(SCSS) 완전 정복!</a><br><a href="http://hwangsunsoo.org/lecture/src/sass_article_seminar_2017_2nd_half.html">Sass 기초와 활용</a><br><a href="https://recoveryman.tistory.com/277">[사스(Sass)] 2. Sass 사용법</a><br><a href="https://developer.mozilla.org/ko/docs/Glossary/CSS_preprocessor">CSS 전처리기</a><br><a href="https://designmeme.github.io/ko/blog/write-sass-with-scss/">Sass는 SCSS로 쓰세요</a><br><a href="https://i-fiction.tistory.com/9">[사스(Sass)] Sass 기본 사용법 (컴파일 및 명령어)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/sass/">sass</category>
      
      
      <category domain="https://recordboy.github.io/tags/css/">css</category>
      
      <category domain="https://recordboy.github.io/tags/sass/">sass</category>
      
      
      <comments>https://recordboy.github.io/2020/02/09/sass-nesting-variables-import/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[SASS] SASS 설치 및 기본 사용</title>
      <link>https://recordboy.github.io/2020/02/07/sass-init/</link>
      <guid>https://recordboy.github.io/2020/02/07/sass-init/</guid>
      <pubDate>Fri, 07 Feb 2020 06:05:58 GMT</pubDate>
      
      <description>&lt;p&gt;CSS전처리기(CSS pre-processor)라 불리는 SASS(Syntactically Awesome StyleSheet)는 CSS의 단점을 보완한 CSS의 확장형이다. 전처리기란 자신만의 특별한 구문을 가지고 CSS를 생성하도록 하는 프로그램이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>CSS전처리기(CSS pre-processor)라 불리는 SASS(Syntactically Awesome StyleSheet)는 CSS의 단점을 보완한 CSS의 확장형이다. 전처리기란 자신만의 특별한 구문을 가지고 CSS를 생성하도록 하는 프로그램이다.</p><a id="more"></a><h2 id="CSS-전처리기-종류"><a href="#CSS-전처리기-종류" class="headerlink" title="CSS 전처리기 종류"></a>CSS 전처리기 종류</h2><ul><li><a href="https://sass-lang.com/">SASS</a>  </li><li><a href="http://lesscss.org/">LESS</a>  </li><li><a href="https://stylus-lang.com/">Stylus</a>  </li><li><a href="https://postcss.org/">PostCSS</a></li></ul><h2 id="SASS와-SCSS의-차이"><a href="#SASS와-SCSS의-차이" class="headerlink" title="SASS와 SCSS의 차이"></a>SASS와 SCSS의 차이</h2><p>SCSS는 SASS의 3버전으로 업그레이드 하면서 갖춰진 새로운 문법 체계이다.</p><h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><p><code>&#123;&#125;</code>(중괄호)와 <code>;</code>(세미콜론) 사용 안하기 때문에 코드가 깔끔하고 간결함</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.list</span><br><span class="line">  float: left</span><br><span class="line">  width: 100px</span><br><span class="line">  li</span><br><span class="line">    color: red</span><br><span class="line">    background: url(&quot;.&#x2F;image.jpg&quot;)</span><br><span class="line">    &amp;:last-child</span><br><span class="line">      margin-right: -10px</span><br></pre></td></tr></table></figure><h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h3><p>인라인 코드(한 줄 작성)를 작성할 수 있고, CSS와 유사한 문법을 가지기 때문에 코드 통합이 훨씬 쉬움</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">&quot;./image.jpg&quot;</span>);</span><br><span class="line">    &amp;<span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">      <span class="attribute">margin-right</span>: -<span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SCSS를-추천"><a href="#SCSS를-추천" class="headerlink" title="SCSS를 추천"></a>SCSS를 추천</h3><ul><li>공식 문법: 공식 레퍼런스는 SCSS 문법을 기준으로 모든 문법을 설명하고 예시를 보여줌</li><li>더 넓은 사용자: 다수의 라이브러리, 프레임워크가 SCSS 문법을 활용하는 등 새로운 문법이 더욱 널리 쓰임</li><li>CSS 호환성: 친근한 CSS 문법은 SASS와 CSS 사이의 심리적 틈을 줄여주고, 기능적으로도 확장성을 높임</li><li>여러 줄 쓰기 지원: SASS 문법은 들여쓰기와 줄 바꿈이 문법의 중요한 요소이기 때문에, 반대로 여러 줄 쓰기를 지원하지 않음</li></ul><p>SASS를 더 편리하게 수정한 버전이 SCSS이기 때문에 파일 확장자명은 <code>.scss</code>를 사용한다.</p><h2 id="컴파일-방법"><a href="#컴파일-방법" class="headerlink" title="컴파일 방법"></a>컴파일 방법</h2><p>SASS는 웹에서 직접 동작할 수 없다. 최종에는 표준 CSS로 동작해야 하며, 전처리기로 작성 후 CSS로 컴파일해야 한다. 다양한 방법으로 컴파일이 가능하여 여기서는 node-sass를 사용할 것이다. node-sass는 Node.js를 컴파일러인 LibSass에 바인딩한 라이브러리다.</p><p>NPM을 사용하여 전역에 설치해준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g node-sass</span><br></pre></td></tr></table></figure><p>컴파일이 제대로 되는지 테스트를 해보겠다. 작업할 디렉토리로 가서 아래처럼 구문을 적은뒤 <code>test.scss</code>로 저장한다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$red</span>: <span class="number">#ff0000</span>;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>터미널로 들어가 해당 디렉토리로 이동한 뒤 아래를 참고하여 명령어를 입력한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass 작성한scss파일명.scss 변환될css파일명.css</span><br></pre></td></tr></table></figure><p>위 예제 파일을 컴파일 할려면 아래처럼 입력하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass test.scss test.css</span><br></pre></td></tr></table></figure><p>명령어를 실행하면 해당 디렉토리에 test.css 및 test.css.map 파일이 정상적으로 생성된 것을 확인할 수 있다. <code>.scss</code> 파일은 컴파일이 진행된 파일이고, <code>.map</code> 파일은 scss와 css가 어떻게 연결되어 있는지에 대한 정보 파일이다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*# sourceMappingURL=test.css.map */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>하지만 매번 이렇게 컴파일을 할수 없기에 내가 작성하고 있던 파일을 변경(저장)되면 자동으로 컴파일 하도록 설정할 수 있다.</p><ol><li><p>작성된 scss파일만 변환</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sass --watch 작성된.scss</span><br></pre></td></tr></table></figure></li><li><p>디렉토리의 모든 scss 파일을 변환</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sass --watch .:.</span><br></pre></td></tr></table></figure></li></ol><p>위와 같이 해당 명령어를 입력하면 test.scss 변경 시 자동으로 test.css도 변경된다. 해당 명령어를 취소하고자 할 때는 ctrl + c 를 입력하면 취소가 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://heropy.blog/2018/01/31/sass/">Sass(SCSS) 완전 정복!</a><br><a href="http://hwangsunsoo.org/lecture/src/sass_article_seminar_2017_2nd_half.html">Sass 기초와 활용</a><br><a href="https://recoveryman.tistory.com/277">[사스(Sass)] 2. Sass 사용법</a><br><a href="https://developer.mozilla.org/ko/docs/Glossary/CSS_preprocessor">CSS 전처리기</a><br><a href="https://designmeme.github.io/ko/blog/write-sass-with-scss/">Sass는 SCSS로 쓰세요</a><br><a href="https://i-fiction.tistory.com/9">[사스(Sass)] Sass 기본 사용법 (컴파일 및 명령어)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/sass/">sass</category>
      
      
      <category domain="https://recordboy.github.io/tags/css/">css</category>
      
      <category domain="https://recordboy.github.io/tags/sass/">sass</category>
      
      
      <comments>https://recordboy.github.io/2020/02/07/sass-init/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[UI] Vanilla JS로 짱깸뽀(가위 바위 보) 게임 만들기</title>
      <link>https://recordboy.github.io/2020/02/05/ui-rock-paper-scissors/</link>
      <guid>https://recordboy.github.io/2020/02/05/ui-rock-paper-scissors/</guid>
      <pubDate>Wed, 05 Feb 2020 08:38:06 GMT</pubDate>
      
      <description>&lt;p&gt;바닐라 자바스크립트로 만든 추억의 짱깸뽀 게임이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>바닐라 자바스크립트로 만든 추억의 짱깸뽀 게임이다.</p><a id="more"></a><h2 id="게임-설명"><a href="#게임-설명" class="headerlink" title="게임 설명"></a>게임 설명</h2><ul><li>시작 버튼을 눌러 게임 시작</li><li>게임을 한판 할 때 마다 하단의 코인이 하나씩 소모됨</li><li>룰렛 주변으로 게임 결과가 표시 됨</li><li>승리할 경우 랜덤으로 코인이 지급</li><li>짱깸뽀 사운드를 추가해야 하는데 구하기가 쉽지 않음</li></ul><h2 id="게임-하기"><a href="#게임-하기" class="headerlink" title="게임 하기"></a>게임 하기</h2><p><a href="https://recordboy.github.io/rock-paper-scissors/">여기를 클릭하면 게임 화면이 나온다.</a></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p><a href="https://github.com/recordboy/rock-paper-scissors">여기를 클릭하면 코드를 확인할 수 있다.</a></p>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/ui/">ui</category>
      
      
      <category domain="https://recordboy.github.io/tags/vanillajs/">vanillajs</category>
      
      <category domain="https://recordboy.github.io/tags/ui/">ui</category>
      
      
      <comments>https://recordboy.github.io/2020/02/05/ui-rock-paper-scissors/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 자바스크립트 변수 명명 규칙</title>
      <link>https://recordboy.github.io/2020/02/05/javascript-naming-convension/</link>
      <guid>https://recordboy.github.io/2020/02/05/javascript-naming-convension/</guid>
      <pubDate>Wed, 05 Feb 2020 06:01:00 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;변수-함수명은-카멜-케이스를-사용한다&quot;&gt;&lt;a href=&quot;#변수-함수명은-카멜-케이스를-사용한다&quot; class=&quot;headerlink&quot; title=&quot;변수, 함수명은 카멜 케이스를 사용한다.&quot;&gt;&lt;/a&gt;변수, 함수명은 카멜 케이스를 사용한다.&lt;/h2&gt;&lt;p&gt;첫글자는 소문자, 단위로 첫글자 대문자를 사용, 중간에 언더바(_)사용 금지한다. 대표적인 표기법으로 카멜 케이스, 파스칼 표기법, 헝가리안 표기법, 스네이크 표기법이 있으며 사용하는 언어에 따라 권장사항이 다르다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="변수-함수명은-카멜-케이스를-사용한다"><a href="#변수-함수명은-카멜-케이스를-사용한다" class="headerlink" title="변수, 함수명은 카멜 케이스를 사용한다."></a>변수, 함수명은 카멜 케이스를 사용한다.</h2><p>첫글자는 소문자, 단위로 첫글자 대문자를 사용, 중간에 언더바(_)사용 금지한다. 대표적인 표기법으로 카멜 케이스, 파스칼 표기법, 헝가리안 표기법, 스네이크 표기법이 있으며 사용하는 언어에 따라 권장사항이 다르다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageName;</span><br></pre></td></tr></table></figure><h2 id="상수는-영문-대문자-스네이크-표기법을-사용한다"><a href="#상수는-영문-대문자-스네이크-표기법을-사용한다" class="headerlink" title="상수는 영문 대문자 스네이크 표기법을 사용한다."></a>상수는 영문 대문자 스네이크 표기법을 사용한다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SYMBOLIC_NAME;</span><br></pre></td></tr></table></figure><p>여러 단어가 합쳐져 만들어진 약어(HTML, XML)의 경우는 전부 대문자로 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML;</span><br></pre></td></tr></table></figure><h2 id="생성자-함수는-대문자-카멜-케이스를-사용한다"><a href="#생성자-함수는-대문자-카멜-케이스를-사용한다" class="headerlink" title="생성자 함수는 대문자 카멜 케이스를 사용한다."></a>생성자 함수는 대문자 카멜 케이스를 사용한다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="지역변수-혹은-private-변수는-언더바-로-시작한다"><a href="#지역변수-혹은-private-변수는-언더바-로-시작한다" class="headerlink" title="지역변수 혹은 private 변수는 언더바(_)로 시작한다."></a>지역변수 혹은 private 변수는 언더바(_)로 시작한다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _private;</span><br></pre></td></tr></table></figure><h2 id="예약어를-사용하지-않는다"><a href="#예약어를-사용하지-않는다" class="headerlink" title="예약어를 사용하지 않는다."></a>예약어를 사용하지 않는다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">for</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">this</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="전역-변수를-사용하지-않는다"><a href="#전역-변수를-사용하지-않는다" class="headerlink" title="전역 변수를 사용하지 않는다."></a>전역 변수를 사용하지 않는다.</h2><p>모든 컴파일 단위는 하나의 공용 전역 객체(window)에 로딩된다. 전역 변수는 언제든지 프로그램의 모든 부분에서 접근할 수 있기 때문에 편하지만, 바꿔 말하면 프로그램의 모든 부분에서 변경될 수 있고, 그로 인해 프로그램에 치명적인 오류를 발생시킬 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">global</span> = <span class="string">&#x27;data&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="암묵적-전역-변수를-사용하지-않는다"><a href="#암묵적-전역-변수를-사용하지-않는다" class="headerlink" title="암묵적 전역 변수를 사용하지 않는다."></a>암묵적 전역 변수를 사용하지 않는다.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  result = x + y;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">0</span>; <span class="comment">// var a = (b = 0);와 같다. b가 암묵적 전역이 된다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = x + y;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a, b;</span><br><span class="line">  a = b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://ui.toast.com/fe-guide/ko_CODING-CONVENSION/">코딩 컨벤션</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/02/05/javascript-naming-convension/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 자바스크립트 싱글톤 패턴</title>
      <link>https://recordboy.github.io/2020/02/04/javascript-singleton-pattern/</link>
      <guid>https://recordboy.github.io/2020/02/04/javascript-singleton-pattern/</guid>
      <pubDate>Tue, 04 Feb 2020 02:42:45 GMT</pubDate>
      
      <description>&lt;p&gt;전체 시스템에서 하나의 인스턴스만 존재하도록 보장하는 객체 생성패턴을 의미한다. 대표적으로 $를 활용해서 DOM을 조작하고 이벤트도 다루는 jQuery가 있으며, 객체 리터럴도 싱글톤 패턴이라고 할수 있다.(자바스크립트에서 객체 리터럴로 생성한 객체는 다른 객체와 같을 수 없다. 객체 내부의 내용이 같더라도 참조하는 객체가 다르기 때문이다.) 객체 리터럴은 한계가 있는데 비공개 프로퍼티 및 함수를 선언할 수 없다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>전체 시스템에서 하나의 인스턴스만 존재하도록 보장하는 객체 생성패턴을 의미한다. 대표적으로 $를 활용해서 DOM을 조작하고 이벤트도 다루는 jQuery가 있으며, 객체 리터럴도 싱글톤 패턴이라고 할수 있다.(자바스크립트에서 객체 리터럴로 생성한 객체는 다른 객체와 같을 수 없다. 객체 내부의 내용이 같더라도 참조하는 객체가 다르기 때문이다.) 객체 리터럴은 한계가 있는데 비공개 프로퍼티 및 함수를 선언할 수 없다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;myName&#x27;</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.get()); <span class="comment">// myName</span></span><br></pre></td></tr></table></figure><p>비공개 프로퍼티 및 함수를 정의하려면 클로저(closure)를 활용해야 한다. 즉 제대로 된 싱글톤 패턴은 객체 리터럴 + 클로저의 조합이 필요하다고 할 수 있다. 아래 코드를 확인해보면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 비공개 프로퍼티 정의</span></span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 비공개 메서드 정의</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// singleton 인스턴스 정의</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 공개 프로퍼티 정의</span></span><br><span class="line">            prop: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 공개 메서드 정의</span></span><br><span class="line">            method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 공개 메서드인 getInstance를 정의한 객체, 비공개 프로퍼티 및 메서드에 접근 가능(클로저)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        getInstance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 인스턴스가 선언이 안되있는경우 인스턴스 생성</span></span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">                instance = init();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 인스턴스가 선언이 되있는 경우 인스턴스 반환</span></span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleton1 = singleton.getInstance();</span><br><span class="line"><span class="built_in">console</span>.log(singleton1.method());</span><br><span class="line"><span class="keyword">var</span> singleton2 = singleton.getInstance();</span><br><span class="line"><span class="built_in">console</span>.log(singleton1 === singleton2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>위 코드는 비공개 메서드인 init()의 return문에서 객체 리터럴로 정의되는 인스턴스가 싱글톤 객체이며, 전체 시스템에서 하나만 존재하게 된다. 순서대로 보면 익명함수의 return문에는 싱글톤 객체를 구하는 공개 메서드(getInstance)를 포함한 객체를 반환하며, getInstance메서드는 instance값을 확인해 인스턴스가 선언이 안되있는 경우 비공개 메서드인 init를 호출하여 singleton인스턴스를 생성하여 instance에 할당하게 된다. 이렇게 일반적으로 싱글톤 패턴에서는 이미 객체가 생성되었는지 여부를 알려주는 instance와 같은 내부 변수가 필요하다. 그리고 싱글톤 패턴에서는 내부 변수에 접근할 수 있는 객체를 반환하는 클로저를 이용해야 한다.</p><p>정리를 하면 내부의 getInstance메서드에서 비공개 프로퍼티인 instance에 접근할 수 있다는 것과, getInstance메서드의 호출이 끝나더라도 instance의 값은 계속 유지되는 특성(클로저)를 이용해 prop, method()이 포함된 객체를 유일하게 생성하게 된다. 그래서 singleton.getInstance()를 몇번이나 호출하더라도 얻는 객체는 모두 동일한 싱글톤 객체를 가리키게 된다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://webclub.tistory.com/150">싱글톤(singleton) 패턴</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/02/04/javascript-singleton-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 자바스크립트 모듈 패턴</title>
      <link>https://recordboy.github.io/2020/02/03/javascript-module-pattern/</link>
      <guid>https://recordboy.github.io/2020/02/03/javascript-module-pattern/</guid>
      <pubDate>Mon, 03 Feb 2020 05:57:31 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;모듈-패턴이란&quot;&gt;&lt;a href=&quot;#모듈-패턴이란&quot; class=&quot;headerlink&quot; title=&quot;모듈 패턴이란?&quot;&gt;&lt;/a&gt;모듈 패턴이란?&lt;/h2&gt;&lt;p&gt;모듈이란 전제 어플리케이션의 일부를 독립된 코드로 분리하여 만들어 놓은 것이다.&lt;/p&gt;
&lt;h2 id=&quot;모듈화를-했을-때-장점&quot;&gt;&lt;a href=&quot;#모듈화를-했을-때-장점&quot; class=&quot;headerlink&quot; title=&quot;모듈화를 했을 때 장점&quot;&gt;&lt;/a&gt;모듈화를 했을 때 장점&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 활용할 수 있다.&lt;/li&gt;
&lt;li&gt;코드를 개선하면 이를 사용하고 있는 모든 애플리케이션의 동작이 개선된다.&lt;/li&gt;
&lt;li&gt;코드 수정 시에 필요한 로직을 빠르게 찾을 수 있다.&lt;/li&gt;
&lt;li&gt;필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.&lt;/li&gt;
&lt;li&gt;한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드할 때 시간과 네트워크 트래픽을 절약할 수 있다.(브라우저에서만 해당)&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="모듈-패턴이란"><a href="#모듈-패턴이란" class="headerlink" title="모듈 패턴이란?"></a>모듈 패턴이란?</h2><p>모듈이란 전제 어플리케이션의 일부를 독립된 코드로 분리하여 만들어 놓은 것이다.</p><h2 id="모듈화를-했을-때-장점"><a href="#모듈화를-했을-때-장점" class="headerlink" title="모듈화를 했을 때 장점"></a>모듈화를 했을 때 장점</h2><ul><li>자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 활용할 수 있다.</li><li>코드를 개선하면 이를 사용하고 있는 모든 애플리케이션의 동작이 개선된다.</li><li>코드 수정 시에 필요한 로직을 빠르게 찾을 수 있다.</li><li>필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.</li><li>한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드할 때 시간과 네트워크 트래픽을 절약할 수 있다.(브라우저에서만 해당)</li></ul><a id="more"></a><h2 id="객체-리터럴을-사용한-모듈-패턴"><a href="#객체-리터럴을-사용한-모듈-패턴" class="headerlink" title="객체 리터럴을 사용한 모듈 패턴"></a>객체 리터럴을 사용한 모듈 패턴</h2><p>자바스크립트에서 모듈을 구현하는 가장 쉬운 방법은 객체 리터럴을 사용하는 방법이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    key: <span class="string">&#x27;data&#x27;</span>,</span><br><span class="line">    publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.key); <span class="comment">// data</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.publicMethod()); <span class="comment">// data</span></span><br></pre></td></tr></table></figure><p>객체 리터럴은 모듈 패턴이기도 하며, 하나의 객체라는 점에서 싱글톤 패턴이라고도 할 수 있다. 동일한 코드를 어떠한 관점에서 보느냐에 따라 다양한 패턴이 될 수 있다. 객체 리터럴은 간단하지만 모든 속성이 공개되어있다는 단점이 있다. 독립된 모듈은 자체적으로 필요한 내부 변수 및 내부 함수를 모두 갖고 있어야 하므로 클로저를 이용해야 한다.</p><p>아래는 클로저를 활용한 모듈패턴이다.</p><h2 id="클로저를-활용한-모듈-패턴"><a href="#클로저를-활용한-모듈-패턴" class="headerlink" title="클로저를 활용한 모듈 패턴"></a>클로저를 활용한 모듈 패턴</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * -----------------------</span></span><br><span class="line"><span class="comment">        * 모듈 패턴을 구현할 클로저 코드</span></span><br><span class="line"><span class="comment">        * -----------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 은닉될 멤버 정의</span></span><br><span class="line">    <span class="keyword">var</span> privateKey = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateKey++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 공개될 멤버(특권 메서드) 정의</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicKey: privateKey,</span><br><span class="line">        publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> privateMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.publicMethod()); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.publicMethod()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>모듈 패턴의 반환값은 함수가 아닌 객체이다. 위의 코드를 순서대로 보면 익명함수가 자동으로 실행되고 반환된 객체를 module 변수에 할당한다. 따라서 module.publicMethod()처럼 메서드를 호출할 수 있다. 자동 호출되는점을 제외하고 클로저와 유사하다.</p><h3 id="클로저-경우"><a href="#클로저-경우" class="headerlink" title="클로저 경우"></a>클로저 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> private = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        private++;</span><br><span class="line">        <span class="keyword">return</span> private;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> val = func();</span><br><span class="line"><span class="built_in">console</span>.log(val()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(val()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>그리고 인스턴스를 여러개 만들어 낼 수 있는 구조라는 점에서 싱글톤 패턴과 차이가 있다.</p><h3 id="싱글톤-패턴-경우"><a href="#싱글톤-패턴-경우" class="headerlink" title="싱글톤 패턴 경우"></a>싱글톤 패턴 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">var</span> private = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            publicKey: private,</span><br><span class="line">            publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> publicKey;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 싱글톤 패턴은 아래 조건문에서 처음 인스턴스가 선언되면 다시 인스턴스를 만들지 않고 기존의 인스턴스를 리턴한다.</span></span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleton1 = singleton();</span><br><span class="line"><span class="keyword">var</span> singleton2 = singleton();</span><br><span class="line"><span class="built_in">console</span>.log(singleton1 === singleton2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>하나의 인스턴스를 선언하지 않고 여러개의 인스턴스를 생성하려면 익명함수를 사용하지 않고 생성자 함수 방식으로 만들면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Module = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> privateKey = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateKey++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicKey: privateKey,</span><br><span class="line">        publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> privateMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = Module();</span><br><span class="line"><span class="built_in">console</span>.log(obj1.publicMethod()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.publicMethod()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = Module();</span><br><span class="line"><span class="built_in">console</span>.log(obj2.publicMethod()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.publicMethod()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>위처럼 Module 함수를 정의하여 함수를 호출하면 여러개의 인스턴스를 생성할 수 있다. 클로저 인스턴스와 유사하지만, 한가지 차이점은 내부의 익명함수에서 반환값이 함수가 아니라 객체를 반환한다는 점이다.</p><p>모듈 패턴과 네임 스페이스 패턴을 함께 사용하면 더욱 깔끔한 코드가 완성된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = app || &#123;&#125;;</span><br><span class="line">app.module = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> privateKey = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateKey++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicKey: privateKey,</span><br><span class="line">        publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> privateMethod();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(app.module.publicMethod()); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(app.module.publicMethod()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://webclub.tistory.com/5">module pattern (모듈패턴) #1</a><br><a href="https://asfirstalways.tistory.com/234">[JS_Design Pattern] 2. 모듈 패턴 (Module Pattern)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      
      <comments>https://recordboy.github.io/2020/02/03/javascript-module-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[JavaScript] 자바스크립트 클로저</title>
      <link>https://recordboy.github.io/2020/02/01/javascript-closure/</link>
      <guid>https://recordboy.github.io/2020/02/01/javascript-closure/</guid>
      <pubDate>Sat, 01 Feb 2020 02:41:10 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;중첩함수에서 내부함수가 외부함수의 환경을 기억하는것을 클로저라고 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>중첩함수에서 내부함수가 외부함수의 환경을 기억하는것을 클로저라고 한다.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func라는 함수를 선언하고 foo변수에 ‘data’문자열을 추가한 뒤 foo변수를 리턴하는 익명함수를 선언하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closure = func();</span><br><span class="line"><span class="built_in">console</span>.log(closure());</span><br><span class="line"><span class="comment">// &#x27;data&#x27;</span></span><br></pre></td></tr></table></figure><p>func함수의 리턴값을 closure변수에 할당한 뒤 closure를 실행한 값을 콘솔로 찍어보았다. 결과는 ‘data’라는 문자열이 출력되었다. func의 지역변수로 있는 foo는 func함수가 끝나면서 소멸되어야하지만 값을 잃지 않고 ‘data’값을 가지고 있다. 이 현상을 클로저라 한다. 다른 구문도 살펴보겠다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closure = count();</span><br><span class="line"><span class="built_in">console</span>.log(closure());</span><br><span class="line"><span class="built_in">console</span>.log(closure());</span><br><span class="line"><span class="built_in">console</span>.log(closure());</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>count함수의 지역변수인 num값이 소멸되지 않고 계속 카운트되는 것을 확인해 볼 수 있다.</p><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><h3 id="변수의-은닉화"><a href="#변수의-은닉화" class="headerlink" title="변수의 은닉화"></a>변수의 은닉화</h3><p>자바스크립트에서는 인스턴스를 생성할때 Private Variables에 대한 접근 권한 문제가 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Create</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Create(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj._name);</span><br><span class="line"><span class="comment">// 민수</span></span><br></pre></td></tr></table></figure><p>위에서 생성된 obj객체의 _name프로퍼티는 변수명 앞에 _를 포함하였기 때문에 Private Variables로 쓰고싶다는 의도를 알 수 있다. 하지만 _name프로퍼티는 동적으로 변경될 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj._name = <span class="string">&#x27;인성&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj._name);</span><br><span class="line"><span class="comment">// 인성</span></span><br></pre></td></tr></table></figure><p>이 경우 클로저를 사용하여 외부에서 내부변수에 접근하는것을 제한할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = create(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line">hello();</span><br><span class="line"><span class="comment">// 민수</span></span><br></pre></td></tr></table></figure><p>여기서는 외부에서 _name에 접근할 방법이 전혀 없다. 이렇게 클로저를 활용하여 은닉화를 해결할 수 있다.</p><h3 id="고유한-환경"><a href="#고유한-환경" class="headerlink" title="고유한 환경"></a>고유한 환경</h3><p>클로저는 고유한 환경을 가지고 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> txt = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> txt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> closure01 = func(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> closure02 = func(<span class="string">&#x27;인성&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> closure03 = func(<span class="string">&#x27;한나&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(closure01()) <span class="comment">// 민수</span></span><br><span class="line"><span class="built_in">console</span>.log(closure02()) <span class="comment">// 인성</span></span><br><span class="line"><span class="built_in">console</span>.log(closure03()) <span class="comment">// 한나</span></span><br></pre></td></tr></table></figure><p>위의 구문을 보면 txt변수가 동적으로 변화하는 것처럼 보이지만, 실제로는 txt변수 자체가 여러번 생성된 것이다. 즉, closure01(), closure02(), closure03()은 서로 다른 환경을 가지고 있다. 서로 다른 환경을 가지고 있다는것은 그만큼 메모리면에서 큰 비효율을 낳는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = input;</span><br><span class="line">    <span class="built_in">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.set = <span class="function"><span class="keyword">function</span> (<span class="params">rename</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = rename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Func(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.get());</span><br></pre></td></tr></table></figure><p>위 코드는 생성자함수를 사용하여 인스턴스를 생성하는 구문인데, 클로저가 두번(get, set)이나 생성되었다. 이 상태에서 인스턴스를 계속 만들면 같은일을 하는 클로저가 중복으로 생성되고 메모리낭비가 심해질 것이다.<br>따라서 클로저는 객체의 prototype안에 저장함으로써 같은 기능을 모든 인스턴스가 공유하는 형태로 코드를 만들어야한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = input;</span><br><span class="line">&#125;</span><br><span class="line">Func.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">Func.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">rename</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = rename;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Func(<span class="string">&#x27;민수&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.get());</span><br></pre></td></tr></table></figure><p>이렇게 prototype안에 클로저를 넣으면, 인스턴스가 생성되더라도 중복으로 메모리를 낭비하지 않고, 생성자 내부의 prototype안의 클로저를 참조하기 때문에 메모리낭비를 방지할 수 있다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>클로저는 독립적인(자유) 변수를 가리키는 함수 또는 클로저 안에 정의된 내부함수는 만들어진 환경을 기억한다.</li><li>클로저는 외부함수의 스코프 영역에 접근할 수 있고, 그것을 기억하고 있어야 한다.</li><li>외부함수가 종료된 후에도 내부함수는 외부함수를 계속 참조하고 있어야 한다.</li><li>데이터의 캡슐화 및 정보은닉에도 사용 가능하다.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://hyunseob.github.io/2016/08/30/javascript-closure/">JavaScript 클로저(Closure)</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/closure/">closure</category>
      
      
      <comments>https://recordboy.github.io/2020/02/01/javascript-closure/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Debug] 크롬으로 디버깅하기</title>
      <link>https://recordboy.github.io/2020/01/29/chrome-debug-sources/</link>
      <guid>https://recordboy.github.io/2020/01/29/chrome-debug-sources/</guid>
      <pubDate>Wed, 29 Jan 2020 01:58:03 GMT</pubDate>
      
      <description>&lt;p&gt;크롬 개발자 도구의 &lt;code&gt;Sources&lt;/code&gt;패널로 디버깅을 할 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>크롬 개발자 도구의 <code>Sources</code>패널로 디버깅을 할 수 있다.</p><a id="more"></a><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greetinf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = hello();</span><br><span class="line">    <span class="keyword">var</span> w = world();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;msg&#x27;</span>).setAttribute(<span class="string">&#x27;value&#x27;</span>, h + w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;greetinf()&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>버튼을 클릭하면 <code>greetinf</code>함수가 실행되며, <code>h</code>, <code>w</code>변수에 차례대로 값이 할당된 후 인풋 태그에 결과 값(helloworld)이 출력되는 구문이다.</p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><script>function hello() {    return 'hello';}function world() {    return 'world';}function greetinf() {    var h = hello();    var w = world();    document.getElementById('msg').setAttribute('value', h + w);}</script><div>    <input type="text" id="msg" />    <button type="button" onclick="greetinf()">click</button></div><h2 id="디버깅"><a href="#디버깅" class="headerlink" title="디버깅"></a>디버깅</h2><p>크롬 개발자 도구의 소스탭을 들어가면 아래 처럼 확인할 수 있다.</p><p><img src="/gallery/post/chrome-debug-sources-01.png" alt="소스탭"></p><p>개발자 도구는 특정 라인이 아닌 글로벌한 이벤트에 대해 중단점을 만들 수 있다. 좌측 하단의 <code>Event Listener Breakpoints</code>탭으로 들어가  <code>Mouse &gt; click</code>를 체크해준다. 화면으로 넘어가 버튼을 클릭하면 이벤트가 실행되면서 이벤트가 실행된 코드를 소스탭에서 확인할 수 있다.</p><h3 id="1-Breakpoints"><a href="#1-Breakpoints" class="headerlink" title="1. Breakpoints"></a>1. Breakpoints</h3><p>중단점을 이용하면 실행이 중지된 시점에 변수가 어떤 값을 담고 있는지 알 수 있다. 또한 실행이 중지된 시점을 기준으로 명령어를 실행할 수도 있다.</p><h3 id="2-Pretty-Print"><a href="#2-Pretty-Print" class="headerlink" title="2. Pretty Print"></a>2. Pretty Print</h3><p>압축 파일(min)을 보기 좋게 정렬하여 볼 수 있다.</p><h3 id="3-Resume-Script-Execution-단축키-F8"><a href="#3-Resume-Script-Execution-단축키-F8" class="headerlink" title="3. Resume Script Execution(단축키: F8)"></a>3. Resume Script Execution(단축키: F8)</h3><p>스크립트 실행을 다시 시작한다. 추가 중단점이 없는 경우, 실행이 쭉 이어지고 디버거는 동작하지 않는다.</p><h3 id="4-Step-단축키-F9"><a href="#4-Step-단축키-F9" class="headerlink" title="4. Step (단축키 F9)"></a>4. Step (단축키 F9)</h3><p>다음 명령어를 실행한다. <code>Step</code>버튼을 계속 누르면 스크립트 전체를 문 단위로 하나하나 실행할 수 있다.</p><h3 id="5-Step-over-next-function-call-단축키-F10"><a href="#5-Step-over-next-function-call-단축키-F10" class="headerlink" title="5. Step over next function call(단축키 F10)"></a>5. Step over next function call(단축키 F10)</h3><p>다음 명령어를 실행하되, 함수 안으로 들어가진 않는다. <code>Step</code>과 유사하지만, 다음 문이 함수 호출일 때 <code>Step</code>과는 다르게 동작한다.(<code>alert</code> 같은 내장함수에는 해당하지 않고, 직접 작성한 함수일 때만 동작이 다르다.) <code>Step</code>은 함수 내부로 들어가 함수 본문 첫 번째 줄에서 실행을 멈춘다. 반면 <code>Step over next function call</code>은 보이지 않는 곳에서 중첩 함수를 실행하긴 하지만 함수 내로 진입하지 않는다. 함수 호출 시 내부에서 어떤 일이 일어나는지 궁금하지 않을 때 유용하다. 실행은 함수 실행이 끝난 후에 즉시 멈춘다.</p><h3 id="6-Step-into-next-function-call-단축키-F11"><a href="#6-Step-into-next-function-call-단축키-F11" class="headerlink" title="6. Step into next function call(단축키 F11)"></a>6. Step into next function call(단축키 F11)</h3><p><code>Step</code>과 유사한데, 비동기 함수 호출에서 <code>Step</code>과는 다르게 동작한다. <code>Step</code>은 <code>setTimeout</code>(함수 호출 스케줄링에 쓰이는 내장 메서드)같은 비동기 동작은 무시한다. 반면 <code>Step into next function call</code>는 비동기 동작을 담당하는 코드로 진입하고, 필요하다면 비동기 동작이 완료될 때까지 대기한다.</p><h3 id="7-Step-out-of-current-function-단축키-shift-F11"><a href="#7-Step-out-of-current-function-단축키-shift-F11" class="headerlink" title="7. Step out of current function(단축키 shift + F11)"></a>7. Step out of current function(단축키 shift + F11)</h3><p>현재 실행 중인 함수의 실행을 계속 이어가다가 함수 본문 마지막 줄에서 실행을 멈춘다. 실수로 <code>Step</code>을 눌러 내부 동작을 알고 싶지 않은 중첩 함수로 진입했거나 가능한 한 빨리 함수 실행을 끝내고 싶은 경우 유용하다.</p><h3 id="8-Deactivate-breakpoints"><a href="#8-Deactivate-breakpoints" class="headerlink" title="8. Deactivate breakpoints"></a>8. Deactivate breakpoints</h3><p>모든 중단점을 일시적으로 활성화/비활성화한다.(실행에는 영향이 없음)</p><h3 id="9-Pause-on-excepoints"><a href="#9-Pause-on-excepoints" class="headerlink" title="9. Pause on excepoints"></a>9. Pause on excepoints</h3><p>활성화되어 있고, 개발자 도구가 열려있는 상태에서 스크립트 실행 중에 에러가 발생하면 실행이 자동으로 멈춘다. 실행이 중단되었기 때문에 변수 등을 조사해 어디서 에러가 발생했는지 찾을 수 있게 된다. 개발하다가 에러와 함께 스크립트가 죽었다면 디버거를 열고 이 옵션을 활성화한 후, 페이지를 새로고침하면 에러가 발생한 곳과 에러 발생 시점의 컨텍스트를 확인할 수 있다.</p><h3 id="10-Scope"><a href="#10-Scope" class="headerlink" title="10. Scope"></a>10. Scope</h3><p>현재 정의된 모든 변수를 출력한다. <code>Local</code>은 함수의 지역변수를 보여준다. 지역 변수 정보는 소스 코드 영역에서도 확인(강조 표시)할 수 있다. <code>Global</code>은 함수 바깥에 정의된 전역 변수를 보여준다. <code>Local</code> 하위 항목으로 <code>this</code>에 대한 정보도 출력된다.</p><h3 id="11-Watch"><a href="#11-Watch" class="headerlink" title="11. Watch"></a>11. Watch</h3><p>표현식을 평가하고 결과를 보여준다. Add watch expression 버튼을 클릭해 원하는 표현식을 입력한 후 Enter를 누르면 중단 시점의 값을 보여준다. 입력한 표현식은 실행 과정 중에 계속해서 재평가된다.</p><h3 id="Call-Stack"><a href="#Call-Stack" class="headerlink" title="Call Stack"></a>Call Stack</h3><p>코드를 해당 중단점으로 안내한 실행 경로를 역순으로 표시한다.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://ko.javascript.info/debugging-chrome">Chrome으로 디버깅하기</a><br><a href="https://developers.google.com/web/tools/chrome-devtools/javascript?hl=ko">Chrome DevTools에서 자바스크립트 디버깅 시작하기</a><br><a href="https://subicura.com/2018/02/14/javascript-debugging.html">크롬 개발자 도구를 이용한 자바스크립트 디버깅</a><br><a href="https://opentutorials.org/course/580/2869">생활코딩 - Sources</a></p></blockquote>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/front-end/">front-end</category>
      
      <category domain="https://recordboy.github.io/categories/front-end/javascript/">javascript</category>
      
      
      <category domain="https://recordboy.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://recordboy.github.io/tags/chrome/">chrome</category>
      
      <category domain="https://recordboy.github.io/tags/debug/">debug</category>
      
      
      <comments>https://recordboy.github.io/2020/01/29/chrome-debug-sources/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Mac] 맥 터미널 쉘 접속</title>
      <link>https://recordboy.github.io/2020/01/21/mac-terminal-ssh/</link>
      <guid>https://recordboy.github.io/2020/01/21/mac-terminal-ssh/</guid>
      <pubDate>Tue, 21 Jan 2020 01:55:53 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;윈도우에서는 Putty라는 프로그램으로 ssh접속을 하였지만 맥에서는 터미널로 바로 접속이 가능하다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</description>
        
      
      
      
      <content:encoded><![CDATA[<p>윈도우에서는 Putty라는 프로그램으로 ssh접속을 하였지만 맥에서는 터미널로 바로 접속이 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh [ID]@[HOST]</span><br></pre></td></tr></table></figure><p>예를들어 <code>webapp</code>이 아이디이고 <code>127.0.0.1</code>가 호스트 번호 라면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh webapp@127.0.0.1</span><br></pre></td></tr></table></figure><p>라고 입력한 뒤 패스워드를 입력하면 된다.</p>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/mac/">mac</category>
      
      
      <category domain="https://recordboy.github.io/tags/mac/">mac</category>
      
      <category domain="https://recordboy.github.io/tags/terminal/">terminal</category>
      
      
      <comments>https://recordboy.github.io/2020/01/21/mac-terminal-ssh/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Mac] 맥 터미널 명령어</title>
      <link>https://recordboy.github.io/2020/01/19/mac-terminal-command/</link>
      <guid>https://recordboy.github.io/2020/01/19/mac-terminal-command/</guid>
      <pubDate>Sun, 19 Jan 2020 01:54:21 GMT</pubDate>
      
        
        
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;명령어&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Windows 커맨드&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Mac OS 터미널&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<table><thead><tr><th align="left">명령어</th><th align="left">Windows 커맨드</th><th align="left">Mac OS 터미널</th></tr></thead><tbody><tr><td align="left">현재 디렉토리</td><td align="left">cd</td><td align="left">pwd</td></tr><tr><td align="left">현재 디렉토리 파일 리스트 보기</td><td align="left">dir</td><td align="left">ls</td></tr><tr><td align="left">디렉토리 이동</td><td align="left">cd</td><td align="left">cd</td></tr><tr><td align="left">디렉토리 생성</td><td align="left">mkdir</td><td align="left">mkdir</td></tr><tr><td align="left">디렉토리 삭제</td><td align="left">rmdir</td><td align="left">rmdir</td></tr><tr><td align="left">화면 클리어</td><td align="left">cls</td><td align="left">clear</td></tr><tr><td align="left">null 파일 생성</td><td align="left">type NUL &gt;</td><td align="left">touch</td></tr><tr><td align="left">파일 삭제</td><td align="left">del</td><td align="left">rm</td></tr><tr><td align="left">파일 이동</td><td align="left">move</td><td align="left">mv</td></tr><tr><td align="left">디렉토리 이름 바꾸기</td><td align="left">ren</td><td align="left">mv</td></tr><tr><td align="left">Explorer/Finder 에서 열기</td><td align="left">start</td><td align="left">open</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/mac/">mac</category>
      
      
      <category domain="https://recordboy.github.io/tags/command/">command</category>
      
      <category domain="https://recordboy.github.io/tags/mac/">mac</category>
      
      <category domain="https://recordboy.github.io/tags/terminal/">terminal</category>
      
      
      <comments>https://recordboy.github.io/2020/01/19/mac-terminal-command/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Nginx] Nginx 리눅스 명령어</title>
      <link>https://recordboy.github.io/2020/01/04/nginx-command/</link>
      <guid>https://recordboy.github.io/2020/01/04/nginx-command/</guid>
      <pubDate>Sat, 04 Jan 2020 01:49:13 GMT</pubDate>
      
        
        
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;명령어&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;# systemctl status nginx</description>
        
      
      
      
      <content:encoded><![CDATA[<table><thead><tr><th align="left">명령어</th><th align="left">동작</th></tr></thead><tbody><tr><td align="left"># systemctl status nginx</td><td align="left">상태 확인</td></tr><tr><td align="left"># sudo systemctl stop nginx</td><td align="left">웹서버 정지</td></tr><tr><td align="left"># sudo systemctl start nginx</td><td align="left">웹서버 재시작</td></tr><tr><td align="left"># sudo systemctl reload nginx</td><td align="left">설정 리로드</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://recordboy.github.io/categories/server/">server</category>
      
      <category domain="https://recordboy.github.io/categories/server/nginx/">nginx</category>
      
      
      <category domain="https://recordboy.github.io/tags/nginx/">nginx</category>
      
      <category domain="https://recordboy.github.io/tags/command/">command</category>
      
      
      <comments>https://recordboy.github.io/2020/01/04/nginx-command/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
